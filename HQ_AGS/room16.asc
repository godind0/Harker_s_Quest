// room script file
bool paintRemovedOnWindow = false;
bool curtainRemoved = false;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("open") != -1 && cmd.IndexOf("window") != -1)
  {
    sendBackToNormalParsing = false;
    if(isCharacterNearObject(oWindowOpened, 40.0, player))
    {
      if(paintRemovedOnWindow)
      {
        oWindowOpened.Visible = false;
        player.Say("Splendid. That curtain is still blocking my view");
      } else
      {
        player.Say("The window is painted shut");
      }
    } else {
      player.Think("I'm too far away from the window");
    }      
  } else if((cmd.IndexOf("open") != -1 || cmd.IndexOf("pull") != -1 || cmd.IndexOf("remove") != -1) && cmd.IndexOf("curtain") != -1)
  {
    if(oWindowOpened.Visible == false)
    {
      if(!curtainRemoved)
      {
        player.Say("Ah! The view of the bedroom is now unobstructed");
        curtainRemoved = true;
      } else
      {
        player.Say("I pulled the curtain of the way already");
      }
    } else
    {
      player.Say("I need to open the window first");
    }
  } 
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 0 && verb == "Photograph")//window
  {
    sendBackToNormalParsing = false;
    if(curtainRemoved)
    {
      takeAPicture("Carfax's Bedroom", "A great view of the property's bedroom", 3);
    } else
    {
      takeAPicture("Carfax's Bedroom", "A partially obstructed view of the property's bedroom", 1);
    }
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here (and set the bool to false)
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}
function room_AfterFadeIn()
{
  musicInRoom(aDeambulation);
}
function room_LeaveLeft()
{
  player.ChangeRoom(14, 416, 158, eDirectionDown);
}

function room_LeaveRight()
{
  player.ChangeRoom(15, 24, 196, eDirectionRight);
}

function oWindowOpened_UseInv()
{
  elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 32)//knife
  {
    if(!paintRemovedOnWindow)
    {
      player.Say("I can remove the paint with Mina's knife!");
      player.Say("Thank you my love!");
      paintRemovedOnWindow = true;
      giveScoreOnce("RemovePaintOnWindow_Carfax", 1);
    } else
    {
      player.Say("There is nothing left to cut");
    }
  }
}
