// room script file
//TO DO
//TO TEST: The bedroom is now the living room
//TO TEST: changed knife to razor
//TO TEST: Going to the right from here leads to the back of the house : room 11


bool paintRemovedOnWindow = false;
bool curtainRemoved = false;
int wellCommentCounter;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if((cmd.IndexOf("open") != -1 || cmd.IndexOf("remove") != -1) && cmd.IndexOf("paint") == -1 && cmd.IndexOf("window") != -1) //open window
  {
    sendBackToNormalParsing = false;
    if(isCharacterNearObject(oWindowOpened, 40.0, player))
    {
      if(paintRemovedOnWindow)
      {
        oWindowOpened.Visible = false;
        player.Say("Splendid. That curtain is still blocking my view");
        oRemovedWindow.Visible = true;
      } else
      {
        player.Say("The window's lock looks broken, but it is painted shut");
      }
    } else if (isCharacterNearObject(oWindowDen, 40.0, player)) 
    {
      player.Think("That window is locked from the inside");
    } else
    {
      player.Think("I'm too far away from the window");
    }
  } else if((cmd.IndexOf("open") != -1 || cmd.IndexOf("pull") != -1 || cmd.IndexOf("remove") != -1) && 
             cmd.IndexOf("curtain") != -1)                                                                //remove curtain
  {
    if(oWindowOpened.Visible == false)
    {
      if(!curtainRemoved)
      {
        oCurtain.Visible = false;
        player.Say("Ah! The view of the living room is now unobstructed");
        curtainRemoved = true;
      } else
      {
        player.Say("I pulled the curtain of the way already");
      }
    } else
    {
      player.Say("I need to open the window first");
    }
    sendBackToNormalParsing = false;
  } else if ((cmd.StartsWith("look", eCaseInsensitive) || cmd.StartsWith("examine", eCaseInsensitive) || cmd.StartsWith("observe", eCaseInsensitive)) && (cmd.IndexOf("Mansion") != -1 || cmd.IndexOf("House") != -1 || cmd.IndexOf("Carfax") != -1))
  {
    player.Say("This is Carfax, no doubt a corruption of the old Quatre Face, as the house is four-sided, agreeing with the cardinal points of the compass");
    player.Say("The land must be in all some twenty acres, quite surrounded by a solid stone wall I crossed without difficulty");
    player.Say("The house is very large and of all periods back, I should say, to medi√¶val times");
    player.Say("There are many trees on the land, which make it in places gloomy");
    player.Say("One part is of stone immensely thick, with a few windows. It looks like part of a keep");
    player.Say("I also noticed a pond and an old chapel or church, while advancing towards the house");
    player.Say("The pond is deep, and dark-looking, evidently fed by some springs, as the water seems clear and flows away in a fair-sized stream");    
    player.Say("The house has been added to, but in a very straggling way, and I can only guess at the amount of ground it covers, which must be very great");
    player.FaceDirection(eDirectionDown);
    Wait(20);
    player.Say("There are but few houses close at hand, one being a very large house only recently added to and formed into a private sanitarium");
    player.Say("It is not, however, visible from the grounds");
    giveScoreOnce("Observe Carfax", 3);
    sendBackToNormalParsing = false;
  } else if((cmd.IndexOf("photograph") != -1 || cmd.IndexOf("take picture") != -1 || cmd.IndexOf("take a picture") != -1) &&
            (cmd.IndexOf("inside") != -1 || cmd.IndexOf("window") != -1 || cmd.IndexOf("living") != -1))                     //picture of window
  {
    if(isCharacterNearHotspot(hWindow, 20.0, player))
    {
      if(curtainRemoved)
      {
        takeAPicture("Carfax's Living", "A great view of the property's living room", 3);
      } else
      {
        takeAPicture("Carfax's Living", "A partially obstructed view of the property's living", 1);
      }
    }
    sendBackToNormalParsing = false;
  } /*else if((cmd.IndexOf("use") != -1 || cmd.IndexOf("pry") != -1 || cmd.IndexOf("remove") != -1) &&
            (cmd.IndexOf("window") != -1 || cmd.IndexOf("paint") != -1) &&
            (cmd.IndexOf("blade") != -1 || cmd.IndexOf("razor") != -1 || cmd.IndexOf("shaver") != -1))                                                                 //remove paint
  {
    if(!paintRemovedOnWindow)
    {
      player.Say("I can remove the paint with my razor!");
      paintRemovedOnWindow = true;
      giveScoreOnce("RemovePaintOnWindow_Carfax", 1);
    } else
    {
      player.Say("There is nothing left to cut");
    }
    sendBackToNormalParsing = false;
  }*/
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(((eT == roomObjects && index == 0) || (eT == roomHotspots && index == 1)) && verb == "Photograph")//living room window
  {
    if(curtainRemoved)
    {
      takeAPicture("Carfax's Living", "A great view of the property's living room", 3);
    } else
    {
      takeAPicture("Carfax's Living", "A partially obstructed view of the property's living room", 1);
    }
    sendBackToNormalParsing = false;
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

function wellComments()
{
  switch(wellCommentCounter)
  {
    case 1:
      player.Say("I do not need stale underground pond water");
      player.Say("Nor a magic mirror");
      break;
    case 2:
      player.Say("I do not need stale underground pond water");
      player.Say("And I have a strange feeling I could find a dead body in there");
      giveScoreOnce("AllWellComments", 1);
      break;
    default:
      player.Say("I do not need stale underground pond water");
      break;
  }
  wellCommentCounter++;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here
  if (eT == roomObjects && index == 8)//well
  {
    wellComments();
  } else if (((eT == roomObjects && index == 0) || (eT == roomHotspots && index == 1)))
  {
    if(!paintRemovedOnWindow)
    {
      player.Say("This window look slightly off its hinges and is kept in place only by layers of paint");
      if(!curtainRemoved)
      {
        player.Say("And the curtain is blocking the view");
      }
      if(!player.HasInventory(iRazor))
      {
        player.Say("I reckon the partial view should be enough for the file");
      }
    } else if(!curtainRemoved)
    {
      player.Say("The curtain is still blocking the view");
    }    
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
  }
}

function room_AfterFadeIn()
{
  musicInRoom(aDeambulation, 1);
}

function room_LeaveLeft()
{
  player.ChangeRoom(14, 411, 161, eDirectionDown);
}

function room_LeaveRight()
{
  player.ChangeRoom(11, 18, 182, eDirectionRight);
}

function oWell_Interact()
{
  wellComments();
  player.Say("I don't know what to do with it");
}

function room_FirstLoad()
{
  wellCommentCounter = 0;
}

function removePaint()
{
  if(!paintRemovedOnWindow)
  {
    player.Say("I can remove the paint with my razor!");
    paintRemovedOnWindow = true;
    giveScoreOnce("RemovePaintOnWindow_Carfax", 1);
  } else
  {
    player.Say("There is nothing left to cut");
  }
}

function oWindowOpened_UseInv()
{
  elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 3)//razor
  {
    removePaint();
  }
}

function hWindow_UseInv()
{
  elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 3)//razor
  {
    removePaint();
  }
}
