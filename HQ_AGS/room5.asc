// room script file
bool tooClose;
bool kioskOpened = true;
bool buttyMission = false;
bool unloaded = false;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == allCharacters && index == 5 && verb == "talk") // kiosk guy
  {
    if(seenDraculaLetter)
    {
      if(player.HasInventory(iDiploma) && iSalesDossier.Name == "Carfax Dossier")
      {
        player.Walk(205, 172, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionUp);
        cLondonTrainStation.Say("Well hello!");
        player.Say("Hi there, I need to organize quite a trip");
        cLondonTrainStation.Say("What is the final destination");
        player.Say("Hum. . .");
        Wait(15);
        player.Say("Bistritz?");
        cLondonTrainStation.Say("Bistri»õa, in Romania?");
        player.Say(". . .Yes");
        player.Say("I need to stop by Munich on the way, as well");
        cLondonTrainStation.Say("You will need to choose your exact itinerary. . .");
        cLondonTrainStation.Say("First, let me book you on a train to Southamptons and a ferry to the mainland");
        setStoryBeat(LondonComplete);
        player.ChangeRoom(12);
      } else if(iSalesDossier.Name != "Carfax Dossier") 
      {
        player.Say("I need to make the sales dossier for Carfax before leaving London");
      } else if(!player.HasInventory(iDiploma)) 
      {
        player.Say("I need to take my sollicitor exam before leaving London");
      }
    } else
    {
      player.Say("I don't need to go back to Exeter");
    }
    sendBackToNormalParsing = false;
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here (and set the bool to false)
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
     case 2:
      buttyMission = true;
      break;
     case 3://oops
      break;
     case 4:
      if((playerHasSubitem("Bacon Butty", iFood) || playerHasSubitem("Chip Butty", iFood)) && buttyMission)
      {
        dCabby.SetOptionState(9, eOptionOn);
      } else
      {
        dCabby.SetOptionState(9, eOptionOff);
      }
      break;
     case 5:
      if(playerHasSubitem("Bacon Butty", iFood))
      {
        if(isFoodSpoiled("Bacon Butty"))
        {
          cCabby.Say("Ew, this Butty turned bad, mate");
          cCabby.Say("That is disgusting");
          GiveScore(-1);
          removeSubitem(iFood, "Bacon Butty", true);
        } else
        {
          cCabby.Say("Oh yes! Delicious butteriness");
          notableSay(cCabby, "Carfax Seller", String.Format("The name's %s, he from Norfolk or someplace", getCarfaxSeller()), 0);
          cCabby.Say("Thanks again for the sandwich!");
          removeSubitem(iFood, "Bacon Butty", true);
        }
      } else if (playerHasSubitem("Chip Butty", iFood))
      {
        if(isFoodSpoiled("Chip Butty"))
        {
          cCabby.Say("Ew, this Butty turned bad, mate");
          cCabby.Say("That is disgusting");
          GiveScore(-1);
          removeSubitem(iFood, "Chip Butty", true);
        } else
        {
          cCabby.Say("Oh yes! Delicious butteriness");
          notableSay(cCabby, "Carfax Seller", String.Format("The name's %s, he from Norfolk or someplace", getCarfaxSeller()), 0);
          cCabby.Say("Thanks again for the sandwich!");
          removeSubitem(iFood, "Chip Butty", true);
        }
      }
      CallRoomScript(4);
      break;
    case 6:
      if(tooClose)
      {
        gameIsOver("Jonathan stood too close to the moving train");
      }
      break;
    case 7:
      if(tooClose)
      {
        player.Transparency = 100;
      }
      break;
  }
}

function manageKioskAttendant(bool onEnter)
{
  bool opened = isThisPlaceOpened_bool(TrainStation);
  int attendantTransparency = 100;
  if(opened)
  {
    attendantTransparency = 0;
  }
  
  if(onEnter)
  {
    oClosedSign.Visible = !opened;
    kioskOpened = opened;
    cLondonTrainStation.Transparency = attendantTransparency;
  } else if (opened != kioskOpened)
  {
    if(!opened)
    {
      cLondonTrainStation.Say("The kiosk is now closing");
      kioskOpened = opened;
    }
    if(Game.Camera.X < 240)
    {
      FadeOut(5);
    }
    cLondonTrainStation.Transparency = attendantTransparency;
    oClosedSign.Visible = !opened;
    if(Game.Camera.X < 240)
    {
      FadeIn(5);
    }
    if(opened)
    {
      cLondonTrainStation.SayBackground("The kiosk is now opened");
      kioskOpened = opened;
    }
  }
}

function room_FirstLoad()
{
  manageKioskAttendant(true);
  modifyCloudiness(-100);
  manageDarkness();
  triggerCutscene(arriveInLondon);
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
  changeArrival_X_Y(5,  117,  187);
}

function room_LeaveBottom()
{
  dTravel.Start();
}

function region1_WalksOff()
{
  tooClose = false;
}

function region1_Standing()
{
  tooClose = true;
}

function room_Load()
{
  //manageTrain(true);
  isAnyTrainInStation(London, 1, cLondonTrainStation, false, 6);
  manageKioskAttendant(true); 
  cCabby.SetProperty("dialogIndex", 6);
  tooClose = false;
  manageDarkness();
  if(dCabby.GetOptionState(7) == eOptionOn)
  {
    setHorseViews(BandagedHorse);
  } else
  {
    setHorseViews(NormalHorse);
  }
  setCoachView(Empty);
  cCabby.Move(428, 181, eNoBlock, eAnywhere);
  cCabby.FaceDirection(eDirectionDown);
}

function room_RepExec()
{
  isAnyTrainInStation(London, 1, cLondonTrainStation, true, 6);
  manageKioskAttendant(false);
  
  if(!oTrain.Animating && oTrain.View == 27 && !unloaded)
  {
    unloaded = true;
    manageRandomCharacter(cRandomChar1, 4, 2, eDirectionDown);
    Wait(2);
    manageRandomCharacter(cRandomChar2, 1, 5, eDirectionDown);
    Wait(2);
    manageRandomCharacter(cRandomChar3, 3, 6, eDirectionDown);
  } else if (oTrain.Animating && oTrain.View == 27 && unloaded)
  {
    unloaded = false;
  }  
}
