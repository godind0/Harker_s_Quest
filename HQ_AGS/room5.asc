// room script file
Dictionary* trainDepartureFromLondon;
String nextTrain;
String firstTrain;
String lastTrain;
bool tooClose;
bool trainAnnounced;
bool firstIn = true;
bool kioskOpened = true;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == allCharacters && index == 5 && verb == "talk") // kiosk guy
  {
    player.Say("I don't need to go back to Exeter");
    sendBackToNormalParsing = false;
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here (and set the bool to false)
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
      }
    break;
  }
}

function addATrainDeparture(int thisHour, int thisMinutes, String thisAMPM, String finalDestination)
{
  String timeKey = translateTimeToHHMMAM(thisHour, thisMinutes, thisAMPM);
  trainDepartureFromLondon.Set(timeKey, finalDestination);
}

function setUpNextTrain()
{
  String thisTime = whatTimeIsIt(false);
  String trains[];
  trains = trainDepartureFromLondon.GetKeysAsArray();
  int i;
  bool foundOne = false;
  
  nextTrain = lastTrain;
  
  for(i = 0 ; i < trainDepartureFromLondon.ItemCount ; i++)
  {
    if(isThisTimeBeforeThisTime(whatTimeIsIt(false), trains[i]) && // later than now
       isThisTimeBeforeThisTime(trains[i],  nextTrain)) // before Nexttrain
    {
      nextTrain = trains[i];
      foundOne = true;
    }
  }
  
  if(!foundOne)
  {
    nextTrain = firstTrain;
  }
}

function manageTrain(bool onEnter)
{
  String thisTime = whatTimeIsIt(false);
  if(onEnter)
  {
    setUpNextTrain();
    oTrain.Visible = isThisTimeWithinXminOfThisTime(thisTime, nextTrain, 25);
  } else if (isThisTimeWithinXminOfThisTime(thisTime, nextTrain, 25) && !oTrain.Visible) // show train enter 
  {
    if(Game.Camera.X > 100) {
      cLondonTrainStation.SayBackground(String.Format("Announcing the %s train in direction of %s", nextTrain, trainDepartureFromLondon.Get(nextTrain)));
      oTrain.Visible = true;
    } else {
      cLondonTrainStation.Say(String.Format("Announcing the %s train in direction of %s", nextTrain, trainDepartureFromLondon.Get(nextTrain)));
      FadeOut(5);
      oTrain.Visible = true;
      FadeIn(5);
    }
    if(tooClose)
    {
      gameIsOver("Jonathan stood too close to the rails");
    }
  } else if (isThisTimeWithinXminOfThisTime(thisTime, nextTrain, 1) && oTrain.Visible && !trainAnnounced) //announce train departure
  {
    cLondonTrainStation.SayBackground("Steer clear of the track for the train's departure!");
    trainAnnounced = true;
  } else if (isThisTimeBeforeThisTime(nextTrain, whatTimeIsIt(false)) && oTrain.Visible) // train leaves 
  {
    if(Game.Camera.X > 100) {
      oTrain.Visible = false;
    } else {
      FadeOut(5);
      oTrain.Visible = false;
      FadeIn(5);
    }
    if(tooClose)
    {
      gameIsOver("Jonathan stood too close to the rails");
    }
    trainAnnounced = false;
    setUpNextTrain();
  }
}

function setupTrainDepartures()
{
  trainDepartureFromLondon = Dictionary.Create(eNonSorted);
  
  firstTrain = translateTimeToHHMMAM(5, 25, "AM");
  
  addATrainDeparture(5, 25, "AM", "Exeter, Queen Street");
  addATrainDeparture(5, 50, "AM", "Plymouth, Friary");
  addATrainDeparture(7, 05, "AM", "Salisbury");
  addATrainDeparture(9, 00, "AM", "Plymouth, Friary");
  addATrainDeparture(9, 15, "AM", "Andover");
  addATrainDeparture(9, 45, "AM", "Yeovil");
  addATrainDeparture(11, 0, "AM", "Salisbury, layover to Plymouth and Exeter");
  addATrainDeparture(11, 15, "AM", "Hurstbourne");
  addATrainDeparture(11, 45, "AM", "Salisbury");
  addATrainDeparture(1, 00, "PM", "Exeter, St. David's");
  addATrainDeparture(2, 25, "PM", "Exeter, St. David's");
  addATrainDeparture(4, 20, "PM", "Woking");
  addATrainDeparture(5, 00, "PM", "Plymouth, Friary");
  addATrainDeparture(5, 50, "PM", "Templecombe");
  addATrainDeparture(7, 25, "PM", "Yeovil");
  addATrainDeparture(8, 50, "PM", "Salisbury");
  
  lastTrain = translateTimeToHHMMAM(8, 50, "PM");
  
  setUpNextTrain();
  manageTrain(true);
  firstIn = false;
}

function manageKioskAttendant(bool onEnter)
{
  bool opened = isThisPlaceOpened_bool(TrainStation);
  int attendantTransparency = 100;
  if(opened)
  {
    attendantTransparency = 0;
  }
  
  if(onEnter)
  {
    oClosedSign.Visible = !opened;
    kioskOpened = opened;
    cLondonTrainStation.Transparency = attendantTransparency;
  } else if (opened != kioskOpened)
  {
    if(!opened)
    {
      cLondonTrainStation.Say("The kiosk is now closing");
      kioskOpened = opened;
    }
    if(Game.Camera.X < 240)
    {
      FadeOut(5);
    }
    cLondonTrainStation.Transparency = attendantTransparency;
    oClosedSign.Visible = !opened;
    if(Game.Camera.X < 240)
    {
      FadeIn(5);
    }
    if(opened)
    {
      cLondonTrainStation.SayBackground("The kiosk is now opened");
      kioskOpened = opened;
    }
  }
}

function room_FirstLoad()
{
  setupTrainDepartures();
  manageKioskAttendant(true);
  triggerCutscene(arriveInLondon);
  gDark.Transparency = 100;
}

function room_AfterFadeIn()
{
  cCabby.SetProperty("dialogIndex", 6);
  musicInRoom(ALostInThought);
  changeArrival_X_Y(5,  117,  187);
}

function room_LeaveBottom()
{
  dTravel.Start();
}

function region1_WalksOff()
{
  tooClose = false;
}

function region1_Standing()
{
  tooClose = true;
}

function room_Load()
{
  if(!firstIn)
  {
    manageTrain(true);
    manageKioskAttendant(true);
  }
}

function room_RepExec()
{
  manageTrain(false);
  manageKioskAttendant(false);
}
