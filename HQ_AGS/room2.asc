// room script file
String familyNamesPerDrawerNb[];
int nbOfPropertiesBeforeDracula = 2;
String currentRequester;

int inWhichDrawerIsThisClient(String clientName)
{
  int drawerNumber = -1;
  int i = 2;
  
  if(alphaOrder_isThisBeforeThat(clientName, familyNamesPerDrawerNb[1])) {
    drawerNumber = 1;
  } else {
    while(i < 36 && drawerNumber == -1)
    {
      if(alphaOrder_isThisBeforeThat(clientName, familyNamesPerDrawerNb[i]))
      {
        drawerNumber = i;
      }
      i++;
    }
    if(drawerNumber == -1) {
      drawerNumber = 36;
    }
  }
  
  return drawerNumber;
}

String findSellerNameInCMD(Set* sellerList,  String cmd)
{
  String sellerName = "Null";
  String sellerListString[];
  sellerListString = sellerList.GetItemsAsArray();
  int i = 0;
  
  while(i < sellerList.ItemCount && sellerName == "Null")
  {
    if(cmd.IndexOf(sellerListString[i]) != -1)
    {
      sellerName = sellerListString[i];
    }
    i++;
  }
  
  return sellerName;  
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  Set* sellerList;
  sellerList = getHawkinsSellerList();
  String sellerName;
  Object* properDrawer;
    
  if(findVerbInDictionary(cmd) == "take" || findVerbInDictionary(cmd) == "look") // player trying to get a file
  {
    sellerName = findSellerNameInCMD(sellerList, cmd);
    if(sellerName != "Null")
    {
      sendBackToNormalParsing = false;
      properDrawer = object[inWhichDrawerIsThisClient(sellerName) - 1];
      if(isCharacterNearObject(properDrawer, 40.0, player))
      {
        if(isThisOpened(properDrawer)) 
        {
          player.Say(String.Format("Here is %s's file",  sellerName));
          player.Say("Let's see the details");
          notableRead(String.Format("[S] %s", sellerName), generateReadHawkinsFileString(sellerName), 0);
        } else
        {
          player.Think(String.Format("I do not see %s's file in the opened drawers", sellerName));
        }
      } else
      {
        player.Think(String.Format("I do not see %s's file in the nearby drawers", sellerName));
      }
    }
  }
  if((cmd.IndexOf("look ") != -1) && cmd.IndexOf("shelf") != -1)
  {
    player.FaceDirection(eDirectionRight);
    player.Think("Mr. Hawkins' beautiful sculpted bookshelf");
    player.Think("Those are all law books");
    if(!player.HasInventory(iCamera))
    {
      player.Think("And his precious photo camera");
      player.Think("Sitting on the lower ledge, as if left there");
      player.Think("He thinks it impresses clients");
    }
  } else if(findVerbInDictionary(cmd) == "take" && cmd.IndexOf("camera") != -1)
  {
    if(getStoryBeat() < packYourThings) {
      cHawkins.Say("Don't touch the camera, it is for office use only");
      cHawkins.Say("Get back to work");      
    } else
    {
      player.Think("This will be useful");
      object[51].Visible = false;
      player.AddInventory(iCamera);
      giveScoreOnce("GetCamera", 1);
    }
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 49 && verb == "take")//take notebook
  {
    Display(getNoteDescription("How to use"));
    btnNoteBook.Visible = true;
  } else if(eT == roomObjects && index == 42 && verb == "look")//look at the London map
  {
    dLondonMap.Start();    
  } else if(eT == roomObjects && index == 48 && verb == "look")//look at the Exeter map
  {
    dExeterMap.Start();    
  } else if(eT == roomObjects && index == 51 && verb == "take")//take camera
  {
    if(getStoryBeat() < packYourThings) {
      cHawkins.Say("Don't touch the camera, it is for office use only");
      cHawkins.Say("Get back to work");      
    } else
    {
      player.Think("This will be useful");
      object[51].Visible = false;
      player.AddInventory(iCamera);
      giveScoreOnce("GetCamera", 1);
    }
    sendBackToNormalParsing = false;
  } 
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("look") > -1 && (cmd.IndexOf("drawer") > -1 || cmd.IndexOf("file") > -1))
  {
    player.Think("The file cabinets are numbered, I need to specify which drawer number I want to interact with");
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 39 && verb == "look")//look at the clerk table
  {
    if(!player.HasInventory(iNotebook)){
      player.Say("Oh, there is my notebook!");
      player.Say("I was looking for it all last night");
    }
  } else if(eT == roomObjects && index < 36 && verb == "look")//look at any drawer
  {
    if(!player.HasInventory(iLedger))
    {
      player.Think("Translating codes and find files is tricky");
      player.Think("I need the ledger to do it");
      player.Think("It is sitting on top of the file cabinet, near the back wall");
    }
  } 
}

function giveAssignment(String clientName)
{
  if(clientName == "Random")
  {
    clientName = getPropertyRequesterName();    
  }  
  String requestMessage = getPropertyRequestMessage(clientName);
  cHawkins.Say("I have a new assignment for you");
  cHawkins.Say("We have another client interested in a new property");
  cHawkins.Say(String.Format("A certain %s", clientName));
  notableSay(cHawkins, String.Format("[B] %s", clientName),  requestMessage, 1);
  cHawkins.Say("Did you get that? You should note that!");
  currentRequester = clientName;
  
  gDark.Transparency = gDark.Transparency - 5;
}

function aboutThatRequest()
{
  if(isItBeforeThisTime(4,0,0,true,1))//Before 4PM
  {
    if(nbOfPropertiesBeforeDracula > 0) // DON'T FORGET TO REDUCE THIS NUMBER WITH EACH SUCCESSFUL ASSIGNEMENT
    {
      giveAssignment("Random");
    } else
    {
      oWindow.Visible = true;
      gDark.Transparency = gDark.Transparency - 20;
      Wait(10);
      oWindow.Visible = false;
      standUp(cHawkins, 3);
      cHawkins.FaceDirection(eDirectionRight);
      Wait(30);
      cHawkins.Say("The weather just took a turn it seems...");
      cHawkins.Say("No matter...");
      sit(allCharacters, 43, cHawkins, 2, false);
      giveAssignment("Dracula");
    }
  } else {
    cHawkins.Say("That is all for today, Harker");
    cHawkins.Say("Dismissed");
    gameIsOver("Jonathan took too long to do his job and missed his date with destiny!");
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  String clientName;
  String suggestedCode;
  String requestMessage;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
                
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }  
      }
      break;
    case 2://New assignment
      aboutThatRequest();
      break;
    case 3://validate
      clientName = getProposedSeller();
      if(validatePropertyProposition(currentRequester,  clientName)){
        cHawkins.Say("Great suggestion!");
        giveScoreOnce(clientName, 2);
        if(currentRequester == "Dracula")
        {
          cHawkins.Say("Purfleet is not proper London, but close enough");
          cHawkins.Say("This is remarkable work!");
          cHawkins.Say("I'll tell you what: How about you finish this file");
          cHawkins.Say("This client is an important referral from London");
          cHawkins.Say("He wants pictures of the property and a personnal visit to his estate in Transylvania");
          cHawkins.Say("My joints are killing me, so I should not travel too much");
          cHawkins.Say(String.Format("You go to London, well Purfleet, to that %s property",  clientName));
          cHawkins.Say("Take the pictures!");
          notableSay(cHawkins, "Required pictures", "We need photos of the living room, the kitchen, the dining room and the bedroom, by 4PM tomorrow", 1);
          cHawkins.Say("Bring the photo camera, it is on the bottom shelf, near the ladder.");
          cHawkins.Say("Hopefully, I will be better tomorrow and can pick them up on my way to the mainland");
          cHawkins.Say("I had a reservation for tonight at the Hummums, in Covent-garden. Use it");
          cHawkins.Say("Remember: You need to be done with all of this tomorrow at 4:00PM");
          addTravelDestination(ExeterTrainStation);
          setStoryBeat(packYourThings);
          cHawkins.Say("Go pack your trunk, Harker, you're headed to London tonight!");
        } else
        {
          cHawkins.Say("I'll send them the details!");
          nbOfPropertiesBeforeDracula--;
          aboutThatRequest();
        }
      } else
      {
        cHawkins.Say("Wait, that does not work at all!");
        cHawkins.Say("Stop wasting time, Harker!");
        GiveScore(-1);
      }
      break;
    case 4://repeat
      requestMessage = getPropertyRequestMessage(currentRequester);
      cHawkins.Say(String.Format("The client's name is %s", clientName));
      notableSay(cHawkins, String.Format("[B] %s", clientName),  requestMessage, 1);
      cHawkins.Say("Note it down!");
      GiveScore(-1);
      break;
    default:
      break;      
  }
}

function assignDrawers()
{
  Set* drawerPossibleNames = Set.Create();
  drawerPossibleNames.Add("Allen");
  drawerPossibleNames.Add("Baker");
  drawerPossibleNames.Add("Bennett");
  drawerPossibleNames.Add("Brown");
  drawerPossibleNames.Add("Carter");
  drawerPossibleNames.Add("Clark");
  drawerPossibleNames.Add("Clarke");
  drawerPossibleNames.Add("Cook");
  drawerPossibleNames.Add("Cooper");
  drawerPossibleNames.Add("Davies");
  drawerPossibleNames.Add("Davis");
  drawerPossibleNames.Add("Edwards");
  drawerPossibleNames.Add("Evans");
  drawerPossibleNames.Add("Green");
  drawerPossibleNames.Add("Griffiths");
  drawerPossibleNames.Add("Hall");
  drawerPossibleNames.Add("Harris");
  drawerPossibleNames.Add("Harrison");
  drawerPossibleNames.Add("Hill");
  drawerPossibleNames.Add("Hughes");
  drawerPossibleNames.Add("Jackson");
  drawerPossibleNames.Add("James");
  drawerPossibleNames.Add("Johnson");
  drawerPossibleNames.Add("Jones");
  drawerPossibleNames.Add("King");
  drawerPossibleNames.Add("Lee");
  drawerPossibleNames.Add("Lewis");
  drawerPossibleNames.Add("Martin");
  drawerPossibleNames.Add("Moore");
  drawerPossibleNames.Add("Morgan");
  drawerPossibleNames.Add("Morris");
  drawerPossibleNames.Add("Parker");
  drawerPossibleNames.Add("Phillips");
  drawerPossibleNames.Add("Price");
  drawerPossibleNames.Add("Roberts");
  drawerPossibleNames.Add("Robinson");
  drawerPossibleNames.Add("Shaw");
  drawerPossibleNames.Add("Smith");
  drawerPossibleNames.Add("Taylor");
  drawerPossibleNames.Add("Thomas");
  drawerPossibleNames.Add("Thompson");
  drawerPossibleNames.Add("Turner");
  drawerPossibleNames.Add("Walker");
  drawerPossibleNames.Add("Ward");
  drawerPossibleNames.Add("Watson");
  drawerPossibleNames.Add("White");
  drawerPossibleNames.Add("Williams");
  drawerPossibleNames.Add("Wilson");
  drawerPossibleNames.Add("Wood");
  drawerPossibleNames.Add("Wright");
  
  int i;
  int y;
  
  Set* drawerFamilyNames = Set.Create(eSorted);
  String drawerNameDrawFrom[];
  String drawnString;
  for(i = 0 ; i < 36 ; i++)
  {
    drawerNameDrawFrom = drawerPossibleNames.GetItemsAsArray();
    y = Random(drawerPossibleNames.ItemCount - 1);
    drawnString = drawerNameDrawFrom[y];
    drawerPossibleNames.Remove(drawnString);
    drawerFamilyNames.Add(drawnString);
  }
  
  familyNamesPerDrawerNb = drawerFamilyNames.GetItemsAsArray();
  String ledgerReadText = "Drawer #   Starts with[";
  int ledgerEntriesPerPage = 10;
  int currentEntry = ledgerEntriesPerPage;
  int page = 1;
  
  object[0].Name = "Files drawer 1";
  object[0].SetTextProperty("TextDescription", "This is a file cabinet for client files");
  object[0].SetTextProperty("alternateNames", "cabinet 1, cabinet #1, drawer 1, files 1, drawer #1, files #1");
  object[0].Visible = false;
  object[0].SetProperty("InteractableWhenInvisible", 1);
  currentEntry--;
  ledgerReadText = ledgerReadText.Append("        1                Abraham[");
  
  for(i = 1 ; i < 36 ; i++)
  {
    object[i].Name = String.Format("Files drawer %d (starting at %s)", (i+1), familyNamesPerDrawerNb[i]);
    object[i].SetTextProperty("TextDescription", String.Format("This is the file cabinet for client files starting at %s", familyNamesPerDrawerNb[i]));
    object[i].SetTextProperty("alternateNames", String.Format("cabinet %d, cabinet #%d, drawer %d, files %d, drawer #%d, files #%d", (i+1), (i+1), (i+1), (i+1), (i+1), (i+1)));
    object[i].Visible = false;
    object[i].SetProperty("InteractableWhenInvisible", 1);
    if(currentEntry == 1)
    {
      page++;
      ledgerReadText = ledgerReadText.Append(String.Format("¶Drawer #   Starts with["));
      currentEntry = ledgerEntriesPerPage;
    } else {
      currentEntry--;
    }
    ledgerReadText = ledgerReadText.Append(String.Format("        %d               %s[", (i+1), familyNamesPerDrawerNb[i]));
  }
  //debugDisplay(ledgerReadText);
  iLedger.SetTextProperty("ReadDisplay", ledgerReadText);
}

function room_FirstLoad()
{
  createAllHawkinsFiles ();
  assignDrawers();
  cHawkins.FaceDirection(eDirectionLeft);  
  triggerCutscene(getToWork);
  
}

function region1_WalksOnto()
{
  
  dTravel.Start();
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought);
}
