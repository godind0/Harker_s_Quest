// room script file
String familyNamesPerDrawerNb[];
String requestingClientsName[];
String requestedCity[];
String requestedSector[];
int requestedAgeMin[];
int requestedAgeMax[];
String requestsHawkinsDescription[];

int nbRedHerrings = 4;

int busyWorkIndex = 9;
int pointsToGain = 2;
int drawerOfHeldFile;

int inWhichDrawerIsThisClient(String clientName)
{
  int drawerNumber = -1;
  int i = 2;
  
  if(alphaOrder_isThisBeforeThat(clientName, familyNamesPerDrawerNb[1])) {
    drawerNumber = 1;
  } else {
    while(i < 36 && drawerNumber == -1)
    {
      if(alphaOrder_isThisBeforeThat(clientName, familyNamesPerDrawerNb[i]))
      {
        drawerNumber = i;
      }
      i++;
    }
    if(drawerNumber == -1) {
      drawerNumber = 36;
    }
  }
  
  return drawerNumber;
}

function getFileInfo(String code)
{
  String clientName = getClientNameFromCode(code, true);
  Object* properDrawer = object[inWhichDrawerIsThisClient(clientName) - 1];
  //debugDisplay(String.Format("Looking for %s", properDrawer.Name));
  
  if(!isCharacterNearObject(properDrawer, 30.0, player))
  {
    player.Think("I am not close enough to the file drawer");
  } else if(!isThisOpened(properDrawer)) 
  {
    player.Think("I need to open the appropriate drawer first");
    player.Think("Once I know the client name associated with the file");
    player.Think("I can use the ledger to find the proper drawer");
  } else
  {
    notableRead(String.Format("I. %s", code), readClientFile(code), 0);
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  String fileCodeInCMD = findCodeInCMD(cmd, true);
  String clientNameInCMD = findClientNameInCMD(cmd, true);
  String clientName;
  Object* properDrawer;
  
  if(fileCodeInCMD != "Null" && (findVerbInDictionary(cmd) == "take" || findVerbInDictionary(cmd) == "look")) // player trying to get a file
  {
    sendBackToNormalParsing = false;
    clientName = getClientNameFromCode(fileCodeInCMD, true);
    if(clientName == "Null")
    {
      player.Think(String.Format("I cannot find file code %s", fileCodeInCMD));
    } else {
      getFileInfo(fileCodeInCMD);
    }
  } else if(clientNameInCMD != "Null" && (findVerbInDictionary(cmd) == "take" || findVerbInDictionary(cmd) == "look")) // player trying to get a file
  {
    sendBackToNormalParsing = false;
    if(clientNameInCMD == "Null")
    {
      player.Think(String.Format("I cannot find a file for %s", clientNameInCMD));
    } else {
      fileCodeInCMD = getCodeFromClientName(clientNameInCMD, true);
      getFileInfo(fileCodeInCMD);
    }
  } else if((cmd.IndexOf("look ") != -1) && cmd.IndexOf("shelf") != -1)
  {
    player.FaceDirection(eDirectionRight);
    player.Think("Mr. Hawkins' beautiful sculpted bookshelf");
    player.Think("Those are all law books");
    if(!player.HasInventory(iCamera))
    {
      player.Think("And his precious photo camera");
      player.Think("Sitting on the lower ledge, as if left there");
      player.Think("He thinks it impresses clients");
    }
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 49 && verb == "take")//take notebook
  {
    Display(getNoteDescription("How to use"));
    btnNoteBook.Visible = true;
  } else if(eT == roomObjects && index == 42 && verb == "look")//look at the London map
  {
    dLondonMap.Start();    
  } else if(eT == roomObjects && index == 48 && verb == "look")//look at the Exeter map
  {
    dExeterMap.Start();    
  } else if(eT == roomObjects && index == 51 && verb == "take")//take camera
  {
    if(storyBeats < 1) {
      cHawkins.Say("Don't touch the camera, it is for office use only");
      cHawkins.Say("Get back to work");
      sendBackToNormalParsing = false;
    }
  } 
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("look") > -1 && (cmd.IndexOf("drawer") > -1 || cmd.IndexOf("file") > -1))
  {
    player.Think("The file cabinets are numbered, I need to specify which drawer number I want to interact with");
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 39 && verb == "look")//look at the clerk table
  {
    if(!player.HasInventory(iNotebook)){
      player.Say("Oh, there is my notebook!");
      player.Say("I was looking for it all last night");
    }
  } else if(eT == roomObjects && index < 36 && verb == "look")//look at any drawer
  {
    if(!player.HasInventory(iLedger))
    {
      player.Think("Translating codes and find files is tricky");
      player.Think("I need the ledger to do it");
      player.Think("It is sitting on top of the file cabinet, near the back wall");
    }
  }
}

bool evaluatePropertySuggestion(String suggestedCode, int currentRequest)
{
  bool returnBool = false;
  String suggestedCity = getCityPerCode(suggestedCode);
  String suggestedSector = getSectorPerCode(suggestedCode);
  int suggestedAge = getAgePerCode(suggestedCode);
  
  debugDisplay(String.Format("City : %s vs '%s'[Sector : %s vs '%s'[Age : %d < '%d' < %d['notes' are the suggested ones", requestedCity[currentRequest], suggestedCity, requestedSector[currentRequest], suggestedSector, requestedAgeMin[currentRequest], suggestedAge, requestedAgeMax[currentRequest]));
  //Busy index 7 never works... HEREE
  if(requestedCity[currentRequest] == suggestedCity)
  {
    if(requestedSector[currentRequest] == suggestedSector)
    {
      if(requestedAgeMin[currentRequest] <= suggestedAge && requestedAgeMax[currentRequest] >= suggestedAge)
      {
        returnBool = true;
      }
    }
  }
  
  return returnBool;
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  String clientName;
  String suggestedCode;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }  
      }
      break;
    case 2://New busy work task
      clientName = getClientName();
      requestingClientsName[busyWorkIndex] = clientName;
      cHawkins.Say(String.Format("A certain '%s'", clientName));
      notableSay(cHawkins, String.Format("Req. %s", clientName), requestsHawkinsDescription[busyWorkIndex], 1);
      cHawkins.Say("You got that? You should note that down!");
      break;
    case 3://Find Purfleet property
      busyWorkIndex = 0;
      clientName = "Count Dracula";
      cHawkins.Say(String.Format("A certain '%s'", clientName));
      notableSay(cHawkins, String.Format("Req. %s", clientName), requestsHawkinsDescription[busyWorkIndex], 5);
      cHawkins.Say("You got that? You should note that down!");
      break;
    case 4://Evaluate suggested property code
      suggestedCode = getMemorisedThought();
      cHarker.Say(String.Format("File #%s, sir", suggestedCode));
      if(validateHawkinsCode(suggestedCode))
      {
        cHawkins.Say("Let me consult my ledger, here...");
        clientName = getClientNameFromCode(suggestedCode, false);
        if(clientName == "Null")
        {
          cHawkins.Say(String.Format("I cannot find %s in here", suggestedCode));
        } else {
          clientName = justTheLastName(clientName);
          cHawkins.Say(String.Format("Ah! the %s property!",  clientName));
          debugDisplay(String.Format("SuggCode: %s{busyWI: %d", suggestedCode, busyWorkIndex));
          if(evaluatePropertySuggestion(suggestedCode, busyWorkIndex))
          {
            cHawkins.Say("Good job, Harker");
            
            if (Game.DoOnceOnly(String.Format("BusyWork%d", busyWorkIndex))) {
              GiveScore(pointsToGain);
            }
            pointsToGain = 2;
            if(busyWorkIndex > 0)
            {
              busyWorkIndex--;
              cHawkins.Say("Since you are on a roll...");
              if(isItBeforeThisTime(4, 0, 0, true, 1))
              {
                if(game.score < 10)
                {
                  CallRoomScript(2);
                } else {
                  busyWorkIndex = 0;
                  CallRoomScript(3);
                }
              } else 
              {
                cHawkins.Say("That is all for today, Harker");
                cHawkins.Say("Dismissed");
                dHawkins1.SetOptionState(2,eOptionOff);
                dHawkins1.SetOptionState(3,eOptionOff);
                dHawkins1.SetOptionState(4,eOptionOff);
                dHawkins1.SetOptionState(5,eOptionOff); 
              }
            } else {
              if(game.score < 10)
              {
                cHawkins.Say("That is all for today, Harker");
                cHawkins.Say("Dismissed");
                dHawkins1.SetOptionState(2,eOptionOff);
                dHawkins1.SetOptionState(3,eOptionOff);
                dHawkins1.SetOptionState(4,eOptionOff);
                dHawkins1.SetOptionState(5,eOptionOff);
              } else{
                cHawkins.Say("I like you, Harker");
                cHawkins.Say("So listen to me carefully");
                cHawkins.Say("I am going to trust you with this contract");
                cHawkins.Say("I am sending you to London");
                cHawkins.Say("Visit the site and take pictures");
                cHawkins.Say("You can burrow the office camera");
                cHawkins.Say("If you do well... It will be good for you, here");
                cHawkins.Say("Charge your train to the office");
                cHawkins.Say("Go!");
                if (Game.DoOnceOnly("getAssignmentToCarfax")) {
                  GiveScore(pointsToGain);
                }
                storyBeats++;
              }
            }
          } else {
            clientName = justTheLastName(requestingClientsName[busyWorkIndex]);
            cHawkins.Say(String.Format("That does not fit %s's requirements", clientName));
            cHawkins.Say("Stop wasting time, Harker");
            if(pointsToGain > 0)
            {
              pointsToGain--;
            }
          }
        }
      } else {
        cHawkins.Say("That is not a valid file number");
      }
      break;
    case 5:
      clientName = requestingClientsName[busyWorkIndex];
      cHawkins.Say(String.Format("The client is '%s'", clientName));
      notableSay(cHawkins, String.Format("Req. %s", clientName), requestsHawkinsDescription[busyWorkIndex], 0);
      cHawkins.Say("Note it down this time!");
      break;
    default:
      break;      
  }
}

function assignDrawers()
{
  Set* drawerPossibleNames = Set.Create();
  drawerPossibleNames.Add("Allen");
  drawerPossibleNames.Add("Baker");
  drawerPossibleNames.Add("Bennett");
  drawerPossibleNames.Add("Brown");
  drawerPossibleNames.Add("Carter");
  drawerPossibleNames.Add("Clark");
  drawerPossibleNames.Add("Clarke");
  drawerPossibleNames.Add("Cook");
  drawerPossibleNames.Add("Cooper");
  drawerPossibleNames.Add("Davies");
  drawerPossibleNames.Add("Davis");
  drawerPossibleNames.Add("Edwards");
  drawerPossibleNames.Add("Evans");
  drawerPossibleNames.Add("Green");
  drawerPossibleNames.Add("Griffiths");
  drawerPossibleNames.Add("Hall");
  drawerPossibleNames.Add("Harris");
  drawerPossibleNames.Add("Harrison");
  drawerPossibleNames.Add("Hill");
  drawerPossibleNames.Add("Hughes");
  drawerPossibleNames.Add("Jackson");
  drawerPossibleNames.Add("James");
  drawerPossibleNames.Add("Johnson");
  drawerPossibleNames.Add("Jones");
  drawerPossibleNames.Add("King");
  drawerPossibleNames.Add("Lee");
  drawerPossibleNames.Add("Lewis");
  drawerPossibleNames.Add("Martin");
  drawerPossibleNames.Add("Moore");
  drawerPossibleNames.Add("Morgan");
  drawerPossibleNames.Add("Morris");
  drawerPossibleNames.Add("Parker");
  drawerPossibleNames.Add("Phillips");
  drawerPossibleNames.Add("Price");
  drawerPossibleNames.Add("Roberts");
  drawerPossibleNames.Add("Robinson");
  drawerPossibleNames.Add("Shaw");
  drawerPossibleNames.Add("Smith");
  drawerPossibleNames.Add("Taylor");
  drawerPossibleNames.Add("Thomas");
  drawerPossibleNames.Add("Thompson");
  drawerPossibleNames.Add("Turner");
  drawerPossibleNames.Add("Walker");
  drawerPossibleNames.Add("Ward");
  drawerPossibleNames.Add("Watson");
  drawerPossibleNames.Add("White");
  drawerPossibleNames.Add("Williams");
  drawerPossibleNames.Add("Wilson");
  drawerPossibleNames.Add("Wood");
  drawerPossibleNames.Add("Wright");
  
  int i;
  int y;
  
  Set* drawerFamilyNames = Set.Create(eSorted);
  String drawerNameDrawFrom[];
  String drawnString;
  for(i = 0 ; i < 36 ; i++)
  {
    drawerNameDrawFrom = drawerPossibleNames.GetItemsAsArray();
    y = Random(drawerPossibleNames.ItemCount - 1);
    drawnString = drawerNameDrawFrom[y];
    drawerPossibleNames.Remove(drawnString);
    
    drawnString = addFirstNameInitial(drawnString);
    drawerFamilyNames.Add(drawnString);
  }
  
  familyNamesPerDrawerNb = drawerFamilyNames.GetItemsAsArray();
  String ledgerReadText = "Drawer #   Starts with[";
  int ledgerEntriesPerPage = 10;
  int currentEntry = ledgerEntriesPerPage;
  int page = 1;
  
  object[0].Name = "Files drawer 1";
  object[0].SetTextProperty("TextDescription", "This is a file cabinet for client files");
  object[0].SetTextProperty("alternateNames", "cabinet 1, cabinet #1, drawer 1, files 1, drawer #1, files #1");
  object[0].Visible = false;
  object[0].SetProperty("InteractableWhenInvisible", 1);
  currentEntry--;
  ledgerReadText = ledgerReadText.Append("        1[");
  
  for(i = 1 ; i < 36 ; i++)
  {
    object[i].Name = String.Format("Files drawer %d (starting at %s)", (i+1), familyNamesPerDrawerNb[i]);
    object[i].SetTextProperty("TextDescription", String.Format("This is the file cabinet for client files starting at %s", familyNamesPerDrawerNb[i]));
    object[i].SetTextProperty("alternateNames", String.Format("cabinet %d, cabinet #%d, drawer %d, files %d, drawer #%d, files #%d", (i+1), (i+1), (i+1), (i+1), (i+1), (i+1)));
    object[i].Visible = false;
    object[i].SetProperty("InteractableWhenInvisible", 1);
    if(currentEntry == 1)
    {
      page++;
      ledgerReadText = ledgerReadText.Append(String.Format("¶Drawer #   Starts with["));
      currentEntry = ledgerEntriesPerPage;
    } else {
      currentEntry--;
    }
    ledgerReadText = ledgerReadText.Append(String.Format("        %d               %s[", (i+1), familyNamesPerDrawerNb[i]));
  }
  //debugDisplay(ledgerReadText);
  iLedger.SetTextProperty("ReadDisplay", ledgerReadText);
}

function fillRequestLog(int index, String city,  String sector, int ageMin,  int ageMax, String code, String name, String hawkinsDescription)
{
  requestsHawkinsDescription[index] = hawkinsDescription;
  requestedCity[index] = city;
  requestedSector[index] = sector;
  requestedAgeMin[index] = ageMin;
  requestedAgeMax[index] = ageMax;
  generateHawkinsFile(city, sector, ageMin, ageMax, code, name);
}

function buildAvailableProperties() // The first ten files [fileXXXX[0] to fileXXXX[9] are the requests, index 0 being Dracula
{
  int i;
  
  fillRequestLog(0, "London", "East end", 500, 600, "Null", "Null", "On London's East end. Very old, aim at more than 500 years");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("London", "East end", 0, 499, "Null", "Null");
  }
  
  fillRequestLog(1, "Exeter", "North end", 0, 50, "Null", "Null", "In town, to the North, less than half a century");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("Exeter", "North end", 51, 1000, "Null", "Null");
  }
  
  fillRequestLog(2, "London", "South end", 100, 250, "Null", "Null", "Southern London, 'with character'. So over 100 years old");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("London", "South end", 0, 99, "Null", "Null");
  }
  
  fillRequestLog(3, "Exeter", "West end", 0, 250, "Null", "Null", "Western Exeter. No too expensive, so less than 250 years old");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("Exeter", "West end", 251, 1000, "Null", "Null");
  }
  
  fillRequestLog(4, "London", "City center", 200, 350, "Null", "Null", "Central London, 'heritage', so over 200 years old");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("London", "City center", 0, 199, "Null", "Null");
  }
  
  fillRequestLog(5, "Exeter", "East end", 0, 10, "Null", "Null", "East Exeter, 'newly contructed', let's say within 10 years");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("Exeter", "East end", 11, 1000, "Null", "Null");
  }
  
  fillRequestLog(6, "London", "North end", 0, 100, "Null", "Null", "North London, 'built this century', meaning less than 100 years old");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("London", "North end", 101, 1000, "Null", "Null");
  }
  
  fillRequestLog(7, "Exeter", "South end", 301, 550, "Null", "Null", "'Old Exeter', so above 300 years old place in the South of the city");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("Exeter", "South end", 1, 299, "Null", "Null");
  }
  
  fillRequestLog(8, "London", "West end", 0, 50, "Null", "Null", "'New West-end London', let's say less than 50 years old");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("London", "West end", 51, 1000, "Null", "Null");
  }
  
  fillRequestLog(9, "Exeter", "City center", 25, 75, "Null", "Null", "Central Exeter, specifically between 25 and 75 years old");
  for(i = 0 ; i < nbRedHerrings ; i++)
  {
    generateHawkinsFile("Exeter", "City center", 76, 1000, "Null", "Null");
  }
}

function room_FirstLoad()
{
  int i;
  
  assignDrawers();
  requestingClientsName = new String[10];
  requestedCity = new String[10];
  requestedSector = new String[10];
  requestedAgeMin = new int[10];
  requestedAgeMax = new int[10];
  requestsHawkinsDescription = new String[10];
  buildAvailableProperties();
    
  triggerCutscene(getToWork);
  
}

function region1_WalksOnto()
{
  
  player.ChangeRoom(4, 139, 139, eDirectionRight);
  player.PlaceOnWalkableArea();
}
