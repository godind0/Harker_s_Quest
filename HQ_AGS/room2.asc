// room script file
bool cameInOnceBefore = false;

function manageEntrance()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  if(state != "opened" && cameInOnceBefore)
  {
    cHawkins.Say(String.Format("What a time to come in to work, we close in %s minutes", state));
  } else if(getQuestLineVariant(2, 1) == 1 && cRandomMan1.Room != 2)//first client ongoing)
  {
    cRandomMan1.makeSecCharAppearance(2, -1, eDirectionRight, true);
    modifyQuestNoteLineVariant(2, 2, 1);
    cRandomMan1.sit(oCouchLeft);
  }
}

function room_AfterFadeIn()
{
  manageEntrance();
}

function room_FirstLoad()
{
  cHawkins.Walk(234, 146, eBlock, eWalkableAreas);
  cameInOnceBefore = true;
  cHawkins.FaceDirection(eDirectionDown);
  triggerCutscene(getToWork);
}

function room_Load()
{
  if(cHawkins.Room == 2)
  {
    cHawkins.setColors();
    cHawkins.FaceDirection(eDirectionLeft);
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;  
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == allCharacters && index == 7 && verb == "talk")
  {
    player.gotoCharacter(cRandomMan1);
    sendBackToNormalParsing = false;
    if(!cRandomMan1.getPreviouslyTalkedTo())
    {
      player.Say("Good day, sir");
      cRandomMan1.standUp();
      cRandomMan1.FaceCharacter(player);
      player.Say("Can I help you?");
      String hisName = getPropertyRequesterName(1);
      cRandomMan1.Name = hisName;
      cRandomMan1.Say("G'day");
      cRandomMan1.Say("Maybe you can");
      cRandomMan1.Say(String.Format("My name is Louis %s", hisName));
      cRandomMan1.Say("I have an appointment with Peter Hawkins about a property purchase");
      player.Say("Of course. You can sit here while Mr. Hawkins is finishing up with another client's file");
      player.Say("We will be with you shortly");
      cRandomMan1.Say("All good");
      cRandomMan1.sit(oCouchLeft);
      cRandomMan1.setPreviouslyTalkedTo(true);
    } else
    {
      player.Say("We will be with you shortly");
      cRandomMan1.Say("All good");
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  
}

function on_call(int indexOC)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(indexOC)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();  
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];             
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }  
      }
      break;
    default:
      break;      
  }
}


function region1_WalksOnto()
{
  dTravel.Start();
}

function region2_WalksOnto()
{
  player.ChangeRoom(23, 60, 154, eDirectionUp);
}

function region3_WalksOnto()
{
  player.ChangeRoom(24, 86, 145, eDirectionRight);
}


