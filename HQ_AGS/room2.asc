// room script file
Dictionary* clientFileDrawer;
int nbOfPropertiesBeforeDracula = 2;
String currentRequester;
bool cameInOnceBefore = false;
int openDrawer;

int inWhichDrawerIsThisClient(String clientName)
{
  String properDrawer = clientFileDrawer.Get(clientName);
  return properDrawer.AsInt;
}

String findSellerNameInCMD(Set* sellerList,  String cmd)
{
  String sellerName = "Null";
  String sellerListString[];
  sellerListString = sellerList.GetItemsAsArray();
  int i = 0;
  
  while(i < sellerList.ItemCount && sellerName == "Null")
  {
    if(cmd.IndexOf(sellerListString[i]) != -1)
    {
      sellerName = sellerListString[i];
    }
    i++;
  }
  
  return sellerName;  
}

int findLongestNumberInString(String thatString)
{
  String foundNumber = "-1";
  int i = 0;
  
  while(i < thatString.Length)
  {    
    if(thatString.Chars[i] >= '0' && thatString.Chars[i] <= '9')
    {
      if(foundNumber == "-1")
      {
        foundNumber = String.Format("%c", thatString.Chars[i]);
      } else
      {
        foundNumber = String.Format("%s%c", foundNumber, thatString.Chars[i]);
      }      
      i++;
    } else
    {
      if(foundNumber == "-1")
      {
        i++;
      } else
      {
        i = thatString.Length;
      }
    }
  }
  
  return foundNumber.AsInt;
}

bool openADrawer(String cmd)
{  
  bool returnBool = false;
  int thisDrawer = -1;
  String testString = "";
  String foundSynonym = "";
  
  if(cmd.IndexOf("cabinet") != -1)
  {
    foundSynonym = "cabinet";
  } else if (cmd.IndexOf("drawer") != -1)
  {
    foundSynonym = "drawer";
  } else if (cmd.IndexOf("files") != -1)
  {
    foundSynonym = "files";
  }
  
  testString = cmd.Substring(cmd.IndexOf(foundSynonym) + foundSynonym.Length, cmd.Length - (cmd.IndexOf(foundSynonym) + foundSynonym.Length)); // the substring after the synonym;
  thisDrawer = findLongestNumberInString(testString);
  
  if(thisDrawer > 0 && thisDrawer < 36)
  {
    returnBool = true;
    if(isCharacterNearObject(object[thisDrawer - 1], 40.0, player))
    {
      player.Walk(object[thisDrawer - 1].X + 10, object[thisDrawer - 1].Y - 10, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft);
      object[thisDrawer - 1].Visible = true;
      playSelect();
      if(openDrawer != -1)
      {
        object[openDrawer - 1].Visible = false;
        playCancel();
      }
      openDrawer = thisDrawer;
    } else
    {
      player.Say("I am too far away from the drawer");
    }
  }
  
  return returnBool;
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  Set* sellerList;
  int nbNegatives = getNbNegative();
  String nbNegativesMsg = "I have ### negative@ left";
  sellerList = getHawkinsSellerList();
  String sellerName;
  Object* properDrawer;
    
  if(findVerbInDictionary(cmd) == "take" || findVerbInDictionary(cmd) == "look") // player trying to get a file
  {
    sellerName = findSellerNameInCMD(sellerList, cmd);
    if(sellerName != "Null")
    {
      sendBackToNormalParsing = false;
      properDrawer = object[inWhichDrawerIsThisClient(sellerName)];
      if(isCharacterNearObject(properDrawer, 40.0, player))
      {
        if(isThisOpened(properDrawer)) 
        {
          player.Say(String.Format("Here is %s's file",  sellerName));
          player.Say("Let's see the details");
          notableRead(String.Format("[S] %s", sellerName), generateReadHawkinsFileString(sellerName), 0);
        } else
        {
          player.Think(String.Format("I do not see %s's file in the opened drawers", sellerName));
        }
      } else
      {
        player.Think(String.Format("I do not see %s's file in the nearby drawers", sellerName));
      }
    }
  }
  if((cmd.IndexOf("look ") != -1) && cmd.IndexOf("shelf") != -1) // look bookshelf
  {
    player.FaceDirection(eDirectionRight);
    player.Think("Mr. Hawkins' beautiful sculpted bookshelf");
    player.Think("Those are all law books");
    if(!player.HasInventory(iCamera))
    {
      player.Think("And his precious photo camera");
      player.Think("Sitting on the lower ledge, as if left there");
      player.Think("He thinks it impresses clients");
    }
  } else if(findVerbInDictionary(cmd) == "take" && cmd.IndexOf("camera") != -1 && !player.HasInventory(iCamera)) // take camera
  {
    if(getStoryBeat() < packYourThings) {
      cHawkins.Say("Don't touch the camera, it is for office use only");
      cHawkins.Say("Get back to work");      
    } else
    {
      player.Think("This will be useful");
      player.AddInventory(iCamera);
      oCamera.Visible = false;
      switch(nbNegatives)
      {
        case 0:
          nbNegativesMsg = nbNegativesMsg.Replace("###", "no", eCaseInsensitive);
          nbNegativesMsg = nbNegativesMsg.Replace("@", "s", eCaseInsensitive);
          break;
        case 1:
          nbNegativesMsg = nbNegativesMsg.Replace("###", "1", eCaseInsensitive);
          nbNegativesMsg = nbNegativesMsg.Replace("@", "", eCaseInsensitive);
          break;
        default:
          nbNegativesMsg = nbNegativesMsg.Replace("###", String.Format("%d", nbNegatives), eCaseInsensitive);
          nbNegativesMsg = nbNegativesMsg.Replace("@", "s", eCaseInsensitive);
          break;
      }
      iCamera.SetTextProperty("TextDescription", String.Format("This is the office's photo camera. State of the art technology![%s", nbNegativesMsg));
      giveScoreOnce("GetCamera", 1);
      Display("You can now take pictures of anything in your surroundings by writing the verb 'Photograph' followed by the name of your subject");
      Display("Careful to not spend all your negatives!");
    }
    sendBackToNormalParsing = false;
  } else if(findVerbInDictionary(cmd) == "open") //
  {
    sendBackToNormalParsing = !openADrawer(cmd);
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 49 && (verb == "look" || verb == "read"))//look at the Ledger
  {
    show_book_gui("Hawkins Ledger");
    sendBackToNormalParsing = false;
  } else if(eT == roomObjects && index == 42 && verb == "look")//look at the London map
  {
    dLondonMap.Start();    
  } else if(eT == roomObjects && index == 47 && verb == "look")//look at the Exeter map
  {
    dExeterMap.Start();    
  } else if(eT == roomObjects && index == 50 && verb == "take")//take camera
  {
    if(getStoryBeat() < packYourThings) {
      cHawkins.Say("Don't touch the camera, it is for office use only");
      cHawkins.Say("Get back to work");      
    } else
    {
      player.Think("This will be useful");
      object[51].Visible = false;
      player.AddInventory(iCamera);
      giveScoreOnce("GetCamera", 1);
    }
    sendBackToNormalParsing = false;
  } else if(eT == roomObjects && index == 52 && verb == "take")//take ink and pen
  {
    if(player.HasInventory(iPenInk))
    {
      player.Say("I already have a pen and ink");
    } else
    {
      player.Say("This can be useful");
      oInkandpen_Hawkins.Visible = false;
      player.AddInventory(iPenInk);
      giveScoreOnce(iPenInk.Name, 1);
      sendBackToNormalParsing = false;
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("look") > -1 && (cmd.IndexOf("drawer") > -1 || cmd.IndexOf("file") > -1))
  {
    player.Think("The file cabinets are numbered, I need to specify which drawer number I want to interact with");
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 39 && verb == "look")//look at the clerk table
  {
    if(!player.HasInventory(iNotebook)){
      player.Say("Oh, there is my notebook!");
      player.Say("I was looking for it all last night");
    }
  } else if(eT == roomObjects && index < 36 && verb == "look")//look at any drawer
  {
    if(!player.HasInventory(iLedger))
    {
      player.Think("Finding files is tricky");
      player.Think("I need the ledger to do it");
      player.Think("It is sitting on top of the file cabinet, near the back wall");
    }
  } else if (eT == roomObjects && index == 48 && verb == "take")//take notebook
  {
    if(player.HasInventory(iNotebook))
    {
      Display(getNoteDescription("How to use"));
      btnNoteBook.Visible = true;
    }
  } 
}

function giveAssignment(String clientName)
{
  if(clientName == "Random")
  {
    clientName = getPropertyRequesterName();    
  }  
  String requestMessage = getPropertyRequestMessage(clientName);
  cHawkins.Say("I have a new assignment for you");
  cHawkins.Say("We have another client interested in a new property");
  cHawkins.Say(String.Format("A certain %s", clientName));
  notableSay(cHawkins, String.Format("[B] %s", clientName),  requestMessage, 1);
  if(clientName != "Dracula")
  {
    cHawkins.Say("Did you get that? You should note that!");
  }
  currentRequester = clientName; 
}

function aboutThatRequest()
{
  if(isItBeforeThisTime(4,0,0,true,1))//Before 4PM
  {
    if(nbOfPropertiesBeforeDracula > 0)
    {
      giveAssignment("Random");
    } else
    {
      giveAssignment("Dracula");
      oWindow.Visible = true;
      //gDark.Transparency = gDark.Transparency - 10;
      modifyCloudiness(30);
      Wait(10);
      oWindow.Visible = false;
      cHawkins.Say("The weather just took a turn it seems. . .");
      cHawkins.Say("No matter. . .");
    }
  } else {
    cHawkins.Say("That is all for today, Harker");
    cHawkins.Say("Dismissed");
    gameIsOver("Jonathan took too long to do his job and missed his date with destiny!");
  }
}

int minutesLeftForPhotos(String targetTime, int additionalDays)
{
  int nowInMinutes = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
  int targetTimeInMinutes = translateTimeToMinutes(targetTime);
  targetTimeInMinutes = targetTimeInMinutes + (additionalDays * 24 * 60);
  
  return targetTimeInMinutes - nowInMinutes;
}

function on_call(int indexOC)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  String clientName;
  String suggestedCode;
  String requestMessage;
  
  switch(indexOC)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);  
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];             
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }  
      }
      break;
    case 2://New assignment
      cHawkins.Say(String.Format("On today's agenda, we have to match %d potential buyers with our sellers", nbOfPropertiesBeforeDracula + 1));
      aboutThatRequest();
      break;
    case 3://validate
      clientName = getProposedSeller();
      if(validatePropertyProposition(currentRequester,  clientName))
      {
        cHawkins.Say("Great suggestion!");
        giveScoreOnce(clientName, 2);
        if(currentRequester == "Dracula")
        {
          cHawkins.Say("Purfleet is not proper London, but close enough");
          cHawkins.Say("This is remarkable work!");
          cHawkins.Say("I'll tell you what: How about you finish this file");
          cHawkins.Say("This client is an important referral from London");
          cHawkins.Say("He wants pictures of the property and a personnal visit to his estate in Transylvania");
          cHawkins.Say("My joints are killing me, so I should not travel too much");
          cHawkins.Say(String.Format("You go to London, well Purfleet, to that %s property",  clientName));
          cHawkins.Say("Take the pictures!");
          notableSay(cHawkins, "Required pictures", "We need photos of the living room, the kitchen, the dining room and the bedroom, by 4PM tomorrow", 1);
          cHawkins.Say("Bring the photo camera, it is on the table, near the ladder.");
          cHawkins.Say("Hopefully, I will be better tomorrow and can pick them up on my way to the mainland");
          cHawkins.Say("I had a reservation for tonight at the Hummums, in Covent-garden. Use it");
          cHawkins.Say("Remember: You need to be done with all of this tomorrow at 4:00PM");
          cHawkins.Say("And I want a telegram before I take the 4:15PM train");
          addTimedEventInXMinutes(minutesLeftForPhotos(translateTimeToHHMMAM(4, 15, "PM"), 1), "Max time for photos & telegram");
          dTrainTicketClerk.SetOptionState(1, eOptionOn);
          addTravelDestination(ExeterTrainStation);
          setStoryBeat(packYourThings);
          cHawkins.Say("Go pack your trunk, Harker, you're headed to London tonight!");
        } else
        {
          cHawkins.Say("I'll send them the details!");
          nbOfPropertiesBeforeDracula--;
          aboutThatRequest();
        }
      } else
      {
        cHawkins.Say("Wait, that does not work at all!");
        cHawkins.Say("Stop wasting time, Harker!");
        GiveScore(-1);
      }
      break;
    case 4://repeat
      requestMessage = getPropertyRequestMessage(currentRequester);
      cHawkins.Say(String.Format("The client's name is %s", currentRequester));
      notableSay(cHawkins, String.Format("[B] %s", currentRequester),  requestMessage, 1);
      cHawkins.Say("Note it down!");
      GiveScore(-1);
      break;
    case 5://skip trial research
      nbOfPropertiesBeforeDracula = 0;
      break;
    default:
      break;      
  }
}

function assignDrawers()
{
  clientFileDrawer = Dictionary.Create(eSorted);
  String drawerNames[] = new String[36];
  
  drawerNames[0] = "Abraham";
  drawerNames[1] = "Bennett"; //Bernal //Brookes
    clientFileDrawer.Set("Bernal", "1");
    clientFileDrawer.Set("Brookes", "1");
  drawerNames[2] = "Clark";//Clifton
    clientFileDrawer.Set("Clifton", "2");
  drawerNames[3] = "Cooper";//Cryer
    clientFileDrawer.Set("Cryer", "3");
  drawerNames[4] = "Davis";//Drake//Dunwoody
    clientFileDrawer.Set("Drake", "4");   
    clientFileDrawer.Set("Dunwoody", "4");
  drawerNames[5] = "Egerton";//Ewing
    clientFileDrawer.Set("Ewing", "5");
  drawerNames[6] = "Finnie";//Gladstone //Foster
    clientFileDrawer.Set("Foster", "6");
    clientFileDrawer.Set("Gladstone", "6");
  drawerNames[7] = "Green";//Guest // Greenwood
    clientFileDrawer.Set("Guest", "7");
    clientFileDrawer.Set("Greenwood", "7");
  drawerNames[8] = "Hall";//Heathcote
    clientFileDrawer.Set("Heathcote", "8");
  drawerNames[9] = "Hill";//Howarth
    clientFileDrawer.Set("Howarth", "9");
  drawerNames[10] = "Jackson";//Jenkins
    clientFileDrawer.Set("Jenkins", "10");
  drawerNames[11] = "Johnson";//Keen
    clientFileDrawer.Set("Keen", "11");
  drawerNames[12] = "King";
  drawerNames[13] = "Lancaster";
  drawerNames[14] = "Lewis";
  drawerNames[15] = "Lowther";//Lyon // MacKay
    clientFileDrawer.Set("Lyon", "15");
    clientFileDrawer.Set("MacKay", "15");
  drawerNames[16] = "Mahon"; //Maxton // Montague
    clientFileDrawer.Set("Maxton", "16");
    clientFileDrawer.Set("Montague", "16");
  drawerNames[17] = "Moore";
  drawerNames[18] = "Morgan";//Norman
    clientFileDrawer.Set("Norman", "18");
  drawerNames[19] = "Nott";
  drawerNames[20] = "O'Connell"; //Paisley
    clientFileDrawer.Set("Paisley", "20");
  drawerNames[21] = "Parker"; //Perry
    clientFileDrawer.Set("Perry", "21");
  drawerNames[22] = "Phillips";//Ridley
    clientFileDrawer.Set("Ridley", "22");
  drawerNames[23] = "Roberts"; // Robinson
    clientFileDrawer.Set("Robinson", "23");
  drawerNames[24] = "Shaw";//Sinclair // Silkin
    clientFileDrawer.Set("Sinclair", "24");
    clientFileDrawer.Set("Silkin", "24");
  drawerNames[25] = "Smith";//Smith //Sturgeon
    clientFileDrawer.Set("Smith", "25");
    clientFileDrawer.Set("Sturgeon", "25");
  drawerNames[26] = "Taylor";
  drawerNames[27] = "Thomas";
  drawerNames[28] = "Thompson";
  drawerNames[29] = "Turner";//Wakefield // Vivian
    clientFileDrawer.Set("Wakefield", "29");
    clientFileDrawer.Set("Vivian", "29");
  drawerNames[30] = "Walker";
  drawerNames[31] = "Ward";
  drawerNames[32] = "Watson";
  drawerNames[33] = "White";
  drawerNames[34] = "Williams";
  drawerNames[35] = "Wilson";//Wintringham
    clientFileDrawer.Set("Wintringham", "35");
  
  String ledgerReadText = "DRAWER: NAME[";
  int i;
  
  for(i = 0 ; i < 36 ; i++)
  {
    object[i].Name = String.Format("Files drawer %d (starting at %s)", (i+1), drawerNames[i]);
    object[i].SetTextProperty("TextDescription", String.Format("This is the file cabinet for client files starting at %s", drawerNames[i]));
    object[i].SetTextProperty("alternateNames", String.Format("cabinet %d, cabinet #%d, drawer %d, files %d, drawer #%d, files #%d", (i+1), (i+1), (i+1), (i+1), (i+1), (i+1)));
    object[i].Visible = false;
    object[i].SetProperty("InteractableWhenInvisible", 1);
    ledgerReadText = ledgerReadText.Append(String.Format("%d: %s¶", (i+1), drawerNames[i]));
  }
  
  createBook("Hawkins Ledger", ledgerReadText, "¶", "[");
}

function room_FirstLoad()
{
  if(getSkipCutscene())
  {
    nbOfPropertiesBeforeDracula = 0;
  }
  
  createAllHawkinsFiles ();
  assignDrawers();
  openDrawer = -1;
  cHawkins.FaceDirection(eDirectionLeft);  
  triggerCutscene(getToWork);
  cameInOnceBefore = true;
}

function region1_WalksOnto()
{
  dTravel.Start();
}

function manageEntrance()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  if(state != "opened" && cameInOnceBefore)
  {
    cHawkins.Say(String.Format("What a time to come in to work, we close in %s minutes", state));
  }
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  if(state.StartsWith("Close"))
  {
    cHawkins.Say("Alright Harker");
    player.FaceCharacter(cHawkins, eNoBlock);
    cHawkins.Say("That's enough for today");
    
    player.Say(String.Format("Oh it's %s! Time flew by!", whatTimeIsIt(true)));
    player.Say("Good evening sir!");
    cHawkins.SayBackground("Good evening, Harker");
    player.Walk(153, 199, eBlock, eWalkableAreas);
    dTravel.Start();
  }
}

function manageDrawers()
{
  if(openDrawer != -1)
  {
    if(player.Moving)
    {
      object[openDrawer - 1].Visible = false;
      openDrawer = -1;
      playCancel();
    }
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
  manageEntrance();
}

function room_RepExec()
{
  manageClosingTime();
  manageDrawers();
}
