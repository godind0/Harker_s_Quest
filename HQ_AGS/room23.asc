// room script file
Dictionary* clientFileDrawer;
int openDrawer;

int inWhichDrawerIsThisClient(String clientName)
{
  String properDrawer = clientFileDrawer.Get(clientName);
  return properDrawer.AsInt;
}

String findSellerNameInCMD(Set* sellerList,  String cmd)
{
  String sellerName = "Null";
  String sellerListString[];
  sellerListString = sellerList.GetItemsAsArray();
  int i = 0;
  
  while(i < sellerList.ItemCount && sellerName == "Null")
  {
    if(cmd.IndexOf(sellerListString[i]) != -1)
    {
      sellerName = sellerListString[i];
    }
    i++;
  }
  
  return sellerName;  
}

int findLongestNumberInString(String thatString)
{
  String foundNumber = "-1";
  int i = 0;
  
  while(i < thatString.Length)
  {    
    if(thatString.Chars[i] >= '0' && thatString.Chars[i] <= '9')
    {
      if(foundNumber == "-1")
      {
        foundNumber = String.Format("%c", thatString.Chars[i]);
      } else
      {
        foundNumber = String.Format("%s%c", foundNumber, thatString.Chars[i]);
      }      
      i++;
    } else
    {
      if(foundNumber == "-1")
      {
        i++;
      } else
      {
        i = thatString.Length;
      }
    }
  }
  
  return foundNumber.AsInt;
}

bool openADrawer(String cmd)
{  
  bool returnBool = false;
  int thisDrawer = -1;
  String testString = "";
  String foundSynonym = "";
  
  if(cmd.IndexOf("cabinet") != -1)
  {
    foundSynonym = "cabinet";
  } else if (cmd.IndexOf("drawer") != -1)
  {
    foundSynonym = "drawer";
  } else if (cmd.IndexOf("files") != -1)
  {
    foundSynonym = "files";
  }
  
  testString = cmd.Substring(cmd.IndexOf(foundSynonym) + foundSynonym.Length, cmd.Length - (cmd.IndexOf(foundSynonym) + foundSynonym.Length)); // the substring after the synonym;
  thisDrawer = findLongestNumberInString(testString);
  
  if(thisDrawer > 0 && thisDrawer < 36)
  {
    returnBool = true;
    if(isCharacterNearObject(object[thisDrawer - 1], 40.0, player))
    {
      player.Walk(object[thisDrawer - 1].X + 5, 142, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp);
      if(openDrawer != -1)
      {
        object[openDrawer - 1].openObject();//Visible = false;
        playCancel();
        Wait(5);
      }
      object[thisDrawer - 1].openObject();//Visible = true;
      playSelect();
      openDrawer = thisDrawer;
    } else
    {
      player.Say("I am too far away from the drawer");
    }
  }
  
  return returnBool;
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  int nbNegatives = getNbNegative();
  String nbNegativesMsg = "I have ### negative@ left";
  
  Set* sellerList;
  sellerList = getHawkinsSellerList();
  
  String sellerName;
  Object* properDrawer;
    
  if(findVerbInDictionary(cmd) == "take" || findVerbInDictionary(cmd) == "look") // player trying to get a file
  {
    sellerName = findSellerNameInCMD(sellerList, cmd);
    if(sellerName != "Null")
    {
      sendBackToNormalParsing = false;
      properDrawer = object[inWhichDrawerIsThisClient(sellerName)];
      if(isCharacterNearObject(properDrawer, 40.0, player))
      {
        if(properDrawer.isThisOpened()) 
        {
          player.Say(String.Format("Here is %s's file",  sellerName));
          player.Say("Let's see the details");
          notableRead(String.Format("(S) %s", sellerName), generateReadHawkinsFileString(sellerName), 0);
        } else
        {
          player.Think(String.Format("I do not see %s's file in the opened drawers", sellerName));
        }
      } else
      {
        player.Think(String.Format("I do not see %s's file in the nearby drawers", sellerName));
      }
    }
  } else if(findVerbInDictionary(cmd) == "open") //
  {
    sendBackToNormalParsing = !openADrawer(cmd);
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 44 && (verb == "look" || verb == "read"))//look at the Ledger
  {
    player.gotoObject(object[index]);
    show_book_gui("Hawkins Ledger");
    sendBackToNormalParsing = false;
  } else if(eT == roomObjects && index == 42 && verb == "look")//look at the London map
  {
    player.gotoObject(object[index]);
    dLondonMap.Start();
    sendBackToNormalParsing = false;
  } else if(eT == roomObjects && index == 43 && verb == "look")//look at the Exeter map
  {
    player.gotoObject(object[index]);
    dExeterMap.Start();
    sendBackToNormalParsing = false;
  } else if(eT == roomObjects && index == 45 && verb == "take")//take ink and pen
  {
    if(player.HasInventory(iPenInk))
    {
      player.Say("I already have a pen and ink");
    } else
    {
      player.Say("This can be useful");
      oInkandpen_Hawkins.Visible = false;
      player.AddInventory(iPenInk);
      giveScoreOnce(iPenInk.Name, 1);
      sendBackToNormalParsing = false;
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("look") > -1 && (cmd.IndexOf("drawer") > -1 || cmd.IndexOf("file") > -1))
  {
    player.Think("The file cabinets are numbered, I need to specify which drawer number I want to interact with");
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index < 36 && verb == "look")//look at any drawer
  {
    if(!player.HasInventory(iLedger))
    {
      player.Think("Finding files is tricky");
      player.Think("I need the ledger to do it");
      player.Think("It is sitting on the table there");
    }
  }
}

function on_call(int indexOC)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(indexOC)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();  
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];             
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }  
      }
      break;
    default:
      break;      
  }
}

function assignDrawers()
{
  clientFileDrawer = Dictionary.Create(eSorted);
  String drawerNames[] = new String[36];
  
  drawerNames[0] = "Abraham";
  drawerNames[1] = "Bennett"; //Bernal //Brookes
    clientFileDrawer.Set("Bernal", "1");
    clientFileDrawer.Set("Brookes", "1");
  drawerNames[2] = "Clark";//Clifton
    clientFileDrawer.Set("Clifton", "2");
  drawerNames[3] = "Cooper";//Cryer
    clientFileDrawer.Set("Cryer", "3");
  drawerNames[4] = "Davis";//Drake//Dunwoody
    clientFileDrawer.Set("Drake", "4");   
    clientFileDrawer.Set("Dunwoody", "4");
  drawerNames[5] = "Egerton";//Ewing
    clientFileDrawer.Set("Ewing", "5");
  drawerNames[6] = "Finnie";//Gladstone //Foster
    clientFileDrawer.Set("Foster", "6");
    clientFileDrawer.Set("Gladstone", "6");
  drawerNames[7] = "Green";//Guest // Greenwood
    clientFileDrawer.Set("Guest", "7");
    clientFileDrawer.Set("Greenwood", "7");
  drawerNames[8] = "Hall";//Heathcote
    clientFileDrawer.Set("Heathcote", "8");
  drawerNames[9] = "Hill";//Howarth
    clientFileDrawer.Set("Howarth", "9");
  drawerNames[10] = "Jackson";//Jenkins
    clientFileDrawer.Set("Jenkins", "10");
  drawerNames[11] = "Johnson";//Keen
    clientFileDrawer.Set("Keen", "11");
  drawerNames[12] = "King";
  drawerNames[13] = "Lancaster";
  drawerNames[14] = "Lewis";
  drawerNames[15] = "Lowther";//Lyon // MacKay
    clientFileDrawer.Set("Lyon", "15");
    clientFileDrawer.Set("MacKay", "15");
  drawerNames[16] = "Mahon"; //Maxton // Montague
    clientFileDrawer.Set("Maxton", "16");
    clientFileDrawer.Set("Montague", "16");
  drawerNames[17] = "Moore";
  drawerNames[18] = "Morgan";//Norman
    clientFileDrawer.Set("Norman", "18");
  drawerNames[19] = "Nott";
  drawerNames[20] = "O'Connell"; //Paisley
    clientFileDrawer.Set("Paisley", "20");
  drawerNames[21] = "Parker"; //Perry
    clientFileDrawer.Set("Perry", "21");
  drawerNames[22] = "Phillips";//Ridley
    clientFileDrawer.Set("Ridley", "22");
  drawerNames[23] = "Roberts"; // Robinson
    clientFileDrawer.Set("Robinson", "23");
  drawerNames[24] = "Shaw";//Sinclair // Silkin
    clientFileDrawer.Set("Sinclair", "24");
    clientFileDrawer.Set("Silkin", "24");
  drawerNames[25] = "Smith";//Smith //Sturgeon
    clientFileDrawer.Set("Smith", "25");
    clientFileDrawer.Set("Sturgeon", "25");
  drawerNames[26] = "Taylor";
  drawerNames[27] = "Thomas";
  drawerNames[28] = "Thompson";
  drawerNames[29] = "Turner";//Wakefield // Vivian
    clientFileDrawer.Set("Wakefield", "29");
    clientFileDrawer.Set("Vivian", "29");
  drawerNames[30] = "Walker";
  drawerNames[31] = "Ward";
  drawerNames[32] = "Watson";
  drawerNames[33] = "White";
  drawerNames[34] = "Williams";
  drawerNames[35] = "Wilson";//Wintringham
    clientFileDrawer.Set("Wintringham", "35");
  
  String ledgerReadText = "DRAWER: NAME[";
  int i;
  
  for(i = 0 ; i < 36 ; i++)
  {
    object[i].Name = String.Format("Files drawer %d (starting at %s)", (i+1), drawerNames[i]);
    object[i].SetTextProperty("TextDescription", String.Format("This is the file cabinet for client files starting at %s", drawerNames[i]));
    object[i].SetTextProperty("alternateNames", String.Format("cabinet %d, cabinet #%d, drawer %d, files %d, drawer #%d, files #%d", (i+1), (i+1), (i+1), (i+1), (i+1), (i+1)));
    object[i].Visible = false;
    object[i].SetProperty("InteractableWhenInvisible", 1);
    ledgerReadText = ledgerReadText.Append(String.Format("%d: %s¶", (i+1), drawerNames[i]));
    object[i].SetProperty("Open_SpriteNumber", 648);
    object[i].SetProperty("Close_SpriteNumber", -2);
    object[i].Baseline = oCabinet.Baseline + 1;
  }
  
  createBook("Hawkins Ledger", ledgerReadText, "¶", "[");
}

function room_FirstLoad()
{
  assignDrawers();
  openDrawer = -1;
}

function region1_WalksOnto()
{
  player.ChangeRoom(2, 162, 137, eDirectionDown);
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  if(state.StartsWith("Close"))
  {
    cHawkins.ChangeRoom(23, 265, 156, eDirectionUp);
    cHawkins.FaceCharacter(player, eBlock);
    cHawkins.Say("Alright Harker");
    player.FaceCharacter(cHawkins, eNoBlock);
    cHawkins.Say("That's enough for today");
    
    player.Say(String.Format("Oh it's %s! Time flew by!", whatTimeIsIt(true)));
    player.Say("Good evening sir!");
    cHawkins.SayBackground("Good evening, Harker");
    dTravel.Start();
  }
}

function manageDrawers()
{
  if(openDrawer != -1)
  {
    if(player.Moving)
    {
      object[openDrawer - 1].Visible = false;
      openDrawer = -1;
      playCancel();
    }
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
}

function room_RepExec()
{
  manageClosingTime();
  manageDrawers();  
}

function region2_WalksOnto()
{
  player.ChangeRoom(24, 155, 142, eDirectionDown);
}
