// room script file
int inspectTimeInLoops;
int inspectTimeLeft;
int currentHotspot;
bool busyLibrarian;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here (and set the bool to false)
  if(eT == roomHotspots && index <= 6 && verb == "look") // give a point per exhibit item
  {
    giveScoreOnce(hotspot[index].Name, 1);
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
  }
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(BritishMuseum));
  
  if(state != "opened")
  {
    if(state.StartsWith("Close"))
    {
      if(cLibrarian.Room != 9)
      {
        cLibrarian.ChangeRoom(9, 200, 119, eDirectionDown);
      }
      cLibrarian.Say("*whispering*[Good evening, sir.");
      player.FaceCharacter(cLibrarian);
      player.Say("*whispering*['Evening");
      cLibrarian.Say("*whispering*[The Museum will be closing now");
      player.Say("Oh, I'm sorry, of course");
      cLibrarian.Say("*whispering*[Low voices in the Museum, please");
      player.Say("*whispering*[Sorry, sorry");
      player.SayBackground("*whispering*[Good evening!");
      cLibrarian.ChangeRoom(17, 85, 167, eDirectionDown);
      player.Walk(player.x, 173, eBlock, eWalkableAreas);
      dTravel.Start();
    }
  }
}

function resetInspectTime()
{
  inspectTimeLeft = inspectTimeInLoops;
}

function nextHotspot()
{
  if (!cLibrarian.Moving && !busyLibrarian)
  {
    if(inspectTimeLeft > 0)
    {
      cLibrarian.FaceDirection(eDirectionUp);
      inspectTimeLeft--;
    } else
    {
      currentHotspot++;
      cLibrarian.Walk(hotspot[currentHotspot].WalkToX, hotspot[currentHotspot].WalkToY + 5, eNoBlock, eWalkableAreas);
      resetInspectTime();
    }
  } else if(busyLibrarian && !cLibrarian.Moving)
  {
    cLibrarian.FaceCharacter(player, eNoBlock);
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
  if(dLibrarian.GetOptionState(14) == eOptionOn)
  {
    cLibrarian.Say("*whispering*[Welcome back!");
    cLibrarian.FollowCharacter(player, 30, 80);
  }
}

function room_LeaveTop()
{
  player.ChangeRoom(17, 240, 141);
}

function room_LeaveBottom()
{
  busyLibrarian = false;
  cLibrarian.FollowCharacter(null, 30,  80);
  cLibrarian.Say("*whispering*[Come back any time!");
  dTravel.Start();
}


function room_FirstLoad()
{
  inspectTimeInLoops = 200;
  inspectTimeLeft = 0;
  currentHotspot = 1;
  RemoveWalkableArea(2);
}

function room_RepExec()
{
  if(cLibrarian.Room == 9 && !dLibrarian.GetOptionState(14) == eOptionOn)
  {
    nextHotspot();
  }
}

function region1_WalksOff()
{
  if(!dLibrarian.GetOptionState(14) == eOptionOn)
  {
    busyLibrarian = false;
    inspectTimeLeft = 0;
  }
}

function region1_WalksOnto()
{
  if(!dLibrarian.GetOptionState(14) == eOptionOn)
  {
    busyLibrarian = true;
    cLibrarian.SayBackground("Op, op, op!");
    player.StopMoving();
    player.FaceCharacter(cLibrarian);
    cLibrarian.SayBackground("The archive is off limit, young man");
    cLibrarian.Walk(170, 124, eBlock, eWalkableAreas);
    cLibrarian.FaceCharacter(player, eBlock);
  }
}
