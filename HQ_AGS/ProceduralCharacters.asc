// new module script
//TODO
//RESET CHARACTER TO ORIGINAL COLORS WHEN DEACTIVATING

#define HAIR_DEF 25388  //rgb(96, 100, 96)
#define MUSTACHE_DEF 27501 //rgb(104, 108, 104)
#define SKIN_DEF 58607 //rgb(224, 156, 120)
#define SKIN_DARK_DEF 58444 //rgb(224, 136, 96)
#define COAT_DEF 512 //rgb(0, 64, 0)
#define COAT_LIGHT_DEF 736 //rgb(0, 92, 0)
#define COAT_DARK_DEF 256 //rgb(0, 32, 0)
#define NECKTIE_DEF 0 //rgb(0, 0, 0)
#define UNDERSHIRT_DEF 65535 //rgb(248, 252, 248)
#define PANTS_DEF 4290 //rgb(16, 24, 16)
#define PANTS_DARK_DEF 32 //rgb(0, 4, 0)
#define SHOES_DEF 20800 //rgb(80, 40, 0)
#define SHOES_DARK_DEF 14528 //rgb(56, 24, 0)

Dictionary* defaultProceduralCharacterViewDictionary;

DynamicSprite* changedCharViewSprites[];
int oldCharViewSprites[];
Set* characterIndextoManage;

// called when the game starts, before the first room is loaded
function game_start()
{
  int neededSlots = 1000 + (100 * Game.CharacterCount);
  changedCharViewSprites = new DynamicSprite[neededSlots];
  oldCharViewSprites = new int[neededSlots];
  characterIndextoManage = Set.Create(eNonSorted);
  
  defaultProceduralCharacterViewDictionary = Dictionary.Create(eNonSorted);
}

String DPCV_toString(defProcCharView DPCV)
{
  switch(DPCV)
  {
    case DPCV_female_sit:
      return "DPCV_female_sit";
      break;
    case DPCV_female_walk:
      return "DPCV_female_walk";
      break;
    case DPCV_male_climb:
      return "DPCV_male_climb";
      break;
    case DPCV_male_sit:
      return "DPCV_male_sit";
      break;
    case DPCV_male_walk:
      return "DPCV_male_walk";
      break;
    default:
      break;    
  }
}

function setDefaultProceduralCharacterView(defProcCharView viewDescription, int viewIndex)
{
  defaultProceduralCharacterViewDictionary.Set(DPCV_toString(viewDescription), String.Format("%d", viewIndex));
}

int getDefaultProceduralCharacterView(defProcCharView viewDescription)
{
  String viewIndexS = defaultProceduralCharacterViewDictionary.Get(DPCV_toString(viewDescription));
  return viewIndexS.AsInt;
}

// gets a color index from the characterColors enum
int getCharacterHairColor(characterColors targetColor)
{
  if(targetColor == CC_random || targetColor == CC_skin_ivory || targetColor == CC_skin_porcelain || targetColor == CC_skin_roseBeige)
  {
    int i = Random(5);
    switch(i)
    {
      case 0:
        targetColor = CC_hair_blond;
        break;
      case 1:
        targetColor = CC_hair_brown;
        break;
      case 2:
        targetColor = CC_hair_dark;
        break;
      case 3:
        targetColor = CC_hair_grey;
        break;
      case 4:
        targetColor = CC_hair_red;
        break;
      case 5:
        targetColor = CC_hair_white;
        break;
    }
  }
  
  if(targetColor == CC_skin_band || targetColor == CC_skin_dark || targetColor == CC_skin_siena || targetColor == CC_skin_warmIvory)
  {
    int i = Random(2);
    switch(i)
    {
      case 0:
        targetColor = CC_hair_white;
        break;
      case 1:
        targetColor = CC_hair_grey;
        break;
      case 2:
        targetColor = CC_hair_dark;
        break;
    }
  }
  
  switch(targetColor)
  {
    case CC_hair_blond:
      return 65159;
      break;
    case CC_hair_brown:
      return 33410;
      break;
    case CC_hair_dark:
      return 6272;
      break;
    case CC_hair_grey:
      return 48599;
      break;
    case CC_hair_red:
      return 53953;
      break;
    case CC_hair_white:
      return 63357;
      break;
  }
}

// gets an array of color tones with different shading ([0] = pale ; [1] = skin tone ; [2] = shaded)
int[] getCharacterColorTones(characterColors targetColor)
{
  int paleToneShade[] = new int[3];
  switch(targetColor)
  {
    case CC_black:
      paleToneShade[0] = 12710;
      paleToneShade[1] = 4258;
      paleToneShade[2] = 32;
      break;
    case CC_white:
      paleToneShade[0] = 65535;
      paleToneShade[1] = 61277;
      paleToneShade[2] = 52825;
      break;
    case CC_grey:
      paleToneShade[0] = 44373;
      paleToneShade[1] = 35953;
      paleToneShade[2] = 27469;
      break;
    case CC_brown:
      paleToneShade[0] = 46121;
      paleToneShade[1] = 27269;
      paleToneShade[2] = 18851;
      break;
    case CC_green:
      paleToneShade[0] = 3394;
      paleToneShade[1] = 3073;
      paleToneShade[2] = 544;
      break;
    case CC_blue:
      paleToneShade[0] = 16958;
      paleToneShade[1] = 6397;
      paleToneShade[2] = 2167;
      break;
    case CC_red:
      paleToneShade[0] = 53248;
      paleToneShade[1] = 43008;
      paleToneShade[2] = 26624;
      break;
    case CC_yellow:
      paleToneShade[0] = 59201;
      paleToneShade[1] = 48641;
      paleToneShade[2] = 33824;
      break;
    case CC_purple:
      paleToneShade[0] = 51321;
      paleToneShade[1] = 41076;
      paleToneShade[2] = 26701;
      break;
    case CC_beige:
      paleToneShade[0] = 61075;
      paleToneShade[1] = 60942;
      paleToneShade[2] = 58663;
      break;
    case CC_orange:
      paleToneShade[0] = 64516;
      paleToneShade[1] = 64320;
      paleToneShade[2] = 47712;
      break;
    case CC_cyan:
      paleToneShade[0] = 1884;
      paleToneShade[1] = 1527;
      paleToneShade[2] = 1007;
      break;
    case CC_skin_porcelain:
      paleToneShade[0] = 65303;
      paleToneShade[1] = 65303;
      paleToneShade[2] = 65072;
      break;
    case CC_skin_ivory:
      paleToneShade[0] = 65076;
      paleToneShade[1] = 65076;
      paleToneShade[2] = 64847;
      break;
    case CC_skin_warmIvory:
      paleToneShade[0] = 65400;
      paleToneShade[1] = 65400;
      paleToneShade[2] = 65267;
      break;
    case CC_skin_roseBeige:
      paleToneShade[0] = 65008;
      paleToneShade[1] = 65008;
      paleToneShade[2] = 64616;
      break;
    case CC_skin_siena:
      paleToneShade[0] = 43914;
      paleToneShade[1] = 43914;
      paleToneShade[2] = 27011;
      break;
    case CC_skin_band:
      paleToneShade[0] = 39914;
      paleToneShade[1] = 39914;
      paleToneShade[2] = 25059;
      break;
    case CC_skin_dark:
      paleToneShade[0] = 33512;
      paleToneShade[1] = 33512;
      paleToneShade[2] = 12579;
      break;
  }
  
  return paleToneShade;
}

// pick a random jacket color among available colors
characterColors getCharacterRandomJacketColor()
{
  int i = Random(11);
  switch(i)
  {
    case 0:
      return CC_beige;
      break;
    case 1:
      return CC_black;
      break;
    case 2:
      return CC_blue;
      break;
    case 3:
      return CC_brown;
      break;
    case 4:
      return CC_cyan;
      break;
    case 5:
      return CC_green;
      break;
    case 6:
      return CC_grey;
      break;
    case 7:
      return CC_orange;
      break;
    case 8:
      return CC_purple;
      break;
    case 9:
      return CC_red;
      break;
    case 10:
      return CC_white;
      break;
    case 11:
      return CC_yellow;
      break;
  }
}

// pick a random skin color among the predefined ones
characterColors getCharacterRandomSkinColor()
{
  int i = Random(6);
  switch(i)
  {
    case 0:
      return CC_skin_band;
      break;
    case 1:
      return CC_skin_dark;
      break;
    case 2:
      return CC_skin_ivory;
      break;
    case 3:
      return CC_skin_porcelain;
      break;
    case 4:
      return CC_skin_roseBeige;
      break;
    case 5:
      return CC_skin_siena;
      break;
    case 6:
      return CC_skin_warmIvory;
      break;
  } 
}

// change parts of a color dictionary
Dictionary* changeColorDictionary(Dictionary* initialColorDict, bodyParts partToChange, characterColors targetColor)
{
  int listColors[] = new int[3];
  int thisColor;
  
  switch(partToChange)
  {
    case BP_coat:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("coatLight", String.Format("%d", listColors[0]));
      initialColorDict.Set("coat", String.Format("%d", listColors[1]));
      initialColorDict.Set("coatDark", String.Format("%d", listColors[2]));
      break;
    case BP_hair:
      initialColorDict.Set("hair", String.Format("%d", getCharacterHairColor(targetColor)));
      break;
    case BP_hair_mustache:
      thisColor = getCharacterHairColor(targetColor);
      initialColorDict.Set("hair", String.Format("%d", thisColor));
      initialColorDict.Set("mustache", String.Format("%d", thisColor));
      break;
    case BP_necktie:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("neckTie", String.Format("%d", listColors[2]));
      break;
    case BP_pants:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("pants", String.Format("%d", listColors[1]));
      initialColorDict.Set("pantsDark", String.Format("%d", listColors[2]));
      break;
    case BP_shoes:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("shoe", String.Format("%d", listColors[1]));
      initialColorDict.Set("shoeDark", String.Format("%d", listColors[2]));
      break;      
  }
}

// build a color dictionary
Dictionary* makeAColorDictionary(int hair, int mustache, int skin, int skinShadow, int coat, int coatLight, int coatDark, int neckTie, int underShirt, int pants, int pantsDark, int shoe, int shoeDark)
{
  Dictionary* colorDict = Dictionary.Create(eSorted);
  colorDict.Set("hair", String.Format("%d", hair));
  colorDict.Set("mustache", String.Format("%d", mustache));
  colorDict.Set("skin", String.Format("%d", skin));
  colorDict.Set("skinShadow", String.Format("%d", skinShadow));
  colorDict.Set("coat", String.Format("%d", coat));
  colorDict.Set("coatLight", String.Format("%d", coatLight));
  colorDict.Set("coatDark", String.Format("%d", coatDark));
  colorDict.Set("neckTie", String.Format("%d", neckTie));
  colorDict.Set("underShirt", String.Format("%d", underShirt));
  colorDict.Set("pants", String.Format("%d", pants));
  colorDict.Set("pantsDark", String.Format("%d", pantsDark));
  colorDict.Set("shoe", String.Format("%d", shoe));
  colorDict.Set("shoeDark", String.Format("%d", shoeDark));
  
  return colorDict;
}

// makes the 'default' color dictionary,  based on the default sprites' color
Dictionary* makeDefaultColorDictionary()
{
  return makeAColorDictionary(HAIR_DEF, MUSTACHE_DEF, SKIN_DEF, SKIN_DARK_DEF, COAT_DEF, COAT_LIGHT_DEF, COAT_DARK_DEF, NECKTIE_DEF, UNDERSHIRT_DEF, PANTS_DEF, PANTS_DARK_DEF, SHOES_DEF, SHOES_DARK_DEF);
}

// creates a dictionary for a character recolor,  use CC_random to chose random color EXCEPT for the mustache (then use -1)
Dictionary* createASecondaryNPCDictionary(characterColors thisSkin, characterColors thisHair, int hasMustache, characterColors thisJacket, characterColors thisNecktie, characterColors thisUndershirt, characterColors thisPant, characterColors thisShoe)
{
  int finalHair;
  int finalSkin[];
  int finalMustache;
  int finalJacket[];
  int finalNecktie[];
  int finalUndershirt[];
  int finalPants[];
  int finalShoes[];
  
  // SKIN
  if(thisSkin == CC_random)
  {
    thisSkin = getCharacterRandomSkinColor();
  }
  finalSkin = getCharacterColorTones(thisSkin);
  
  // HAIR
  if(thisHair == CC_random)
  {
    thisHair = thisSkin;
  }
  finalHair = getCharacterHairColor(thisHair);
  
  // MUSTACHE
  if(hasMustache == -1)
  {
    hasMustache = Random(1);
  }
  if(hasMustache == 0)
  {
    finalMustache = finalSkin[1];
  } else
  {
    finalMustache = finalHair;
  }
  
  // JACKET
  if(thisJacket == CC_random)
  {
    thisJacket = getCharacterRandomJacketColor();
  }
  finalJacket = getCharacterColorTones(thisJacket);
  
  // NECKTIE
  if(thisNecktie == CC_random)
  {
    int i = Random(1);
    if(i == 0)
    {
      thisNecktie = thisJacket;
    } else
    {
      thisNecktie = CC_black;
    }
  }
  finalNecktie = getCharacterColorTones(thisNecktie);
  
  // UNDERSHIRT
  if(thisUndershirt == CC_random)
  {
    thisUndershirt = CC_white;
  }
  finalUndershirt = getCharacterColorTones(thisUndershirt);
  
  // PANTS
  if(thisPant == CC_random)
  {
    int i = Random(5);
    switch(i)
    {
      case 0:
        thisPant = thisJacket;
        break;
      case 1:
        thisPant = CC_beige;
        break;
      case 2:
        thisPant = CC_black;
        break;
      case 3:
        thisPant = CC_brown;
        break;
      case 4:
        thisPant = CC_grey;
        break;
      case 5:
        thisPant = CC_white;
        break; 
    }
  }
  finalPants = getCharacterColorTones(thisPant);
  
  // SHOES
  if(thisShoe == CC_random)
  {
    int i = Random(6);
    switch(i)
    {
      case 0:
        thisShoe = thisJacket;
        break;
      case 1:
        thisShoe = CC_beige;
        break;
      case 2:
        thisShoe = CC_black;
        break;
      case 3:
        thisShoe = CC_brown;
        break;
      case 4:
        thisShoe = CC_grey;
        break;
      case 5:
        thisShoe = CC_white;
        break;
      case 6:
        thisShoe = thisPant;
        break; 
    }
  }
  finalShoes = getCharacterColorTones(thisShoe);
  
  return makeAColorDictionary(finalHair, finalMustache, finalSkin[1], finalSkin[2], finalJacket[1], finalJacket[0], finalJacket[2], finalNecktie[2], finalUndershirt[0], finalPants[1], finalPants[2], finalShoes[1], finalShoes[2]);
}

// uses the createASecondaryNPC function with only the randomized parameters
Dictionary* createARandomSecondaryNPCDictionary()
{
  return createASecondaryNPCDictionary(CC_random, CC_random, -1, CC_random, CC_random, CC_random, CC_random, CC_random);
}

String getCharacterColorType(int colorCode, Dictionary* defaultColors, String printMessage,  int spriteNumber)
{
  String colorTypes[] = defaultColors.GetKeysAsArray();
  String colorCodeString = String.Format("%d", colorCode);
  int i = 0;
  String returnColorType = "";
  
  for(i = 0 ; i < defaultColors.ItemCount ; i++)
  {
    if(defaultColors.Get(colorTypes[i]) == colorCodeString)
    {
      returnColorType = colorTypes[i];
    }
  }  
  return returnColorType;
}

int getCharacterColorCode(String colorType,  Dictionary* newColors)
{
  colorType = newColors.Get(colorType);
  int colorCode = colorType.AsInt;
  return colorCode;
}

// repaint the sprites with the new colors
void changeCharacterColors(this Character*, Dictionary* newColors)
{
  int char_View = this.View;
  
  int loopCount;
  int frameCount;
  ViewFrame* thisFrame;
  bool thisFrame_Flipped;
  
  Dictionary* defaultColorList;
  
  int loopCounter;
  int frameCounter;
  int spriteCounterReset = (this.ID * 100) + 1000;
  int spriteCounter = spriteCounterReset;
  int spriteMaxSlot = spriteCounter + 30;
  int graphicSlot;
  DrawingSurface* thisSurface;
  int surfaceWidth;
  int surfaceHeight;
  int surfaceX;
  int surfaceY;
  int surfaceXY_colorCode;
  String surfaceXY_colorType;
  
  loopCount = Game.GetLoopCountForView(this.View);
  
  for(loopCounter = 0 ; loopCounter < loopCount ; loopCounter++)
  {
    frameCount = Game.GetFrameCountForLoop(this.View, loopCounter);
    for(frameCounter = 0 ; frameCounter < frameCount ; frameCounter++)
    {
      thisFrame = Game.GetViewFrame(this.View, loopCounter, frameCounter);
      oldCharViewSprites[spriteCounter] = thisFrame.Graphic;
      thisFrame_Flipped = thisFrame.Flipped;
      changedCharViewSprites[spriteCounter] = DynamicSprite.CreateFromExistingSprite(thisFrame.Graphic, true);//HEREE
      spriteCounter++;
    }
  }
  
  spriteCounter = spriteCounterReset;
  defaultColorList = makeDefaultColorDictionary();
  
  for(spriteCounter = spriteCounterReset ; spriteCounter < spriteMaxSlot ; spriteCounter++)
  {
    thisSurface = changedCharViewSprites[spriteCounter].GetDrawingSurface();
    surfaceHeight = thisSurface.Height;
    surfaceWidth = thisSurface.Width;
    
    //debugDisplay(String.Format("SpriteIndex = %d[Graphics number = %d[HxW = %d x %d", spriteCounter, changedCharViewSprites[spriteCounter].Graphic, surfaceHeight, surfaceWidth));
    
    for(surfaceX = 0 ; surfaceX < surfaceWidth ; surfaceX++)
    {
      for(surfaceY = 0 ; surfaceY < surfaceHeight ; surfaceY++)
      {
        surfaceXY_colorCode = thisSurface.GetPixel(surfaceX, surfaceY);
        if(surfaceXY_colorCode > -1)
        {
          surfaceXY_colorType = getCharacterColorType(surfaceXY_colorCode, defaultColorList, String.Format("At (%d, %d)", surfaceX, surfaceY), spriteCounter);
          if(surfaceXY_colorType != "")
          {
            thisSurface.DrawingColor = getCharacterColorCode(surfaceXY_colorType, newColors);
            thisSurface.DrawPixel(surfaceX, surfaceY);
          }
        }
      }
    }
  }
  
  spriteCounter = spriteCounterReset;
  
  for(loopCounter = 0 ; loopCounter < loopCount ; loopCounter++)
  {
    frameCount = Game.GetFrameCountForLoop(this.View, loopCounter);
    for(frameCounter = 0 ; frameCounter < frameCount ; frameCounter++)
    {
      graphicSlot = changedCharViewSprites[spriteCounter].Graphic;
      spriteCounter++;
      thisFrame = Game.GetViewFrame(this.View, loopCounter, frameCounter);
      thisFrame.Graphic = graphicSlot;
    }
  }      
}

/*function resetCharacterView()
{
  for(loopCounter = 0 ; loopCounter < loopCount ; loopCounter++)
  {
    frameCount = Game.GetFrameCountForLoop(this.View, loopCounter);
    for(frameCounter = 0 ; frameCounter < frameCount ; frameCounter++)
    {
      thisFrame = Game.GetViewFrame(this.View, loopCounter, frameCounter);
      oldCharViewSprites[spriteCounter] = thisFrame.Graphic;
      thisFrame_Flipped = thisFrame.Flipped;
      changedCharViewSprites[spriteCounter] = DynamicSprite.CreateFromExistingSprite(thisFrame.Graphic, true);//HEREE
      spriteCounter++;
    }
  }
}*/

void makeSecCharAppearance(this Character*, int spawnHotspotIndex, int targetHotspotIndex, CharacterDirection secNPCFacing, bool randomizeAppearance)
{
  if(randomizeAppearance)
  {
    this.changeCharacterColors(createARandomSecondaryNPCDictionary());
  }  
  this.ChangeRoom(player.Room, hotspot[spawnHotspotIndex].WalkToX, hotspot[spawnHotspotIndex].WalkToY, secNPCFacing);
  this.PlaceOnWalkableArea();
  this.Transparency = 0;
  this.Walk(hotspot[targetHotspotIndex].WalkToX, hotspot[targetHotspotIndex].WalkToY, eNoBlock, eWalkableAreas);
  characterIndextoManage.Add(String.Format("%d", this.ID));
}

function removeRandomChars(bool allOfThemRightNow)
{
  int characterIndextoManageLength = characterIndextoManage.ItemCount;
  if(characterIndextoManageLength > 0)
  {
    String charactersToManage[] = characterIndextoManage.GetItemsAsArray();
  
    String thisCharacterIndexAsString;
    Character* thisCharacter;
    
    for(int i = 0 ; i < characterIndextoManageLength ; i++)
    {
      thisCharacterIndexAsString = charactersToManage[i];
      thisCharacter = character[thisCharacterIndexAsString.AsInt];
      if(!thisCharacter.Moving || allOfThemRightNow)
      {
        thisCharacter.Transparency = 100;
        characterIndextoManage.Remove(thisCharacterIndexAsString);
        
      }
    }
  }  
}

function repeatedly_execute()
{
  removeRandomChars(false);
}