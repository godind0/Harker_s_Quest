bool minaHeadingtoTable = false;
bool minaHeadingBackInside = false;
bool minaOnPause = false;

function bangTheBin()
{
  aBinBang.Play(eAudioPriorityHigh, eOnce);
  addTimedEventInXMinutes(1, "AngryLibrarian");
}  

function minaExitingSchool()
{
  cMina.x = 125;
  cMina.y = 114;
  cMina.PlaceOnWalkableArea();
  cMina.Transparency = 0;
  
  if(!cMina.getPreviouslyTalkedTo())
  {
    cMina.FaceCharacter(player);
    cMina.SayBackground("Oh hi Jonathan!");
    cMina.Walk(oSeat_Mina.X, oSeat_Mina.Y, eNoBlock, eWalkableAreas);
    minaHeadingtoTable = true;
    minaOnPause = true;
  } else
  {
    cMina.FollowCharacter(player, 30, 30);
  }
}

function minaIsWaiting()
{
  cMina.x = 213;
  cMina.y = 156;
  cMina.sit(oSeat_Mina, true);//Already sat at table
  cMina.Transparency = 0;
  oCup_Mina.Visible = true;
  minaOnPause = true;
}

function minaHeadingInside()
{
  if(cMina.isSitting())
  {
    cMina.standUp();
    cMina.PlaceOnWalkableArea();
    cMina.SetProperty("dialogWhileSitting", -1);
  }
  minaHeadingBackInside = true;
  cMina.Walk(215, 114, eNoBlock, eWalkableAreas);
  minaOnPause = false;
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(((cmd.IndexOf("Knock") != -1 || cmd.IndexOf("Tap") != -1) &&
      (cmd.IndexOf("Window") || cmd.IndexOf("Glass")))
      ||
     ((cmd.IndexOf("Wave") != -1 || cmd.IndexOf("Signal") != -1 || cmd.IndexOf("Beckon") != -1 || cmd.IndexOf("Hail") != -1 || cmd.IndexOf("Gesture") != -1 || cmd.IndexOf("Attention") != -1) &&
      (cmd.IndexOf("Mina") || cmd.IndexOf("Inside") || cmd.IndexOf("Fiancee") || cmd.IndexOf("Love"))))
  {
    if(cMina.Transparency < 100)
    {
      if(cMina.isSitting())
      {
        cMina.standUp();
      }
      cMina.Walk(217, 147, eBlock, eAnywhere);
      cMina.FaceDirection(eDirectionUp, eBlock);
      cMina.Say("Who are you beckoning?");
      cMina.Say("There is no one in there");
      cMina.Walk(245, 155, eBlock, eAnywhere);
      cMina.PlaceOnWalkableArea();
      cMina.FollowCharacter(player, 30, 30);
    } else
    {
      Display("Jonathan beckons Mina outside");
      Wait(15);
      player.Walk(125, 150, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp);
      minaExitingSchool();
    }
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomHotspots && index == 4 && verb == "look")//Teacher's lounge
  {
    if(cMina.Transparency == 100)//Mina is in her office
    {
      player.Say("I can see Mina at her desk");
    }
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
    case 2:
      minaHeadingInside();
      break;
    case 3:
      if(!playerHasTimedEventByWhatHappens("LibrarianIsBack"))
      {
        cSchoolLib.ChangeRoom(25, 411, 145, eDirectionDown);
        cSchoolLib.Walk(485, 169, eNoBlock, eWalkableAreas);
      } else
      {
        cSchoolLib.ChangeRoom(25, 485, 169, eDirectionLeft);
        removeTimedEventByWhatHappens("LibrarianIsBack");
      }
      cSchoolLib.sayBackgroundBacklog("YOU BLOODY SCOUNDRELS!");
      cSchoolLib.sayBackgroundBacklog("STOP");
      cSchoolLib.sayBackgroundBacklog("HITTING");
      cSchoolLib.sayBackgroundBacklog("THE GOD-FORSAKEN BIN");
      cSchoolLib.sayBackgroundBacklog("WITH YOUR STUPID STICK!");
      if(player.x > 362)
      {
        cSchoolLib.gotoCharacter(player);
        player.FaceCharacter(cSchoolLib);
        cSchoolLib.Say("Did you hit the bin with a stick, sir?");
        if(!cSchoolLib.getPreviouslyTalkedTo())
        {
          player.Say("I am regretting it, but yes");
          cSchoolLib.Say("First and last warning, partna'");
          cSchoolLib.setPreviouslyTalkedTo(true);
          cSchoolLib.Walk(411, 145, eBlock, eWalkableAreas);
          cSchoolLib.ChangeRoom(26, 233, 136, eDirectionDown);
        } else
        {
          player.Say("No?");
          if(player.HasInventory(iBranch))
          {
            cSchoolLib.Say("I can see the branch in your hands");
            player.Say("Right");
            cSchoolLib.Say("You are in big trouble, mister!");
            cSchoolLib.Say("Follow me to the Headmistress's office");
            player.FollowCharacter(cSchoolLib, 50, 10);
            cSchoolLib.Walk(411, 145, eBlock, eWalkableAreas);
            gameIsOver("Jonathan got banned from the school and got Mina fired");
          } else 
          {
            cSchoolLib.Say("Fine");
            cSchoolLib.Walk(485, 169, eBlock, eWalkableAreas);
            cSchoolLib.Say("This time I am going to catch you");
            cSchoolLib.Say("Where the bloody devil are you?");
            cSchoolLib.FaceDirection(eDirectionRight, eBlock);
            cSchoolLib.Transparency = 100;
            addTimedEventInXMinutes(10, "LibrarianIsBack");
          }
        }
      } else
      {
        cSchoolLib.sayBackgroundBacklog("This time I am going to catch you");
        cSchoolLib.sayBackgroundBacklog("Where the bloody devil are you?");
        cSchoolLib.FaceDirection(eDirectionRight, eNoBlock);
        cSchoolLib.Transparency = 100;
        addTimedEventInXMinutes(10, "LibrarianIsBack");
      }
      break;
    default:
      break;
  }
}

function room_FirstLoad()
{
  //do nothing
  cSchoolLib.setColors();
}

function room_Load()
{
  cMina.Transparency = 100;
  cMina.setColors();
  if(!cMina.getPreviouslyTalkedTo())
  {
    if(isThisTimeWithinXminOfThisTime(whatTimeIsIt(false), translateTimeToHHMMAM(11, 30, "AM"), 45))//Mina is out 15min before the meeting and waits for 30min after
    {
        minaIsWaiting();
    }
  }
  if(!isItBeforeThisTime(11, 30, 00, false, 1) && getQuestLineVariant(6, 0) == 0)
  {
    modifyQuestNoteLineVariant(6, 0, 2);
  }
  if(cMina.Transparency < 100)
  {
    cMina.SayBackground("Oh hi Jonathan!");
  }
}

function room_RepExec()
{
  if(cMina.Transparency == 100) //Not currently shown
  {
    if(!cMina.getPreviouslyTalkedTo()) // Not met before
    {
      if(isItBeforeThisTime(11, 30, 00, false, 1)) // Not too late
      {
        if(!isItBeforeThisTime(10, 45, 00, false, 1)) // At least Mina's break time
        {
          minaExitingSchool();
        }
      }
    }
  } else if(minaHeadingtoTable) {
    if(!cMina.Moving)
    {
      if(cMina.isNearObject(oSeat_Mina, 20.0))//reached destination
      {
        minaHeadingtoTable = false;
        cMina.sit(oSeat_Mina, false);
        minaHeadingtoTable = false;
        cMina.SetProperty("dialogWhileSitting", 5);
      } else
      {
        cMina.FollowCharacter(player, 30, 30);
        minaHeadingtoTable = false;
      }
    }
  } else if(minaOnPause)
  {
    if(!isItBeforeThisTime(11, 35, 00, false, 1))
    {
      cMina.sayBackgroundBacklog("I need to head back to work");
      cMina.sayBackgroundBacklog("Good bye!");
      minaHeadingInside();
    }
  } else if(minaHeadingBackInside)
  {
    if(!cMina.Moving)
    {
      if(cMina.isNearHotspot(hSchoolEntrance, 20.0))
      {
        cMina.Transparency = 100;
      } else
      {
        minaHeadingInside();
      }
    }
  }
}

function room_Leave()
{
  cMina.FollowCharacter(null, 0, 0);
}

function room_LeaveBottom()
{
  dTravel.Start();
}

function oBin_Interact()
{
  if(playerHasSpoiledFood())
  {
    player.Say("I do have this food that spoiled");
    player.Say("There we go!");
    cleanAllSpoiledFood();
  } else
  {
    player.Say("I have nothing to throw away");
  }
}

function oBin_UseInv()
{
  elementType useET = getETOfElementUsed();
  int useIndex = getIndexOfElementUsed();
  
  if(useET == allInventoryItems && useIndex == 48)//Branch
  {
    bangTheBin();
  }
}
