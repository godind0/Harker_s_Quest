// room script file
bool prewashedFace = false;
bool touchFireplace = false;
bool burnDocuments = false;
bool inBedroom = false;
bool foundDrawer = false;

bool canJonathanLeave()
{
  bool presentable = false;
  if(showHints && getBeardPercent() > 10)
  {
    player.Say("I should shave before leaving");
  } else if(showHints && player.getWornClothesIndex(BP_coat) != -1 && !player.isPlayerWearing(BP_coat, "Brown"))
  {
    player.Say("This coat is much too colorful for work"); 
  } else if(player.getWornClothesIndex(BP_coat) == -1)
  {
    player.Say("I need to wear a coat before leaving the house");
  } else if(player.getWornClothesIndex(BP_necktie) == -1)
  {
    player.Say("I need to wear a tie before leaving the house");
  } else if(player.getWornClothesIndex(BP_pants) == -1)
  {
    player.Say("I need to wear pants before leaving the house");
  } else if(player.getWornClothesIndex(BP_shoes) == -1)
  {
    player.Say("I need to wear shoes before leaving the house");
  } else if(player.getWornClothesIndex(BP_undershirt) == -1)
  {
    player.Say("I need to wear a shirt before leaving the house");
  } else
  {
    presentable = true;
  }
  return presentable;
}

function returnMirrorToTable()
{
  oMirror.Visible = true;
  giveScoreOnce("Mirror back on table", 1);
  player.Say("There! Everything is bak in place");
  modifyQuestNoteLineVariant(1, 2, 0);
}

function oSink_Interact()
{
  player.Walk(35, 186, eBlock, eWalkableAreas);
  player.FaceObject(oSink);
  
  if(!prewashedFace && getBeardPercent() >= 10) // not washed,  not shaved
  {
    Display("Jonathan washes his face");
    player.Say("Damp skin makes for a better shave");
    player.Say("Wash before, wash after");
    prewashedFace = true;
  } else if(prewashedFace && getBeardPercent() < 10)
  {
    Display("Jonathan washes his face");
    player.Say("Good, every little bit of shaving cream is removed!");
    giveScoreOnce("proper shave procedure", 1);
    modifyQuestNoteLineVariant(1, 2, 1);//remove washing instructions
    if(getQuestLineVariant(1, 1) == 1)//properly dressed
    {
      modifyQuestNoteLineVariant(1, 0, 3);//fully ready
    } else
    {
      modifyQuestNoteLineVariant(1, 0, 2);//must dress up
    }
  } else
  {
    Display("Jonathan washes his hands");
    player.Say("Ah, how refreshing");
  }
}

function clean_mirror()
{
  if(player.HasInventory(iBroom))
  {
    if(player.isNearObject(oBrokenMirror, 20.0))
    {
      player.Walk(60, 170, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft);
      oBrokenMirror.Visible = false;
      giveScoreOnce("cleaning mirror", 1);
      player.Say("There, all clean again");
      if(oMirror.Visible == false && !player.HasInventory(iMirror))
      {
        player.FaceObject(oMirror);
        player.Say("I think I have a spare mirror in the apartment somewhere");
      }
    } else
    {
      player.Say("I need to get closer");
    }
  } else
  {
    player.Say("I am not touching broken glass with my bare hands");
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  
  if(findVerbInDictionary(cmd) == "take" && cmd.IndexOf("cigar") != -1) // take cigar
  {
    sendBackToNormalParsing = false;
    if(player.HasInventory(iCigars))
    {
      player.Think("I already have some");
    } else {
      player.Think("These are handmade!");
      player.AddInventory(iCigars);
      giveScoreOnce(iCigars.Name, 1);
    }
  } else if(findVerbInDictionary(cmd) == "look" && cmd.IndexOf("cigar") != -1) // look cigar
  {
    sendBackToNormalParsing = false;
    if(player.HasInventory(iCigars))
    {
      player.Think("My cigars");
      player.Think("But I already took some");
    } else {
      player.Think("These cigars are handmade!");
    }
  } else if (cmd.StartsWith("open") && cmd.IndexOf("drawer") != -1) // secretary's drawer
  {
    if(player.isNearObject(oSecretary, 30.0))
    {
      player.Think("There is a small drawer I can open");
      foundDrawer = true;
      sendBackToNormalParsing = false;
      if(player.HasInventory(iPenInk))
      {
        player.Think("It is empty");
      } else
      {
        player.Think("There are writing instruments in there");
        player.Think("Those can be useful");
        player.AddInventory(iPenInk);
        giveScoreOnce(iPenInk.Name, 1);
      }
    } else if(foundDrawer) 
    {
      player.Say("I need to be closer to the desk");
    } else
    {
      player.Think("What drawer?");
    }
  } else if(cmd.IndexOf("Touch") != -1 && (cmd.IndexOf("oven") != -1 || cmd.IndexOf("furnace") != -1 || cmd.IndexOf("fire") != -1)) // touch oven
  {
    if(touchFireplace == false)
    {
      player.Say("That sounds ill advised");
      touchFireplace = true;
    } else
    {
      player.Say("Alright then, let's touch it. . .");
      gameIsOver("Jonathan burned his hand to the 3rd degree");
    }
  } else if(cmd.StartsWith("Wash") || cmd.StartsWith("Clean")) // wash or clean keyword
  {
    if((oBrokenMirror.Visible == false) || (cmd.IndexOf("mirror") != -1 && cmd.IndexOf("glass") != -1 && cmd.IndexOf("shard") != -1))
    {
      oSink_Interact();
    } else if (player.isThisFarAwayFromObject(oSink) < player.isThisFarAwayFromObject(oBrokenMirror))
    {
      oSink_Interact();
    } else
    {
      if(oBrokenMirror.Visible == true)
      {
        clean_mirror();
      } else
      {
        player.Say("What should I clean?");
      }
    }
    sendBackToNormalParsing = false;
  }  
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 20 && verb == "take")//mirror
  {  
    if(getBeardPercent() >= 10)
    {
      player.Think("I should shave before taking this");
      sendBackToNormalParsing = false;
    } else if (getStoryBeat() < packYourThings)
    {
      player.Think("I do not think I will need this today");
      sendBackToNormalParsing = false;
    }     
  } else if(eT == roomObjects && index == 11 && verb == "open")//front door
  {
    if(getStoryBeat() == startYourDay)
    {
      if(getBeardPercent() >= 10 && showHints)
      {
        player.Think("I cannot leave the apartment without shaving first");
        sendBackToNormalParsing = false;
      } else if (!player.HasInventory(iLegalPapers) && showHints)
      {
        player.Think("I worked on contracts all evening last night. I need to bring them in to work");
        sendBackToNormalParsing = false;
      }
    }
  } else if(eT == roomObjects && index == 2 && verb == "open")//secretary
  {
    player.Think("There is a small drawer I can open");
    foundDrawer = true;
    sendBackToNormalParsing = false;
    if(player.HasInventory(iPenInk))
    {
      player.Think("It is empty");
    } else
    {
      player.Think("There are writing instruments in there");
      if (getStoryBeat() < packYourThings)
      {
        player.Think("But I do not think I will need those today");
      } else
      {
        player.Think("Those can be useful on the trip");
        player.AddInventory(iPenInk);
        giveScoreOnce(iPenInk.Name, 1);
      }
    }
  } else if(eT == allInventoryItems && index == 4 && verb == "return")
  {
    if(player.isNearObject(oMirror))
    {
      returnMirrorToTable();
    } else
    {
      player.FaceObject(oSinkTable);
      player.Say("I am not close enough to the sink table");
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 17 && verb == "look")//sink table
  {
    if(oRazor.Visible){
      player.Think("I see my trusted razor on that table");
    }
    if(oMirror.Visible){
      player.Think("My shaving glass is on that table");
    }
  } else if(eT == roomObjects && index == 0 && verb == "open")//armoire
  {
    if(!cHarker.HasInventory(iBroom))
    {
      oBroom.Visible = true;
    }
  } else if(eT == roomObjects && index == 0 && verb == "look")//armoire
  {
    if(oBroom.Visible)
    {
      player.Think("I see broom in there");
    }
  } else if(eT == roomObjects && index == 0 && verb == "close")//armoire
  {
    if(oBroom.Visible == true)
    {
      oBroom.Visible = false;
    }
  } else if(eT == roomObjects && index == 2 && verb == "look")//secretary
  {
    if(oLegalPapers.Visible)
    {
      player.Think("I see the contracts I have been working on all evening on there");
    } 
    if(eT == roomObjects && index == 2 && verb == "look")//secretary
    {
      player.Think("There is a little drawer at the bottom");
      foundDrawer = true;
      if(player.HasInventory(iPenInk)) {
        player.Think("But it is empty now");
      } else {
        player.Think("This is where I keep my writing instruments");
      }
    }
  } else if(eT == roomObjects && index == 22 && verb == "take")//legal papers
  {
    if(player.HasInventory(iLegalPapers))
    {
      addSubitem(iLegalPapers, "Signatures", "The signature page, to sign by the assigned sollicitor representative and by the client.", "I should sign it");
      addSubitem(iLegalPapers, "Articles", "The legal articles stipulated in the contract", "");
      addSubitem(iLegalPapers, "Title page", "Cover page with the client name, assigned sollicitor's name, type of contract, contract number, and date", "");
      oFolder.Visible = false;
      player.Think("Oh my");
      player.Think("These conveyancing papers are all out of order");
      player.Think("I better organize them");
      modifyQuestNoteLineVariant(0, 1, 1);//The papers are all out of order. I better organise them.
    }
  } else if(eT == roomObjects && index == 20 && verb == "look")//mirror
  {
    if(getBeardPercent() >= 10)
    {
      player.Say("I really should shave");
    } else {
      player.Say("I look tired. . . but at least those contracts are all done.");
    }
  } else if(eT == roomObjects && index == 25 && verb == "look")//cigar table
  {
    if(!player.HasInventory(iMatches)){
      player.Say("My box of matches are on it");
    }
  } else if (eT == roomObjects && index == 12 && verb == "look") // Mina's picture
  {
    if(isItBeforeThisTime(10, 30, 00, false, 1)) // before 11am
    {
      player.Say("I have a daily coffee rendez-vous with Mina at the Station Café at 11am");
      player.Say("I cannot wait!");
      addTravelDestination(StationCafe);
    }    
  } else if (eT == roomObjects && index == 19 && verb == "look") // Diploma
  {
    addTravelDestination(LawSocietyOffices);
  } else if (eT == roomObjects && index == 18 && verb == "take") //razor
  {
    Display("*Thud*");
    oMirror.Visible = false;
    playCancel();
    Display("*Krish*");
    oBrokenMirror.Visible = true;
    player.Say("Oh bl. . . he. . .");
    player.Say("My shaving glass fell behind the table and broke");
    player.Say("I have to clean this up");
    modifyQuestNoteLineVariant(1, 2, 3);
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
  }
}

function oOven_UseInv()
{
  elementType useET = getETOfElementUsed();
  int useIndex = getIndexOfElementUsed();
  
  if(useET == allInventoryItems && useIndex == 6)
  {
    if(!player.HasInventory(iLegalPapers))
    {
      player.Think("What documents?");
    } else
    {
      if(!burnDocuments)
      {
        player.Think("But I worked all night on those");
      } else
      {
        player.Think("What is it all for anyways. . .");
        gameIsOver("Jonathan lost his job");
      }
    }
  }
}

function oMirror_UseInv()
{
  //do nothing
}

function region1_WalksOnto()
{
  if(player.HasInventory(iBroom))
  {
    player.Say("I should put the broom back where it was");
  } else if(canJonathanLeave())
  {
    dTravel.Start();
  }
}

function region2_WalksOnto()
{
  player.ChangeRoom(21, 225, 145, eDirectionLeft);
}

function region3_WalksOnto()
{
  if(oBrokenMirror.Visible == true)
  {
    if(player.getWornClothesIndex(BP_shoes) == -1)
    {
      player.Say("OWWWWWWWW!");
      gameIsOver("Jonathan stepped barefoot in broken glass and had to call in sick");
    } else
    {
      player.Say("Arg. . . I got broken glass stuck in my shoe sole. . .");
      GiveScore(-1);
    }
  }
}

function oBrokenMirror_UseInv()
{
  elementType useET = getETOfElementUsed();
  int useIndex = getIndexOfElementUsed();
  
  if(useET == allInventoryItems && useIndex == 44)//Broom
  {
    clean_mirror();
  }
}

function oSinkTable_UseInv()
{
  elementType useET = getETOfElementUsed();
  int useIndex = getIndexOfElementUsed();
  
  if(useET == allInventoryItems && useIndex == 4)//Mirror
  {
    returnMirrorToTable();
  }
}
