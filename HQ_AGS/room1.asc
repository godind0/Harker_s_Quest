// room script file

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 10 && verb == "open")//bedroom door
  {
    if(storyBeats < 1)
    {
      player.Think("I see no reason to go in my bedroom at the moment");
      sendBackToNormalParsing = false;
    }
  } else if(eT == roomObjects && index == 21 && verb == "take")//travel trunk
  {
    if(storyBeats < 1)
    {
      player.Think("I see no reason to take this with me, right now");
      sendBackToNormalParsing = false;
    }
  } else if(eT == roomObjects && index == 11 && verb == "open")//front door
  {
    if(storyBeats == 0)
    {
      if(cHarkersBeard.Transparency < 100 && showHints)
      {
        player.Think("I cannot leave the apartment without shaving first");
        sendBackToNormalParsing = false;
      } else if (!player.HasInventory(iLegalPapers) && showHints)
      {
        player.Think("I worked on contracts all evening last night. I need to bring them in to work");
        sendBackToNormalParsing = false;
      }
    }
  } 
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 17 && verb == "look")//sink table
  {
    if(oRazor.Visible){
      player.Think("I see my trusted razor on that table.");
    }
  } else if(eT == roomObjects && index == 0 && verb == "open")//armoire
  {
    if(!cHarker.HasInventory(iTrunk))
    {
      oTravelTrunk.Visible = true;
    }
  } else if(eT == roomObjects && index == 0 && verb == "close")//armoire
  {
    if(oTravelTrunk.Visible == true)
    {
      oTravelTrunk.Visible = false;
    }
  } else if(eT == roomObjects && index == 2 && verb == "look")//secretary
  {
    if(oLegalPapers.Visible && oFolder.Visible){
      player.Think("I see the contracts I have been working on all evening on there, along with the folder to put them in");
    } else if(oLegalPapers.Visible){
      player.Think("I see the contracts I have been working on all evening on there");
    } else if(oFolder.Visible){
      player.Think("I see the folder to put the contracts in on there");
    }
  } else if(eT == roomObjects && index == 22 && verb == "take")//legal papers
  {
    addClassifiableFile("Signature", "The signature page, to sign by the assigned sollicitor and by the client. Both must be dated", "Legal papers");
    addClassifiableFile("Articles", "The legal articles stipulated in the contract", "Legal papers");
    addClassifiableFile("Title page", "Cover page with the client name, assigned sollicitor's name, type of contract, contract number, and date", "Legal papers");
    oFolder.Visible = false;
    player.Think("Oh my");
    player.Think("These are all out of order");
    player.Think("I better organize them");
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, hereR1");
            }
          }
        }
        break;
      }
  }
}

function room_FirstLoad()
{
  RemoveWalkableArea(2);
  RemoveWalkableArea(3);
}

function room_AfterFadeIn()
{
  
}

function room_LeaveTop()
{
  player.ChangeRoom(4, 247, 90, eDirectionDown);
  //player.PlaceOnWalkableArea();
}
