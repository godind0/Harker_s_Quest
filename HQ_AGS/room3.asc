// room script file
bool metMina = false;
bool canWaitForMina = false;
bool closeToTrain = false;
bool cafeClosed;
bool unloaded = false;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.StartsWith("Enter ") && (cmd.IndexOf("cafe") != -1 || cmd.IndexOf("caf√©") != -1))
  {
    if(isCharacterNearObject(oCafeEntrance, 40.0, player))
    {
      dMenu.Start();
    } else
    {
      player.Say("I need to be closer");
    }
    sendBackToNormalParsing = false;
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  if(eT == roomObjects && index == 1 && verb == "open" && dMina.GetOptionState(7) == eOptionOff) // open cafe
  {
    sendBackToNormalParsing = false;
    if(cMina.Transparency < 100)
    {
      player.FaceCharacter(cMina, eBlock);
      player.Say("Mina is already here, waiting for me");
    } else if(isItBeforeThisTime(11, 0, 0, false, 1))
    {
      if(canWaitForMina)
      {
        player.FaceObject(object[3], eBlock);
        player.Say("This is the table where Mina and I sit for our tea rendezvous");
      }
      player.Say("Maybe I can grab something to eat");
      player.Walk(409, 154, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp);
      if(isThisPlaceOpened_bool(TrainStation))
      {
        dMenu.Start();
      } else
      {
        player.Say(isThisPlaceOpened(TrainStation));
      }
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  if(cmd.StartsWith("drink", eCaseInsensitive) && (cmd.IndexOf("tea") != -1 || cmd.IndexOf("cup") != -1 || cmd.IndexOf("mug") != -1))
  {
    sendBackToNormalParsing = false;
    if(oCup_Jonathan.Visible == true)
    {
      if(player.GetProperty("sitting") == 5) 
      {
        player.Say("Delicious!");
        giveScoreOnce("DrinkTea", 1);
      } else {
        player.Think("I should sit down before drinking my tea");
      }      
    } else 
    {
      player.Think("I am not sure what to drink");
    }
  }
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here
  if(eT == allCharacters && index == 3 && verb == "talk")//Mina
  {
    metMina = true;
  } else if (eT == roomObjects && index == 5 && verb == "sit")
  {
    oCup_Jonathan.Visible = true;
    oCup_Mina.Visible = true;
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
    case 2:
      if(closeToTrain)
      {
        gameIsOver("Jonathan stood too close to the moving train");
      }
      break;
    case 3:
      if(closeToTrain)
      {
        player.Transparency = 100;
      }
      break;
    case 4:
      metMina = true;
      break;
  }
}

function room_LeaveBottom()
{
  dTravel.Start();
}

function approachTrain()
{
  String departureTime;
  String arrivalTime;
  int minutes;
  int hours;
  bool AMPM = false;
  int day;
  if(!player.HasInventory(iTicketLondon))
  {
    cExeterTrainOfficer.Say("Sir!");
    player.FaceCharacter(cExeterTrainOfficer);
    player.Walk(83, 174);
    player.Say("Me?");
    cExeterTrainOfficer.Say("You cannot go near the trains without a ticket, sir!");
    player.Say("Right. My mistake");    
  } else {
    departureTime = getTrainDepartureTime();
    if(!canPlayerBoardTrain(departureTime))
    {
      cExeterTrainOfficer.Say("Sir!");
      player.FaceCharacter(cExeterTrainOfficer);
      player.Walk(83, 174);
      player.Say("Me?");
      cExeterTrainOfficer.Say("Can I see you ticket, sir?");
      player.Walk(cExeterTrainOfficer.x, cExeterTrainOfficer.y, eBlock, eWalkableAreas);
      player.FaceCharacter(cExeterTrainOfficer);
      Wait(40);
      cExeterTrainOfficer.Say(String.Format("This is a ticket for the %s train, sir", departureTime));
      cExeterTrainOfficer.Say(String.Format("This is the %s train", getTrainInStation()));
      player.Say("Right. My mistake"); 
    } else
    {
      arrivalTime = getTrainArrivalTime(getTrainDepartureTime());
      minutes = translateTimeToMinutes(arrivalTime);
      hours = minutes/60;
      minutes = minutes - (hours*60);
      if(hours >= 12)
      {
        AMPM = true;
        if(hours > 12)
        {
          hours = hours - 12;
        }
      }
      if(!metMina)
      {
        player.FaceDirection(eDirectionRight);
        player.Say("Oh, I missed my rendezvous with Mina");
        player.Say("Hopefully she wil understand");
        setTelegramInclusionByIndex("Mina", 2, true);//tell her of departure over telegram
        giveScoreOnce("Missed meeting with Mina", -2);
      }
      if(!player.HasInventory(iCamera))
      {
        player.Transparency = 100;
        Wait(30);
        player.Say("Oh no!");
        player.FaceDirection(eDirectionDown);
        Wait(50);
        player.Transparency = 0;
        player.Walk(player.x, player.y + 10, eBlock, eWalkableAreas);
        player.Say("I forgot to pick up the office's camera!");
        GiveScore(-1);
      } else
      {
        FadeOut(5);
        setCurrentTime(hours, minutes, 0, AMPM, currentDay);
        player.LoseInventory(iTicketLondon);
        embarkTrain();
        travel_movePlayer(LondonTrainStation, false);
      }
    }
  }
}

function room_FirstLoad()
{
  if(dMina.GetOptionState(7) == eOptionOn)
  {
    canWaitForMina = false;
    metMina = true;
  }
}

function minaArrives()
{
  cMina.Transparency = 0;
  cMina.Clickable = true;
  cMina.Walk(385, 179, eNoBlock, eAnywhere);
}

function minaAtTable()
{
  cMina.x = 385;
  cMina.y = 179;
  cMina.Transparency = 0;
  cMina.Clickable = true;
  oCup_Jonathan.Visible = true;
  oCup_Mina.Visible = true;
  cMina.FaceCharacter(cHarker);
  cMina.Say("Jonathan!");
  player.FaceCharacter(cMina);
  cMina.Say("Jonathan, over here!");
  cMina.FaceDirection(eDirectionDown, eBlock);
  cMina.LockView(7, eStopMoving);
  cMina.Animate(0, 3, eOnce, eNoBlock, eForwards);
  canWaitForMina = false;
}

function room_Load()
{  
  cMina.Transparency = 100;
  oCup_Jonathan.Visible = false;
  oCup_Mina.Visible = false;
  cMina.Clickable = false;
  canWaitForMina = false;
  closeToTrain = false;
  if(!metMina)
  {
    if(isItBeforeThisTime(1, 0, 0, true, 1) && !isItBeforeThisTime(10, 45, 0, false, 1))
    {
      minaAtTable();
    } else if(isItBeforeThisTime(10, 45, 0, false, 1))
    {
      canWaitForMina = true;
    }
  }
  Wait(10);
  isAnyTrainInStation(Exeter, 10, cExeterTrainOfficer, false, 2);
}

function setOpenClose(bool open)
{
  cafeClosed = !open;
  oMenu.Visible = open;
  oChair_Jonathan.Visible = open;
  oChair_Mina.Visible = open;
  oClosedSign.Visible = !open;
  if(open)
  {
    cExeterTrainOfficer.Transparency = 0;
  } else
  {
    cExeterTrainOfficer.Transparency = 100;
    oCup_Jonathan.Visible = false;
    oCup_Mina.Visible = false;
  }
}

function manageEntrance()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  setOpenClose(!state.StartsWith("Close"));
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  bool open = !state.StartsWith("Close");
  
  if(open == cafeClosed)
  {
    if(open)
    {
      cExeterTrainOfficer.SayBackground("The kiosk is opened!");
    } else
    {
      cExeterTrainOfficer.Say("Closing Time!");
    }
    
    FadeOut(5);
    setOpenClose(open);
    FadeIn(5);
  }
}

function room_RepExec()
{
  isAnyTrainInStation(Exeter, 10, cExeterTrainOfficer, true, 2);
  manageClosingTime();
  if(!metMina && canWaitForMina)
  {
    if(cMina.Transparency == 100 && isThisTimeWithinXminOfThisTime(whatTimeIsIt(false), translateTimeToHHMMAM(11, 15, "AM"), 30))//within 15 minutes of target time
    {
      minaArrives();
    } if(cMina.Transparency == 0 && !cMina.Moving)
    {
      minaAtTable();
    }
  }
  
  if(!oTrain.Animating && oTrain.View == 27 && !unloaded)
  {
    unloaded = true;
    cRandomMan1.makeSecCharAppearance(4, 2, eDirectionDown);
    Wait(2);
    cRandomWoman1.makeSecCharAppearance(1, 3, eDirectionDown);
    Wait(2);
    cRandomMan2.makeSecCharAppearance(5, 6, eDirectionDown);
  } else if (oTrain.Animating && oTrain.View == 27 && unloaded)
  {
    unloaded = false;
  }  
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
  manageEntrance();
}

function region1_WalksOnto()
{
  approachTrain();
}

function region1_Standing()
{
  closeToTrain = true;
}

function region1_WalksOff()
{
  closeToTrain = false;
}
