// room script file


bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  if(eT == allCharacters && index == 4 && verb == "talk")
  {
    dTrainTicketClerk.Start();
    sendBackToNormalParsing = false;
  } else if(eT == roomObjects && index == 1 && verb == "open")
  {
    player.Say("I do not need to enter the caf√©");
    if(cMina.Transparency < 100)
    {
      player.FaceCharacter(cMina, eBlock);
      player.Say("Mina is already here, waiting for me");
    } else if(isItBeforeThisTime(11, 0, 0, false, 1))
    {
      player.FaceObject(object[3], eBlock);
      player.Say("This is the table where Mina and I sit for our tea rendezvous");
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  if(cmd.StartsWith("drink", eCaseInsensitive) && (cmd.IndexOf("tea") != -1 || cmd.IndexOf("cup") != -1 || cmd.IndexOf("mug") != -1))
  {
    sendBackToNormalParsing = false;
    if(oCup_Jonathan.Visible == true)
    {
      if(player.GetProperty("sitting") == 5) 
      {
        player.Say("Delicious!");
        giveScoreOnce("DrinkTea", 1);
      } else {
        player.Think("I should sit down before drinking my tea");
      }      
    } else 
    {
      player.Think("I am not sure what to drink");
    }
  }
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here (and set the bool to false)
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}
function room_LeaveBottom()
{
  dTravel.Start();
}

function room_LeaveLeft()
{
  String departureTime;
  String arrivalTime;
  int minutes;
  int hours;
  bool AMPM = false;
  int day;
  if(!player.HasInventory(iTicketLondon))
  {
    cExeterTrainOfficer.Say("Sir!");
    player.FaceCharacter(cExeterTrainOfficer);
    player.Walk(94, 180);
    player.Say("Me?");
    cExeterTrainOfficer.Say("You cannot go near the trains without a ticket, sir!");
    player.Say("Right. My mistake");    
  } else {
    departureTime = getTrainDepartureTime();
    if(!isThisTimeWithinXminOfThisTime(whatTimeIsIt(false), departureTime, 20))
    {
      
    } else 
    {
      arrivalTime = getTrainArrivalTime(getTrainDepartureTime());
      minutes = translateTimeToMinutes(arrivalTime);
      hours = minutes/60;
      minutes = minutes - (hours*60);
      if(hours >= 12)
      {
        AMPM = true;
        if(hours == 12)
        {
          hours = hours - 12;
        }
      }
      FadeOut(5);
      setCurrentTime(hours, minutes, 0, AMPM, currentDay);
      player.ChangeRoom(5, arrival_x[5], arrival_y[5]);
    }
  }
}

function room_FirstLoad()
{
  createTrainTimetables();
}
