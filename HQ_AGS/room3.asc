// room script file
bool metMina = false;
bool canWaitForMina = false;
bool closeToTrain = false;
bool cafeClosed;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  if(eT == roomObjects && index == 1 && verb == "open")
  {
    if(cMina.Transparency < 100)
    {
      player.FaceCharacter(cMina, eBlock);
      player.Say("Mina is already here, waiting for me");
    } else if(isItBeforeThisTime(11, 0, 0, false, 1))
    {
      if(canWaitForMina)
      {
        player.FaceObject(object[3], eBlock);
        player.Say("This is the table where Mina and I sit for our tea rendezvous");
      }
      player.Say("Maybe I can grab something to eat");
      player.Walk(409, 154, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp);
      if(isThisPlaceOpened_bool(TrainStation))
      {
        dMenu.Start();
      } else
      {
        player.Say(isThisPlaceOpened(TrainStation));
      }
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  if(cmd.StartsWith("drink", eCaseInsensitive) && (cmd.IndexOf("tea") != -1 || cmd.IndexOf("cup") != -1 || cmd.IndexOf("mug") != -1))
  {
    sendBackToNormalParsing = false;
    if(oCup_Jonathan.Visible == true)
    {
      if(player.GetProperty("sitting") == 5) 
      {
        player.Say("Delicious!");
        giveScoreOnce("DrinkTea", 1);
      } else {
        player.Think("I should sit down before drinking my tea");
      }      
    } else 
    {
      player.Think("I am not sure what to drink");
    }
  }
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here
  if(eT == allCharacters && index == 3 && verb == "talk")//Mina
  {
    metMina = true;
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
    case 2:
      if(closeToTrain)
      {
        gameIsOver("Jonathan stood too close to the moving train");
      }
      break;
    case 3:
      if(closeToTrain)
      {
        player.Transparency = 100;
      }
      break;
  }
}
function room_LeaveBottom()
{
  dTravel.Start();
}

function approachTrain()
{
  String departureTime;
  String arrivalTime;
  int minutes;
  int hours;
  bool AMPM = false;
  int day;
  if(!player.HasInventory(iTicketLondon))
  {
    cExeterTrainOfficer.Say("Sir!");
    player.FaceCharacter(cExeterTrainOfficer);
    player.Walk(83, 174);
    player.Say("Me?");
    cExeterTrainOfficer.Say("You cannot go near the trains without a ticket, sir!");
    player.Say("Right. My mistake");    
  } else {
    departureTime = getTrainDepartureTime();
    if(!canPlayerBoardTrain(departureTime))
    {
      cExeterTrainOfficer.Say("Sir!");
      player.FaceCharacter(cExeterTrainOfficer);
      player.Walk(83, 174);
      player.Say("Me?");
      cExeterTrainOfficer.Say("Can I see you ticket, sir?");
      player.Walk(cExeterTrainOfficer.x, cExeterTrainOfficer.y, eBlock, eWalkableAreas);
      player.FaceCharacter(cExeterTrainOfficer);
      Wait(40);
      cExeterTrainOfficer.Say(String.Format("This is a ticket for the %s train, sir", departureTime));
      cExeterTrainOfficer.Say(String.Format("This is the %s train", getTrainInStation()));
      player.Say("Right. My mistake"); 
    } else
    {
      arrivalTime = getTrainArrivalTime(getTrainDepartureTime());
      minutes = translateTimeToMinutes(arrivalTime);
      hours = minutes/60;
      minutes = minutes - (hours*60);
      if(hours >= 12)
      {
        AMPM = true;
        if(hours == 12)
        {
          hours = hours - 12;
        }
      }
      FadeOut(5);
      setCurrentTime(hours, minutes, 0, AMPM, currentDay);
      travel_movePlayer(LondonTrainStation);
    }
  }
}

function room_FirstLoad()
{
  if(dMina.GetOptionState(7) == eOptionOn)
  {
    canWaitForMina = false;
    metMina = true;
  }
}

function room_Load()
{  
  cMina.Transparency = 100;
  cMina.Clickable = false;
  canWaitForMina = false;
  if(!metMina)
  {
    if(isItBeforeThisTime(1, 0, 0, true, 1) && !isItBeforeThisTime(10, 45, 0, false, 1))
    {
      cMina.Transparency = 0;
      cMina.Clickable = true;
      cMina.Say("Jonathan!");
      cMina.Say("Jonathan, over here!");
    } else if(isItBeforeThisTime(10, 45, 0, false, 1))
    {
      canWaitForMina = true;
    }
  }
  Wait(10);
  isAnyTrainInStation(false);
}

function setOpenClose(bool open)
{
  cafeClosed = !open;
  oMenu.Visible = open;
  oChair_Jonathan.Visible = open;
  oChair_Mina.Visible = open;
  oClosedSign.Visible = !open;
  if(open)
  {
    cExeterTrainOfficer.Transparency = 0;
  } else
  {
    cExeterTrainOfficer.Transparency = 100;
  }
}

function manageEntrance()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  setOpenClose(!state.StartsWith("Close"));
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  bool open = !state.StartsWith("Close");
  
  if(open == cafeClosed)
  {
    if(open)
    {
      cExeterTrainOfficer.SayBackground("The kiosk is opened!");
    } else
    {
      cExeterTrainOfficer.Say("Closing Time!");
    }
    
    FadeOut(5);
    setOpenClose(open);
    FadeIn(5);
  }
}

function room_RepExec()
{
  isAnyTrainInStation(true);
  manageClosingTime();
  if(!metMina && canWaitForMina)
  {
    if(isThisTimeWithinXminOfThisTime(whatTimeIsIt(false), translateTimeToHHMMAM(11, 10, "AM"), 25))//within 15 minutes of target time
    {
      
      if(Game.Camera.X < (cMina.x - (cMina.BlockingWidth/2) - Game.Camera.Width))
      {
        canWaitForMina = false;
        cMina.Clickable = true;
        cMina.Transparency = 0;
        cMina.Say("Jonathan!");
        player.FaceCharacter(cMina);
        cMina.Say("Jonathan! Over here!");
        player.Say("Mina has arrived to our rendez-vous!");
      } else
      {
        player.Say("Oh, look at the time!");
        player.Say("Mina and I have a daily rendezvous at the Station CafÃ© for some tea");
        player.Say("She will be here any minute now");
        player.Walk(oChair_Jonathan.X, oChair_Jonathan.Y, eBlock, eWalkableAreas);
        sit(roomObjects, 5, player, 2, false);
        FadeOut(4);
        canWaitForMina = false;
        cMina.Clickable = true;
        cMina.Transparency = 0;
        FadeIn(4);
        dMina.Start();
      }      
    }
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought);
  manageEntrance();
}

function region1_WalksOnto()
{
  approachTrain();
}

function region1_Standing()
{
  closeToTrain = true;
}

function region1_WalksOff()
{
  closeToTrain = false;
}
