bool closeToTrain = false;
bool cafeClosed;
bool unloaded = false;

function useCafe()
{
  String isItOpened = isThisPlaceOpened(TrainStation);
  player.gotoObject(oCafeEntrance);
  if(isItOpened.IndexOf("Closed") == -1)
  {
    if(player.isNearObject(oCafeEntrance))
    {
      player.Transparency = 100;
      dMenu.Start();
      player.FaceDirection(eDirectionDown);
      player.Transparency = 0;
    } else
    {
      player.Say("I need to be closer");
    }
  } else
  {
    player.Say(isItOpened);
  }
}

function KateArgument()
{
  int randValue = Random(10);
  switch(randValue)
  {
    case 0:
      cKate.sayBackgroundBacklog("I need to be on a train to London as soon as possible");
      break;
    case 1:
      cKate.sayBackgroundBacklog("No! I do not know what happened to my voucher");
      break;
    case 2:
      cKate.sayBackgroundBacklog("This trunk is massive! I cannot bring it with me!");
      break;
    case 3:
      cKate.sayBackgroundBacklog("I am a public servant, just like you!");
      break;
    case 4:
      cKate.sayBackgroundBacklog("Can't you make an exception just this once?");
      break;
    case 5:
      cKate.sayBackgroundBacklog("The train company will not go bankrupt because of one non paying traveller");
      break;
    case 6:
      cKate.sayBackgroundBacklog("I cannot believe there is no way to resolve this");
      break;
    case 7:
      cKate.sayBackgroundBacklog("Do you have a manager here?");
      break;
    case 8:
      cKate.sayBackgroundBacklog("What if I sneak in while you look away?");
      break;
    case 9:
      cKate.sayBackgroundBacklog("I had a voucher, it's like a prepaid ticket, no?");
      break;
    case 10:
      cKate.sayBackgroundBacklog("I do not believe I am being difficult");
      break;    
  }
  addTimedEventInXMinutes(1, "KateArgument");
}

function manageKate()
{
  if(getQuestLineVariant(14, 1) < 3 && getQuestLineVariant(14, 0) == 0)//The quest is available
  {
    cKate.FaceDirection(eDirectionUp);
    cKate.x  = 165;
    cKate.y = 178;
    cKate.Transparency = 0;
    oLuggage.Visible = true;
    KateArgument();
  } else
  {
    cKate.Transparency = 100;
    oLuggage.Visible = false;
  }
}

//######################################################## PARSE FUNCTIONS

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(((cmd.IndexOf("get") != -1 || cmd.IndexOf("take") != -1 || cmd.IndexOf("ask") != -1 || cmd.IndexOf("order") != -1) &&
  (cmd.IndexOf("coffee") != -1 || cmd.IndexOf("tea") != -1 || cmd.IndexOf("sandwich") != -1 || cmd.IndexOf("drink") != -1)) ||
  ((cmd.IndexOf("enter") != -1 || cmd.IndexOf("open") != -1 || cmd.IndexOf("use") != -1) &&
  (cmd.IndexOf("cafe") != -1 || cmd.IndexOf("cafÃ©") != -1 || cmd.IndexOf("shop") != -1)))
  {
    useCafe();
    sendBackToNormalParsing = false;
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  if((eT == roomObjects && index == 1 && verb == "open") ||
     (eT == roomObjects && index == 2 && (verb == "open" || verb == "look" || verb == "read")))// 1 is the cafe, 2 is menu
  {
    sendBackToNormalParsing = false;
    useCafe();
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
    case 2:
      if(closeToTrain)
      {
        gameIsOver("Jonathan stood too close to the moving train");
      }
      break;
    case 3:
      if(closeToTrain)
      {
        player.Transparency = 100;
      }
      break;
    case 4:
      KateArgument();
      break;
  }
}

function room_LeaveBottom()
{
  dTravel.Start();
}

function approachTrain()
{
  String departureTime;
  String arrivalTime;
  int minutes;
  int hours;
  bool AMPM = false;
  int day;
  if(!player.HasInventory(iTicketLondon))
  {
    cExeterTrainOfficer.Say("Sir!");
    player.FaceCharacter(cExeterTrainOfficer);
    player.Walk(83, 174);
    player.Say("Me?");
    cExeterTrainOfficer.Say("You cannot go near the trains without a ticket, sir!");
    player.Say("Right. My mistake");    
  } else {
    departureTime = getTrainDepartureTime();
    if(!canPlayerBoardTrain(departureTime))
    {
      cExeterTrainOfficer.Say("Sir!");
      player.FaceCharacter(cExeterTrainOfficer);
      player.Walk(83, 174);
      player.Say("Me?");
      cExeterTrainOfficer.Say("Can I see you ticket, sir?");
      player.Walk(cExeterTrainOfficer.x, cExeterTrainOfficer.y, eBlock, eWalkableAreas);
      player.FaceCharacter(cExeterTrainOfficer);
      Wait(40);
      cExeterTrainOfficer.Say(String.Format("This is a ticket for the %s train, sir", departureTime));
      cExeterTrainOfficer.Say(String.Format("This is the %s train", getTrainInStation()));
      player.Say("Right. My mistake"); 
    } else
    {
      arrivalTime = getTrainArrivalTime(getTrainDepartureTime());
      minutes = translateTimeToMinutes(arrivalTime);
      hours = minutes/60;
      minutes = minutes - (hours*60);
      if(hours >= 12)
      {
        AMPM = true;
        if(hours > 12)
        {
          hours = hours - 12;
        }
      }
      if(cMina.getPreviouslyTalkedTo())
      {
        player.FaceDirection(eDirectionRight);
        player.Say("Oh, I missed my rendezvous with Mina");
        player.Say("Hopefully she will understand");
        setTelegramInclusionByIndex("Mina", 2, true);//tell her of departure over telegram
        giveScoreOnce("Missed meeting with Mina", -2);
      }
      if(!player.HasInventory(iCamera))
      {
        player.Transparency = 100;
        Wait(30);
        player.Say("Oh no!");
        player.FaceDirection(eDirectionDown);
        Wait(50);
        player.Transparency = 0;
        player.Walk(player.x, player.y + 10, eBlock, eWalkableAreas);
        player.Say("I forgot to pick up the office's camera!");
        GiveScore(-1);
      } else
      {
        FadeOut(5);
        setCurrentTime(hours, minutes, 0, AMPM, currentDay);
        player.LoseInventory(iTicketLondon);
        embarkTrain();
        travel_movePlayer(LondonTrainStation, false);
      }
    }
  }
}

function room_FirstLoad()
{
}

function room_Load()
{  
  cKate.setColors();
  manageKate();
  closeToTrain = false;
  Wait(10);
  isAnyTrainInStation(Exeter, 10, cExeterTrainOfficer, false, 2);
}

function setOpenClose(bool open)
{
  cafeClosed = !open;
  oMenu.Visible = open;
  oClosedSign.Visible = !open;
  if(open)
  {
    cExeterTrainOfficer.Transparency = 0;
  } else
  {
    cExeterTrainOfficer.Transparency = 100;
  }
}

function manageEntrance()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  setOpenClose(!state.StartsWith("Close"));
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(getCurrentZone()));
  bool open = !state.StartsWith("Close");
  
  if(open == cafeClosed)
  {
    if(open)
    {
      cExeterTrainOfficer.SayBackground("The kiosk is opened!");
    } else
    {
      cExeterTrainOfficer.Say("Closing Time!");
    }
    
    FadeOut(5);
    setOpenClose(open);
    FadeIn(5);
  }
}

function room_RepExec()
{
  isAnyTrainInStation(Exeter, 10, cExeterTrainOfficer, true, 2);
  manageClosingTime();
  
  if(!oTrain.Animating && oTrain.View == 27 && !unloaded)
  {
    unloaded = true;
    cRandomMan1.makeSecCharAppearance(4, 2, eDirectionDown);
    Wait(2);
    cRandomWoman1.makeSecCharAppearance(1, 3, eDirectionDown);
    Wait(2);
    cRandomMan2.makeSecCharAppearance(5, 6, eDirectionDown);
  } else if (oTrain.Animating && oTrain.View == 27 && unloaded)
  {
    unloaded = false;
  }
  
  if(player.isSitting())
  {
    oCup_Jonathan.Visible = (player.getSeatIndex() == 4); //sat down at cafe table
  } else
  {
    oCup_Jonathan.Visible = false;
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
  manageEntrance();
}

function region1_WalksOnto()
{
  approachTrain();
}

function region1_Standing()
{
  closeToTrain = true;
}

function region1_WalksOff()
{
  closeToTrain = false;
}
