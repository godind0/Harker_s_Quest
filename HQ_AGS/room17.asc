// room script file
int readAboutFolklore;
String authorForPeople;
String authorForRegion;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  
  if(eT == roomHotspots && index <= 6 && verb == "look")
  {
    dBookshelves.Start();
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here 
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
    case 2:
      readAboutFolklore++;
      if(readAboutFolklore == 5)
      {
        if(Game.DoOnceOnly("Myths"))
        {
          player.Say("I read that every known superstition in the world is gathered into the horseshoe of the Carpathians");
          player.Say("It is as if it were the centre of some sort of imaginative whirlpool");
          player.Say("If so my stay may be very interesting");
          player.Say("I must ask the Count all about them.");
          GiveScore(3);
        }
      }
      break;
    case 3:
      player.Say("In the population of Transylvania there are four distinct nationalities");
      notableSay(player, "Populations", "Saxons in the South, and mixed with them the Wallachs, who are the descendants of the Dacians. Magyars in the West, and Szekelys in the East and North.", 3);
      player.Say("I am going among the latter, who claim to be descended from Attila and the Huns");
      player.Say("This may be so, for when the Magyars conquered the country in the eleventh century");
      player.Say("They found the Huns settled in it.");
      break;
    case 4:
      if(authorForPeople == "" || authorForPeople == "Boner")
      {
        authorForPeople = "Boner";
        CallRoomScript(3);
      }
      break;
    case 5:
      player.Say("I find that the district the Count named in his letter is in the extreme east of the country, just on the borders of three states");
      notableSay(player, "Region", "Transylvania, Moldavia and Bukovina are located in the midst of the Carpathian mountains", 3);
      player.Say("One of the wildest and least known portions of Europe");
      break;
    case 6:
      if(authorForRegion == "" || authorForRegion == "Crosse")
      {
        authorForRegion = "Crosse";
        CallRoomScript(5);
      } else if(authorForPeople == "" || authorForPeople == "Crosse")
      {
        authorForPeople = "Crosse";
        CallRoomScript(3);
      }
      break;
    case 7:
      if(authorForRegion == "" || authorForRegion == "Coxe")
      {
        authorForRegion = "Coxe";
        CallRoomScript(5);
      } else if(authorForPeople == "" || authorForPeople == "Coxe")
      {
        authorForPeople = "Coxe";
        CallRoomScript(3);
      }
      break;
    case 8:
      if(authorForRegion == "" || authorForRegion == "Mazuchelli")
      {
        authorForRegion = "Mazuchelli";
        CallRoomScript(5);
      } else if(authorForPeople == "" || authorForPeople == "Mazuchelli")
      {
        authorForPeople = "Mazuchelli";
        CallRoomScript(3);
      }
      break;
  }
}

function room_LeaveTop()
{
  player.ChangeRoom(9, 200, 135, eDirectionDown);
}

function room_AfterFadeIn()
{
  
}

function room_FirstLoad()
{
  readAboutFolklore = 0;
  authorForPeople = "";
  authorForRegion = "";
}
