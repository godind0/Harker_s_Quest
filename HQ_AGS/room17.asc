// room script file
int readAboutFolklore;

function filterBookshelf(Set* firstLetters)
{
  int nbOptions = dBookshelves.OptionCount;
  String optionText;
  int i;
  for(i = 1 ; i < nbOptions ; i++) // LAST OPTION IS LEAVE BOOKSHELF
  {
    dBookshelves.SetOptionState(i, eOptionOff);
    optionText = dBookshelves.GetOptionText(i);
    if(getProposedArchiveBook(i) && firstLetters.Contains(optionText.Truncate(1)))
    {
      dBookshelves.SetOptionState(i, eOptionOn);
    }
  }
  dBookshelves.SetOptionState(nbOptions, eOptionOn); // LAST OPTION IS LEAVE BOOKSHELF
  dBookshelves.Start();
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  Set* firstLetters = Set.Create(eSorted);
  String exclamation = "Let's see here... These are books from authors '# to @'"; 
  
  if(eT == roomHotspots && index <= 5 && verb == "look")
  {
    sendBackToNormalParsing = false;
    firstLetters.Clear();
    
    switch(index)
    {
      case 1:
        firstLetters.Add("A");
        firstLetters.Add("B");
        firstLetters.Add("C");
        firstLetters.Add("D");
        firstLetters.Add("E");
        exclamation = exclamation.Replace("#", "A", eCaseInsensitive);
        exclamation = exclamation.Replace("@", "E", eCaseInsensitive);
        break;
      case 2:
        firstLetters.Add("F");
        firstLetters.Add("G");
        firstLetters.Add("H");
        firstLetters.Add("E");
        firstLetters.Add("J");
        exclamation = exclamation.Replace("#", "F", eCaseInsensitive);
        exclamation = exclamation.Replace("@", "J", eCaseInsensitive);
        break;
      case 3:
        firstLetters.Add("K");
        firstLetters.Add("L");
        firstLetters.Add("M");
        firstLetters.Add("N");
        firstLetters.Add("O");
        exclamation = exclamation.Replace("#", "K", eCaseInsensitive);
        exclamation = exclamation.Replace("@", "O", eCaseInsensitive);
        break;
      case 4:
        firstLetters.Add("P");
        firstLetters.Add("Q");
        firstLetters.Add("R");
        firstLetters.Add("S");
        firstLetters.Add("T");
        exclamation = exclamation.Replace("#", "P", eCaseInsensitive);
        exclamation = exclamation.Replace("@", "T", eCaseInsensitive);
        break;
      case 5:
        firstLetters.Add("U");
        firstLetters.Add("V");
        firstLetters.Add("W");
        firstLetters.Add("X");
        firstLetters.Add("Y");
        firstLetters.Add("Z");
        exclamation = exclamation.Replace("#", "U", eCaseInsensitive);
        exclamation = exclamation.Replace("@", "Z", eCaseInsensitive);
        break;
      default:
        break;
    }
    player.Say(exclamation);
    filterBookshelf(firstLetters);
  } else if(eT == roomHotspots && index == 6 && verb == "look")//map
  {
    player.Say("This is a map of the Transylvanian region");
    sendBackToNormalParsing = false;
    if(playerHasSubitem("Dracula's Letter", iTelegrams))
    {
      if(Game.DoOnceOnly("Transylvian map"))
      {
        player.Say("I am not able to light the exact locality of the Castle Dracula on this map");
        player.Say("Of course it does not quite compare with our English Ordnance Survey maps");
        player.Say("I can find Bistritz, the post town named by Count Dracula in his letter, it is a fairly well-known place");
        GiveScore(3);
      }
    }
  } else if(eT == allCharacters && index == 10 && verb == "talk")
  {
    sendBackToNormalParsing = false;
    if(!playerHasSubitem("Dracula's Letter", iTelegrams))
    {
      player.Say("Hello");
      cLibrarian.Say("*whispering*[Low voice in the museum please");
      player.Say("*whispering*[Oh, sorry");
    } else
    {
      dLibrarian.Start();
    } 
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here 
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
    case 2:
      readAboutFolklore++;
      if(readAboutFolklore == 5)
      {
        if(Game.DoOnceOnly("Myths"))
        {
          player.Say("I read that every known superstition in the world is gathered into the horseshoe of the Carpathians");
          player.Say("It is as if it were the centre of some sort of imaginative whirlpool");
          player.Say("If so my stay may be very interesting");
          player.Say("I must ask the Count all about them.");
          GiveScore(3);
        }
      }
      break;
  }
}

function room_LeaveTop()
{
  player.ChangeRoom(17, 85, 167, eDirectionDown);
}

function room_AfterFadeIn()
{
  
}

function room_FirstLoad()
{
  readAboutFolklore = 0;
}
