// room script file
bool intro_opening = true;
bool chair_moved = false;
bool onChair = false;

//#################################################################################################### CLOTHES
function change_clothes()
{
  player.Walk(oClosetDoor.getObjectMidX(), oClosetDoor.Y, eBlock, eWalkableAreas);
  player.FaceDirection(eDirectionUp);
  if(!oClosetDoor.isThisOpened())
  {
    oClosetDoor.openObject();
  }    
  if(oTravelTrunk.Visible == true)
  {
    open_changeClothes_gui(true, true, true, true, true, false, 2); //(1_coat, 2_necktie, 3_shirt, 4_pants, 5_shoe, 6_hair)
  } else
  {
    player.Say("Everything is packed");
  }
}

function checkClothes()
{
  if(player.getWornClothesIndex(BP_coat) == -1)
  {
    player.Say("I need to put a coat on");
  } else if(player.getWornClothesIndex(BP_coat) != -1)
  {
    oBlueCoat.Visible = true;
    oBrownCoat.Visible = true;
    oYellowCoat.Visible = true;
    oRedCoat.Visible = true;
    oOrangeCoat.Visible = true;
    switch(player.getWornClothesIndex(BP_coat))
    {
      case getClothesIndex(BP_coat, "Blue"):
        oBlueCoat.Visible = false;
        break;
      case getClothesIndex(BP_coat, "Brown"):
        oBrownCoat.Visible = false;
        break;
      case getClothesIndex(BP_coat, "Yellow"):
        oYellowCoat.Visible = false;
        break;
      case getClothesIndex(BP_coat, "Red"):
        oRedCoat.Visible = false;
        break;
      case getClothesIndex(BP_coat, "Orange"):
        oOrangeCoat.Visible = false;
        break;
      default:
        break;
    }
    if(!player.isPlayerWearing(BP_coat, "Brown"))
    {
      player.Say("This coat might be a little too colorful for a normal day at the office");
    } else if(player.getWornClothesIndex(BP_necktie) == -1)
    {
      player.Say("I need to put on a tie");
    } else if(player.getWornClothesIndex(BP_pants) == -1)
    {
      player.Say("I need to put on some pants");
    } else if(player.getWornClothesIndex(BP_shoes) == -1)
    {
      player.Say("I need to put on shoes");
    } else if(player.getWornClothesIndex(BP_undershirt) == -1)
    {
      player.Say("I need to put on an undershirt");
    } else
    {
      player.Say("Now this is a proper work attire");
      modifyQuestNoteLineVariant(1, 1, 1);//properly dressed
      if(getQuestLineVariant(1, 2) == 1)//properly shaved
      {
        modifyQuestNoteLineVariant(1, 0, 3);//fully ready
      } else
      {
        modifyQuestNoteLineVariant(1, 0, 1);//must shave
      }
    }
  }
}

//#################################################################################################### CHAIR
function moveChair()
{
  if(player.isNearObject(oChair))
  {
    player.Walk(oChair.X, oChair.Y, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionRight);
    oChair.Move(152, 136, 5, eBlock, eAnywhere);
    oChair.Baseline = 127;
    chair_moved = true;
    RestoreWalkableArea(3);
  } else 
  {
    player.Say("I need to get closer");
  }
}

function climbOnChair()
{
  player.StopMoving();
  player.Walk(147, 135, eBlock, eWalkableAreas);
  player.Move(155, 129, eBlock, eAnywhere);
  player.FaceDirection(eDirectionRight);
  onChair = true;
  hRoom.Enabled = true;
  oMirror.SetProperty("Takable", 4);
}

function climbDownChair()
{
  player.FaceDirection(eDirectionDown);
  player.Move(157, 141, eBlock, eAnywhere);
  player.PlaceOnWalkableArea();
  onChair = false;
  hRoom.Enabled = false;
}

function interact_chair(String note)
{
  if(getQuestLineVariant(1, 2) == 3)//Get new mirror
  {
    if(!chair_moved)
    {
      if(note == "climb")
      {
        player.Say("I need to position the chair correctly first");
      } else 
      {
        moveChair();
      }
    } else
    {
      if(note == "climb")
      {
        if(!onChair)
        {
          climbOnChair();
        } else
        {
          climbDownChair();
        }
      } else if (note == "move")
      {
        player.Say("The chair is well positionned");
      }
    }
  } else
  {
    player.Say("The chair is fine as it is");
  }
}

function clean_mirror()
{
  if(player.HasInventory(iBroom))
  {
    if(player.isNearObject(oBrokenMirror, 20.0))
    {
      player.gotoObject(oBrokenMirror);
      oBrokenMirror.Visible = false;
      giveScoreOnce("cleaning mirror", 1);
      player.Say("There, all clean again");
    } else
    {
      player.Say("I need to get closer");
    }
  } else
  {
    player.Say("I am not touching broken glass with my bare hands");
  }
}

//#################################################################################################### OTHERS

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("clothes") != -1 || cmd.IndexOf("change") != -1)
  {
    if(player.isNearObject(oClosetDoor, 60.0))
    {
      change_clothes();
    }
    sendBackToNormalParsing = false;
  } else if((cmd.IndexOf("move") != -1 || cmd.IndexOf("push") != -1 || cmd.IndexOf("pull") != -1) && cmd.IndexOf("chair") != -1)
  {
    interact_chair("move");
    sendBackToNormalParsing = false;
  } else if((cmd.IndexOf("climb") != -1 || cmd.IndexOf("step") != -1) && cmd.IndexOf("chair") != -1)
  {
    sendBackToNormalParsing = false;
    interact_chair("climb");
  } else if(cmd.StartsWith("Wash") || cmd.StartsWith("Clean")) // wash or clean keyword
  {
    if(oBrokenMirror.Visible == true)
    {
      clean_mirror();
    } else
    {
      player.Say("What should I clean?");
    }
    sendBackToNormalParsing = false;
  }  
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 13 && verb == "take")//travel trunk
  {
    if(getStoryBeat() != packYourThings)
    {
      player.Think("I see no reason to take this with me, right now");
      sendBackToNormalParsing = false;
    }
  } else if (eT == roomObjects && index == 2 && verb == "take" && !onChair && getQuestLineVariant(1, 2) == 3)
  {
    player.Say("I cannot reach the shelf");
    player.Say("I'll need something to climb onto");
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if (eT == roomObjects && index == 12 && verb == "take")//take notebook
  {
    if(player.HasInventory(iNotebook))
    {
      Display("When something notable is thought or said, you will see an asterisk (*) at the end of the sentence. Write the 'Note' command to add it to your notebook.");
      btnNoteBook.Visible = true;
      addToVerbDictionary("note");
    }
  } else if(eT == roomObjects && index == 13 && verb == "take")//travel trunk
  {
    if(getStoryBeat() == packYourThings)
    {
      player.Say("Let's pack everything");
      oBlueCoat.Visible = false;
      oBrownCoat.Visible = false;
      oYellowCoat.Visible = false;
      oRedCoat.Visible = false;
      oOrangeCoat.Visible = false;
      oTravelTrunk.Visible = false;
      player.AddInventory(iTrunk);
      giveScoreOnce(iTrunk.Name, 1);
      playConfirm();
    }
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  int xTarget = mouse.x;
  int yTarget = mouse.y;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
    case 2:
      checkClothes();
      break;
    case 3:
      //click somewhere
      //debugDisplay("click");
      if(onChair && Hotspot.GetAtRoomXY(xTarget, yTarget) == hRoom)
      {
        climbDownChair();
        player.Walk(xTarget, yTarget, eNoBlock, eWalkableAreas);
      } else if (chair_moved && Object.GetAtRoomXY(xTarget, yTarget) == oChair)
      {
        climbOnChair();
      }
      break;
  }
}

function room_FirstLoad()
{
  addTravelDestination(JonathanApt);
  addTravelDestination(HawkinsOffices);
  
  setStoryBeat(startYourDay);
  setCurrentZone(JonathanApt);
  
  RemoveWalkableArea(3);
  
  player.sit(oBed, true);
  
  Display("JONATHAN HARKERâ€™S JOURNAL[(Kept in shorthand.)[23 april. Exeter");
  String diaryContent = "23 april. Exeter. Just got assigned my 100th property contract tonight. This means that I fulfilled the last requirement before taking my sollicitor exam. I will have to plan a trip to London soon to visit the Law Society and arrange for it. This is most thrilling. Once the exam is over, I will be one major sale away from secure finances. Then, Mina and I can finally marry. That wedding will be a grand expensive one that will be the talk of London. It is late already but I cannot sleep. Maybe I will light a candle and work tonight at my home desk until I am done.";
  createBook("Diary", diaryContent, " ",  " ");
  show_book_gui("Diary");
}

function room_RepExec()
{
  if(intro_opening && !gBook.Visible)
  {
    FadeOut(5);
    gDark.Transparency = 100;
    FadeIn(5);
    triggerCutscene(beginQuest);
    intro_opening = false;
  }
}

function region1_WalksOnto()
{
  player.ChangeRoom(1, 64, 172, eDirectionRight);
}

function room_Load()
{
  //hRoom.Enabled = false;
  if(getGottaSleep())
  {
    hasSlept();
  }
}

function oChair_Interact()
{
  if(!chair_moved)
  {
    interact_chair("move");
  } else
  {
    interact_chair("climb");
  }
}

function oMirror_UseInv()
{
  elementType useET = getETOfElementUsed();
  int useIndex = getIndexOfElementUsed();
  
  if(useET == allInventoryItems && useIndex == 44) // broom
  {
    if(player.isNearObject(oMirror, 60.0))
    {
      Display("*Thud*");
      oMirror.Visible = false;
      playCancel();
      Display("*Krish*");
      oBrokenMirror.Visible = true;
      player.Say("Oh come on!");
      player.Say("Well there goes any hopes of shaving this morning");
      player.Say("I have to clean this glass up");
      modifyQuestNoteLineVariant(1, 2, 2);
    } else
    {
      player.Say("I am too far away");
    }
  }
}

function region4_WalksOnto()
{
  if(oBrokenMirror.Visible == true)
  {
    if(player.getWornClothesIndex(BP_shoes) == -1)
    {
      player.Say("OWWWWWWWW!");
      gameIsOver("Jonathan stepped barefoot in broken glass and had to call in sick");
    } else
    {
      player.Say("Arg. . . I got broken glass stuck in my shoe sole. . .");
      GiveScore(-1);
    }
  }
}

function hRoom_AnyClick()
{
  
}
