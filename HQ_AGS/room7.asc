// room script file
//TO DO
//TO TEST: lire bible
//TO TEST: récupérer la clé dans le sundial
//TO TEST: on devrait pouvoir remettre la clé en place

bool fromInsideGate;
bool seenBible = false;
bool isReadingBibleSection = false;
bool foundBibleRef = false;
bool foundKeyOnce = false;
String proposedMeatTime;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(!foundKeyOnce)
  {
    if(cmd.IndexOf("8") != -1 || cmd.IndexOf("eight") != -1)
    {
      proposedMeatTime = "8";
    } else if(cmd.IndexOf("6") != -1 || cmd.IndexOf("six") != -1)  
    {
      proposedMeatTime = "6";
    } else if(cmd.IndexOf("5") != -1 || cmd.IndexOf("five") != -1)
    {
      proposedMeatTime = "5";
    } else if(cmd.IndexOf("7") != -1 || cmd.IndexOf("seven") != -1)
    {
      proposedMeatTime = "7";
    } else {
      proposedMeatTime = "12";
    }
  }
  
  
  if(cmd.IndexOf("key") != -1)
  {
    if((cmd.IndexOf("insert") != -1 || cmd.IndexOf("put") != -1 || cmd.IndexOf("back") != -1 || cmd.IndexOf("use") != -1) && 
        player.HasInventory(iPadlockKey))
    {
      if(player.isNearHotspot(hSundial, 30.0))
      {
        player.Walk(hSundial.WalkToX, hSundial.WalkToY, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionUp);
        player.Say("That was a useful little treasure hunt");
        player.Say("Hopefully it will delight the new owner!");
        Display("Jonathan puts the padlock key back in the secret compartment");
        player.LoseInventory(iPadlockKey);
      }
    } else if ((cmd.IndexOf("take ") != -1 || cmd.IndexOf("get ") != -1 || cmd.IndexOf("pick ") != -1) &&
                !player.HasInventory(iPadlockKey))
    {
      Display("Click![Jonathan takes the key back");
      player.AddInventory(iPadlockKey);
    }
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomHotspots && index == 2 && (verb == "read" || verb == "look")) // read bible
  {
    sendBackToNormalParsing = false;
    if(oRopeDoor.isThisOpened())
    {
      if(player.isNearHotspot(hBible))
      {
        dBible.Start();
      } else
      {
        player.Say("I cannot read it from here");
      }
    } else
    {
      if(seenBible)
      {
        player.Say("I need to open the panel first");
      } else
      {
        player.Say("I am not sure what to do");
      }
    }
  } else if(eT == roomHotspots && index == 3) // ropes
  {
    sendBackToNormalParsing = false;
    if(oRopeDoor.isThisOpened())
    {
      if(player.isNearHotspot(hBellRopes))
      {
        Display("DING! DONG-DING! DONG!");
        player.Say("Well. . . that bell works");
      } else
      {
        player.Say("I cannot reach it from here");
      }
    } else
    {
      if(seenBible)
      {
        player.Say("I need to open the panel first");
      } else
      {
        player.Say("I am not sure what to do");
      }
    }
  } else if(eT == roomHotspots && index == 1 && foundBibleRef) // sundial
  {
    sendBackToNormalParsing = false;
    if(!foundKeyOnce)
    {
      foundKeyOnce = true;
      String newAlternateNamesString = "clock, dial, ##, horloge";
      newAlternateNamesString = newAlternateNamesString.Replace("##", proposedMeatTime);
      hSundial.SetTextProperty("alternateNames", newAlternateNamesString);
      player.Say("'. . .a faithful and wise servant, whom his lord hath made ruler over his household, to give them meat at the proper time?'");
      player.Say(String.Format("%s o'clock?", proposedMeatTime));
      player.Say(String.Format("Maybe it has something to the sundial's %s?", proposedMeatTime));
      Display("Click!");    
      player.Say(String.Format("Splendid! There is a secret compartment under the %s!", proposedMeatTime));
      player.Say("There was a small padlock key in it!");
      player.AddInventory(iPadlockKey);
      giveScoreOnce(iPadlockKey.Name, 2);
    } else if (!player.HasInventory(iPadlockKey))
    {
      Display("Click![Jonathan takes the key back");
      player.AddInventory(iPadlockKey);      
    } else
    {
      player.Say("There is nothing else of interest there");
    }
  } else if(eT == roomHotspots && index == 4) // chapel door
  {
    sendBackToNormalParsing = false;
    player.FaceLocation(hChapelDoor.WalkToX, hChapelDoor.WalkToY, eBlock);
    player.Say("I should not mess with parts of the properties if I do not need to");
    player.Say("Everything is so old, here");
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 0 && verb == "open") // open the panel (rope door)
  {
    if(!seenBible)
    {
      seenBible = true;
      player.Say("That is the hatch allowing access to the bell ropes");
      player.Say("And there is an old musty bible hidden in there");
      player.Say("No doubt to recite verses while rigning the bell");
      player.Say("It is opened at Psalm 26");
    }
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}
function room_AfterFadeIn()
{
  musicInRoom(aDeambulation, 1);
  
  if(player.y > 183)
  {
    fromInsideGate = false;
  } else
  {
    fromInsideGate = true;
  }
}

function room_LeaveRight()
{
  if(fromInsideGate)
  {
    player.ChangeRoom(15, 30, 210, eDirectionRight);
  } else
  {
    player.ChangeRoom(15, 30, 295, eDirectionRight);
  }
}

function room_RepExec()
{
  if(gBook.Visible && lblBookTitle.Text == "Matt24:30-51" && !isReadingBibleSection && !foundBibleRef)
  {
    isReadingBibleSection = true;
  } else if (!gBook.Visible && isReadingBibleSection && !foundBibleRef){
    int pageOfVerse45 = findPageByExpressionInCurrentBook("(45)");
    isReadingBibleSection = false;
    if(isThisPageReadInCurrentBook(pageOfVerse45) && isThisPageReadInCurrentBook(pageOfVerse45 + 1))//Verse 45 is split on two pages.
    {
      foundBibleRef = true;
      player.Say("Matthew 24:45 was. . .");
      player.Say("'Who then is a faithful and wise servant, whom his lord hath made ruler over his household, to give them meat at the proper time?'");
      player.Say("I wonder why this could be important. . .");
    }
  }
}
