/*TO IMPLEMENT
Look at drawers
GUI Z-ORDER : 0 = gameplay (gDark) ; 1 = semi-gameplay (Status Line) ; 2 = main guis ; 3 = precise gui ; 5 : Consultation (4 is the bg)
*/

// main global script file
#define WALK_SPEED 5
#define NUMBEROFROOMS 17
#define PROPERTIESPERSECTOR 3
#define STANDARDTIMEINCREMENT 4
#define MAXNEGATIVE 10

#define FIRSTDAY_DAY 23
#define FIRSTDAY_MONTH 4
#define FIRSTDAY_YEAR 1893
#define MAX_CLOUDINESS 50

#define SKIPCUTSCENES false
#define ACTIVATEDEBUGTOOL true

AudioChannel* bgMusic;
int playingMusic = 0;

int cloudiness = 0;
bool adjustForDarkness = false;

Dictionary* verbDictionary;
Dictionary* verbDescriptionDictionary;
int notes_counter = 0;
Dictionary* notes_titles;
Dictionary* notes_message;
Dictionary* notes_seen;
Dictionary* notes_quest;
Set* afterNotebookThoughts;

Dictionary* quests[];

Dictionary* timedEvents;
bool gottaSleep;
bool handlingTriggeredEvent;

Dictionary* telegramRecipient_alternateNames;
Dictionary* telegramRecipient_recipientDescription;
Dictionary* telegramRecipient_signOff;
Dictionary* telegramRecipient_messageParts_include;
Dictionary* telegramRecipient_messageParts;
Dictionary* telegramAnswer_messageParts_include;
Dictionary* telegramAnswer_messageParts;
Dictionary* telegram_description;
Dictionary* telegram_notes;
Dictionary* hotelPackages_description;
Dictionary* hotelPackages_notes;

Dictionary* commerce_openingTime;
Dictionary* commerce_closingTime;
Dictionary* commerce_rebuteWhenClosed;
Dictionary* zone_CommerceType;

Dictionary* hawkinsLedgerCity;
Dictionary* hawkinsLedgerSector;
Dictionary* hawkinsLedgerPropertyAge;
String ledgerReadText;
Dictionary* hawkinsRequestCity;
Dictionary* hawkinsRequestSector;
Dictionary* hawkinsRequestPropertyAgeMin;
Dictionary* hawkinsRequestPropertyAgeMax;
Dictionary* hawkinsRequestMessage;
Set* hawkinsRequesters;
String proposedSeller;
String carfaxSeller;
int nbNegatives;

Dictionary* exam_ActualAnswers;
Dictionary* exam_SubmittedAnswers;

Dictionary* trainTimeTableSorter;
Dictionary* trainTimetableOrigin;//key is departure time
Dictionary* trainTimetableDestination;//key is departure time
Dictionary* trainTimetableArrivalTimes;//key is departure time
bool trainScheduleCreated = false;
bool trainDepartureAnnounced = false;
Set* availableTrainDestination;
String trainDepartureTime;
String trainInStation;

Set* availableDestinations;
Dictionary* roomForEachTravelDestinations;
Dictionary* x_TravelDestinations;
Dictionary* y_TravelDestinations;
Dictionary* city_TravelDestinations;
Dictionary* cabSellMsg_TravelDestinations;
int arrival_x[];
int arrival_y[];
String interiorORexterior[];
CharacterDirection faceDirection[];
int exeterTravelDistanceMultiplier;
int londonTravelDistanceMultiplier;
String cabbyPropositions[];
zone currentZone;
commerce currentCommerceType;
zone wantedDestination;
zone realDestination;
bool travelling = false;

Dictionary* food_description;
Dictionary* food_notes;
Dictionary* food_spoilTime;
Dictionary* food_alternateNames;

Dictionary* books_description;
Dictionary* books_notes;
Dictionary* books_separator;
Dictionary* books_reunitor;
Dictionary* currentBookContentByPage;
bool currentBook_pagesRead[];

bool proposedArchiveBooks[];

Dictionary* film_description;
Dictionary* film_notes;
Dictionary* subFilm_description;
Dictionary* subFilm_notes;
Dictionary* photo_description;
Dictionary* photo_notes;
Dictionary* saleDossier_description;
Dictionary* saleDossier_notes;
Dictionary* saleDossier_solution;

Dictionary* legalPapers_description;
Dictionary* legalPapers_notes;
Dictionary* legalPapers_solution;

Dictionary* britishMuseumBooks_author;
Dictionary* britishMuseumBooks_comment;
Dictionary* britishMuseumBooks_notes;

String signedMsgRep;
String signedMsgSol;

int coachView_empty;
int coachView_harker;
int coachView_full;

DynamicSprite* changedCharViewSprites[];
int oldCharViewSprites[];

bool checkSayBackground = false;
Dictionary* backgroundThingsToSay;
Overlay* backgroundSayOverlay_active[20];
int backgroundSayIndex = 0;

float reachDistance = 40.0;
String lastCMD;
int nbFrameInSittingAnim;
int loopPerSecond;
int currentTimeIncrementPerLoop = STANDARDTIMEINCREMENT;
float timeUITransparency;
float timeUIFadeSpeed = 0.1;

bool debugTools;
bool skipAllCutscene;

int useIndex;
elementType useET;

int lastClickX;
int lastClickY;
int lastClickRoom;
String lastInsertedVerb;
String lastInsertedObjectName;
String lastInsertedUseOnName;
bool isLastInsertedObjectAnInvItem = false;

Set* characterIndextoManage;

int lastMealTime;
int lastSleepTime;
bool isOnTrain = false;
bool morseCodeState[6];

Dictionary* interactableObjectsPerRoom[17];

// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);
}

// initialize gPanel
function initialize_control_panel()
{
  set_default_options();
}

// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  if (gui_to_open != gInventory)
  {
    lblOverHotspot.Visible = false;
  }
  
  if(gui_to_open.ZOrder == 5)
  {
    gGUIbg.Transparency = 50;
    gGUIbg.Visible = true;
  }

  //gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
}

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  gui_to_close.Visible = false;
  gGUIbg.Visible = false;
  mouse.UseDefaultGraphic();
  lblOverHotspot.Visible = true;
  //gIconbar.Visible = true;
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function linkNoteToQuest(int noteIndex, int questIndex)
{
  String noteIndexS = String.Format("%09d", noteIndex);
  String questIndexS = String.Format("%d", questIndex);
  notes_quest.Set(noteIndexS, questIndexS);
}

function createANote(String noteTitle, String noteMessage)
{
  String noteIndex = String.Format("%09d", notes_counter);
  if(noteTitle != "" && noteMessage != "")
  {
    notes_titles.Set(noteIndex, noteTitle);
    notes_message.Set(noteIndex, noteMessage);
    notes_seen.Set(noteIndex, "false");
    notes_quest.Set(noteIndex, "Null");
    notes_counter++;
  } else
  {
    player.Say("I don't have anything to note yet");
  }
}

// called when the game starts, before the first room is loaded
function game_start()
{
  // initialize gPanel controls
  initialize_control_panel();

  // set KeyboardMovement movement mode
  KeyboardMovement.Mode = eKeyboardMovementModeTapping;
  
  lastCMD = "";
  nbFrameInSittingAnim = 2;
  loopPerSecond = 40;
  
  player.Transparency = 100;
  mouse.Mode = eModePointer;
  
  currentTime = ((9 * 3600) + (0 * 60) + (0)) * loopPerSecond;
  timeUITransparency = 200.0;
  lblCurrentThought.Transparency = 100;
  
  lastClickX = 100000;
  lastClickY = 100000;
  lastClickRoom = -1;
  
  lastInsertedVerb = "";
  lastInsertedObjectName = "";
  lastInsertedUseOnName = "";
  
  characterIndextoManage = Set.Create(eNonSorted);
  
  //debug variables
  debugTools = ACTIVATEDEBUGTOOL;
  skipAllCutscene = SKIPCUTSCENES;
  
  //Beard code
  cHarkersBeard.Transparency = 100;
  cHarkersBeard.ChangeRoom(cHarker.Room, cHarker.x, cHarker.y, eDirectionDown);
  cHarkersBeard.FollowCharacter(cHarker, FOLLOW_EXACTLY);
  
  int neededSlots = 100 * Game.CharacterCount;
  changedCharViewSprites = new DynamicSprite[neededSlots];
  oldCharViewSprites = new int[neededSlots];
  
  availableDestinations = Set.Create(eSorted);
  roomForEachTravelDestinations = Dictionary.Create(eSorted);
  x_TravelDestinations = Dictionary.Create(eSorted);
  y_TravelDestinations = Dictionary.Create(eSorted);
  city_TravelDestinations = Dictionary.Create(eSorted);
  cabSellMsg_TravelDestinations = Dictionary.Create(eSorted);
  exeterTravelDistanceMultiplier = 8;
  londonTravelDistanceMultiplier = 16;
  arrival_x = new int[NUMBEROFROOMS+1];
  arrival_y = new int[NUMBEROFROOMS+1];  
  interiorORexterior = new String[NUMBEROFROOMS+1];
  faceDirection = new CharacterDirection[NUMBEROFROOMS+1];
  
  coachView_empty = 11;
  coachView_harker = 12;
  coachView_full = 13;
  
  morseCodeState[0] = false;//heard
  morseCodeState[1] = false;//noted
  morseCodeState[2] = false;//read
  morseCodeState[3] = false;//poster
  morseCodeState[4] = false;//decoding
  morseCodeState[5] = false;//got 'gram
  
  int roomIndex;
  
  roomIndex = 1; //Jonathan's apartment 
  arrival_x[roomIndex] = 177;
  arrival_y[roomIndex] = 154;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 2; //Hawkins Office
  arrival_x[roomIndex] = 154;
  arrival_y[roomIndex] = 163;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionUp;
  
  roomIndex = 3; // Train station and caf√© - Exeter
  arrival_x[roomIndex] = 345;
  arrival_y[roomIndex] = 185;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 4; // Hotel reception
  arrival_x[roomIndex] = 182;
  arrival_y[roomIndex] = 174;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionUp;
  
  roomIndex = 5; // Train station and cabby - London
  arrival_x[roomIndex] = 117;
  arrival_y[roomIndex] = 187;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionRight;
  
  roomIndex = 6;//Purfleet road
  arrival_x[roomIndex] = 228;
  arrival_y[roomIndex] = 185;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 7; // NA
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 8; // telegram
  arrival_x[roomIndex] = 56;
  arrival_y[roomIndex] = 147;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 9;//British museum _ collection
  arrival_x[roomIndex] = 200;
  arrival_y[roomIndex] = 167;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 10; // Law Society
  arrival_x[roomIndex] = 265;
  arrival_y[roomIndex] = 151;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 11; // NA
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 12; // NA
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 13; // NA
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 14; // Carfax front
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 15; // Carfax side,  left
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 16; // Carfax side,  right
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "exterior";
  faceDirection[roomIndex] = eDirectionDown;
  
  roomIndex = 17; // British archive
  arrival_x[roomIndex] = 0;
  arrival_y[roomIndex] = 0;
  interiorORexterior[roomIndex] = "interior";
  faceDirection[roomIndex] = eDirectionDown;
  
  backgroundThingsToSay = Dictionary.Create(eSorted);
  
  hawkinsLedgerCity = Dictionary.Create(eSorted);
  hawkinsLedgerSector = Dictionary.Create(eSorted);
  hawkinsLedgerPropertyAge = Dictionary.Create(eSorted);
  ledgerReadText = "";
  hawkinsRequestCity = Dictionary.Create(eSorted);
  hawkinsRequestSector = Dictionary.Create(eSorted);
  hawkinsRequestPropertyAgeMin = Dictionary.Create(eSorted);
  hawkinsRequestPropertyAgeMax = Dictionary.Create(eSorted);
  hawkinsRequestMessage = Dictionary.Create(eSorted);
  hawkinsRequesters = Set.Create(eSorted);
  nbNegatives = 10;
  
  exam_ActualAnswers = Dictionary.Create(eNonSorted);
  exam_SubmittedAnswers = Dictionary.Create(eNonSorted);
  
  timedEvents = Dictionary.Create(eSorted);
  handlingTriggeredEvent = false;
    
  notes_titles = Dictionary.Create(eSorted);
  notes_message = Dictionary.Create(eSorted);
  notes_seen = Dictionary.Create(eSorted);
  notes_quest = Dictionary.Create(eSorted);
  afterNotebookThoughts = Set.Create(eNonSorted);
  createANote("How to use", "When something notable is thought or said, you will see an asterisk (*) at the end of the sentence. Write the 'Note' command to add it to your notebook.");
  createANote("Mina - tea", "Meet Mina at Station caf√© for tea at 11AM.");
  createANote("Legal Papers", "I need to bring the legal contracts to my employer, Mr. Hawkins, before 10 am.");
  
  quests = new Dictionary[100];
  for(int i = 0 ; i < 100 ; i++)
  {
    quests[i] = Dictionary.Create(eSorted);
  }
  
  telegramRecipient_alternateNames = Dictionary.Create(eNonSorted);
  telegramRecipient_recipientDescription = Dictionary.Create(eNonSorted);
  telegramRecipient_signOff = Dictionary.Create(eNonSorted);
  telegramRecipient_messageParts = Dictionary.Create(eSorted);
  telegramRecipient_messageParts_include = Dictionary.Create(eSorted);
  telegramAnswer_messageParts_include = Dictionary.Create(eSorted);
  telegramAnswer_messageParts = Dictionary.Create(eSorted);
  telegram_description = Dictionary.Create(eNonSorted);
  telegram_notes = Dictionary.Create(eNonSorted);
  hotelPackages_description = Dictionary.Create(eNonSorted);
  hotelPackages_notes = Dictionary.Create(eNonSorted);
  
  commerce_openingTime = Dictionary.Create(eNonSorted);
  commerce_closingTime = Dictionary.Create(eNonSorted);
  commerce_rebuteWhenClosed = Dictionary.Create(eNonSorted);
  zone_CommerceType = Dictionary.Create(eNonSorted);
  
  food_description = Dictionary.Create(eSorted);
  food_notes = Dictionary.Create(eSorted);
  food_spoilTime = Dictionary.Create(eSorted);
  food_alternateNames = Dictionary.Create(eSorted);
  
  books_description = Dictionary.Create(eSorted);
  books_notes = Dictionary.Create(eSorted);
  books_reunitor = Dictionary.Create(eSorted);
  books_separator = Dictionary.Create(eSorted);
  currentBookContentByPage = Dictionary.Create(eSorted);
  
  proposedArchiveBooks = new bool[7];
  proposedArchiveBooks[0] = false;//dummy item,  dialog options start at 1
  proposedArchiveBooks[1] = false;
  proposedArchiveBooks[2] = false;
  proposedArchiveBooks[3] = false;
  proposedArchiveBooks[4] = false;
  proposedArchiveBooks[5] = false;
  proposedArchiveBooks[6] = false;
  
  britishMuseumBooks_author = Dictionary.Create(eSorted);
  britishMuseumBooks_comment = Dictionary.Create(eSorted);
  britishMuseumBooks_notes = Dictionary.Create(eSorted);
  
  legalPapers_description = Dictionary.Create(eNonSorted);
  legalPapers_notes = Dictionary.Create(eNonSorted);
  legalPapers_solution = Dictionary.Create(eSorted);
  legalPapers_solution.Set("01", "Title page");
  legalPapers_solution.Set("02", "Articles");
  legalPapers_solution.Set("03", "Signatures");
  
  signedMsgRep = "I signed those documents as the solicitor representative";
  signedMsgSol = "I signed those documents as the solicitor";
  
  photo_description = Dictionary.Create(eNonSorted);
  photo_notes = Dictionary.Create(eNonSorted);
  film_description = Dictionary.Create(eNonSorted);
  film_notes = Dictionary.Create(eNonSorted);
  subFilm_description = Dictionary.Create(eNonSorted);
  subFilm_notes = Dictionary.Create(eNonSorted);
  saleDossier_description = Dictionary.Create(eNonSorted);
  saleDossier_notes = Dictionary.Create(eNonSorted);
  saleDossier_solution = Dictionary.Create(eSorted);
  saleDossier_solution.Set("001", "Title page");
  saleDossier_solution.Set("002", "Conditions");
  saleDossier_solution.Set("003", "Property deed");
  saleDossier_solution.Set("004", "Carfax's Bedroom");
  saleDossier_solution.Set("005", "Carfax's Dining");
  saleDossier_solution.Set("006", "Carfax's Kitchen");
  saleDossier_solution.Set("007", "Carfax's Living");
  saleDossier_solution.Set("008", "Property survey");
  saleDossier_solution.Set("009", "Sales and advertisement");
  saleDossier_solution.Set("010", "Tenants and Leases");
  saleDossier_solution.Set("011", "Labour book");
  saleDossier_solution.Set("012", "Signatures");
  
  verbDictionary = Dictionary.Create(eNonSorted, eCaseInsensitive);
  verbDictionary.Set("look", "look");
  verbDictionary.Set("search", "look");
  verbDictionary.Set("peek", "look");
  verbDictionary.Set("use", "use");
  verbDictionary.Set("examine", "look");
  verbDictionary.Set("open", "open");
  verbDictionary.Set("close", "close");
  verbDictionary.Set("go to", "approach");
  verbDictionary.Set("approach", "approach");
  verbDictionary.Set("talk", "talk");
  verbDictionary.Set("speak", "talk");
  verbDictionary.Set("take", "take");
  verbDictionary.Set("get", "take");
  verbDictionary.Set("pick up", "take");
  verbDictionary.Set("read", "read");
  verbDictionary.Set("sit", "sit");
  verbDictionary.Set("stand", "stand");
  verbDictionary.Set("organize", "organize");
  verbDictionary.Set("classify", "organize");
  verbDictionary.Set("eat", "eat");
  verbDictionary.Set("consume", "eat");
  
  verbDictionary.Set("debugadditem", "debugadditem");
  
  verbDescriptionDictionary = Dictionary.Create(eSorted, eCaseInsensitive);
  verbDescriptionDictionary.Set("look", "Look at something or someone in the room (or at one of your inventory items.[[EXAMPLE: Look carpet");
  verbDescriptionDictionary.Set("use", "Use an item from your inventory or an object in the room near you. Sometimes, you must specify on what or on whom you use the object.[[EXAMPLE 1: Use sink[[EXAMPLE 2: Use razor on myself");
  verbDescriptionDictionary.Set("open", "Open an object near you or an item from your inventory.[[EXAMPLE: Open front door");
  verbDescriptionDictionary.Set("close", "Close an object near you or an item from your inventory.[[EXAMPLE: Close bedroom door");
  verbDescriptionDictionary.Set("*approach", "Have Jonathan walk over to something or someone.[[Only works if 'Show hints' is chosen from the option panel.[[EXAMPLE: Approach dining table");
  verbDescriptionDictionary.Set("talk", "Talk to someone in the room.[Sometimes, you need to be near someone to talk to them.[[EXAMPLE: Talk to Count");
  verbDescriptionDictionary.Set("take", "Pick up an object and place it in your inventory.[[EXAMPLE: Take razor");
  verbDescriptionDictionary.Set("read", "Read something.[Not all items can be read.[[EXAMPLE: Read ledger");
  verbDescriptionDictionary.Set("sit", "Have Jonathan sit down in a nearby chair or appropriate surface.[Jonathan will not sit on any surface.[[EXAMPLE: Sit on bench");
  verbDescriptionDictionary.Set("spot", "Have Jonathan point out objects, people and inventory items that contain a certain word in its name.[[EXAMPLE: Spot door");
  verbDescriptionDictionary.Set("stand", "Have Jonathan stand up.[[EXAMPLE: Stand up");
  verbDescriptionDictionary.Set("organize", "Have Jonathan organize items.[Only classifiable items can be organized.[[EXAMPLE: Organize legal papers");
  verbDescriptionDictionary.Set("eat", "Have Jonathan eat something.[Only food items can be eaten.[Pay attention to the freshness of food.[[EXAMPLE: Eat tea sandwich");
    
  int i;
  String myVerbs[] = verbDescriptionDictionary.GetKeysAsArray();
  
  for(i = 0; i < verbDescriptionDictionary.ItemCount; i++)
  {
    lbVerbs.AddItem(myVerbs[i]);
  }
  lblHelpVerbDesc.Text = verbDescriptionDictionary.Get(lbVerbs.Items[lbVerbs.TopItem]);
  
  for(i = 0 ; i < 17 ; i++)
  {
    interactableObjectsPerRoom[i] = Dictionary.Create(eSorted);
  }
}

bool getSkipCutscene()
{
  return skipAllCutscene;
}

bool getPreviouslyTalkedTo(Character* thisChar)
{
  return thisChar.GetProperty("PreviouslyTalkedTo");
}

function setPreviouslyTalkedTo(Character* thisChar,  bool newPTT)
{
  thisChar.SetProperty("PreviouslyTalkedTo", newPTT);
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
  switch(param)
  {
    default:
      break;
  }
  
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

//################## DEBUG DISPLAY FUNCTION ####################################

function debugDisplay(String message) // Display used for debug so we can turn them off safely for the release candidate
{
  if(debugTools){
    Display(message);
  }
}

function setDebugFromHere(bool targetBool)
{
  debugFromHere = targetBool;
}

function debugDisplayFromHere(String message)
{
  if(debugFromHere)
  {
    debugDisplay(message);
  }
}

//################## STRING CUSTOM FUNCTIONS ####################################

String keycodeToString(char typeCharacter) // returns the symbol associated with the code (e.g.: 65 => A)
{
  return String.Format("%c",  typeCharacter);
}

String etToString(elementType eT) // changes the element type enum (roomObject,  AllInventoryItem,  roomHotspot and allCharacters) to a String
{
  switch(eT)
  {
    case roomObjects:
      return "roomObjects";
      break;
    case roomHotspots:
      return "roomHotspots";
      break;
    case allCharacters:
      return "allCharacters";
      break;
    case allInventoryItems:
      return "allInventoryItems";
      break;
    default:
      //debugDisplay(String.Format("Fxn etToString received element type #%d, out of bounds.", eT));
      break;
  }
}

elementType stringToET(String eT) // changes the String to the element type enum spelled out (roomObject,  AllInventoryItem,  roomHotspot and allCharacters)
{
  switch(eT)
  {
    case "roomObjects":
      return roomObjects;
      break;
    case "roomHotspots":
      return roomHotspots;
      break;
    case "allCharacters":
      return allCharacters;
      break;
    case "allInventoryItems":
      return allInventoryItems;
      break;
    default:
      //debugDisplay(String.Format("Fxn stringToET received string %s, unknown.", eT));
      break;
  }
}

bool alphaOrder_isThisBeforeThat(String thisString, String thatString)
{
  Set* alphabetise = Set.Create(eSorted, eCaseInsensitive);
  alphabetise.Add(thisString);
  alphabetise.Add(thatString);
  String alphaArray[] = alphabetise.GetItemsAsArray();
  return (thisString == alphaArray[0]);
}

bool startsWithVowel(String word) // returns true if a String starts with a vowel (useful for distinction between the use of 'a' or 'an' as articles
{
  bool doesStartWithAVowel = false;
  if(word.StartsWith("A", eCaseInsensitive)){
    doesStartWithAVowel = true;
  } else if(word.StartsWith("E", eCaseInsensitive)){
    doesStartWithAVowel = true;
  } else if(word.StartsWith("I", eCaseInsensitive)){
    doesStartWithAVowel = true;
  } else if(word.StartsWith("O", eCaseInsensitive)){
    doesStartWithAVowel = true;
  } else if(word.StartsWith("U", eCaseInsensitive)){
    doesStartWithAVowel = true;
  } else if(word.StartsWith("Y", eCaseInsensitive)){
    doesStartWithAVowel = true;
  }
  return doesStartWithAVowel;
}

String removeOneStringInstance(String fullText, String stringToRemoveOnce) // basically the String.Replace function,  but only for the first occurrence (not all)
{
  int i;
  int startAt = fullText.IndexOf(stringToRemoveOnce);
  int finishAt = startAt + stringToRemoveOnce.Length;
  int fullLength = fullText.Length;
  String beginning = fullText.Truncate(startAt);
  String end = fullText.Substring(finishAt, fullLength-finishAt);
  
  //debugDisplayFromHere(String.Format("full text used to start with : '%s'", fullText.Truncate(20)));
  fullText = String.Format("%s%s", beginning, end);
  //debugDisplayFromHere(String.Format("full text now starts with : '%s'", fullText.Truncate(20)));
  
  return fullText;
}

String[] split(String textToSplit, String separator) // Returns an array of string split by separators !! CAREFUL array[0] is the array's length,  not an item !!
{
  int i;
  String testString = textToSplit.Replace(separator, "", eCaseInsensitive);
  int nbStringItems = textToSplit.Length;
  nbStringItems = nbStringItems - testString.Length;
  
  String returnArray[] = new String[nbStringItems];
  returnArray[0] = String.Format("%d", nbStringItems);
  
  for(i = 1; i < nbStringItems; i++)
  {
    
    if(textToSplit.IndexOf(separator) != -1)
    {
      returnArray[i] = textToSplit.Substring(0, textToSplit.IndexOf(separator));
      textToSplit = removeOneStringInstance(textToSplit, returnArray[i].Append(separator));
    } else
    {
      returnArray[i] = textToSplit;
    }
  }
  
  return returnArray;
}

String cmdStartsWithUSEsynonym(String cmd) // Return on the the 'use synonyms' we chose (if found) or "Null" if not found
{
  Set* USEsynonyms = Set.Create();
  USEsynonyms.Add("use");
  USEsynonyms.Add("put");
  USEsynonyms.Add("insert");
  
  String synonymList[] = USEsynonyms.GetItemsAsArray();
  int i = USEsynonyms.ItemCount -1;
  String foundMatch = "Null";
  
  while(i >= 0 && foundMatch == "Null")
  {
    if(cmd.StartsWith(synonymList[i], eCaseInsensitive))
    {
      foundMatch = synonymList[i];
    } else {
      i--;
    }
  }
  
  return foundMatch;
}

String whichArticle(String listOfElementsMentionned, String newElementName) // retunrs the appropriate article for a list of things to list ('A'/'An', 'A second',  etc.)
{ 
  int counter = 1;
  while(listOfElementsMentionned.IndexOf(newElementName) != -1)
  {
    counter++;
    listOfElementsMentionned = removeOneStringInstance(listOfElementsMentionned, newElementName);
  }
  switch(counter)
  {
    case 0:
      if(startsWithVowel(newElementName))
      {
        return "An";
      } else
      {
        return "A";
      }
      break;
    case 1:
      if(startsWithVowel(newElementName))
      {
        return "An";
      } else
      {
        return "A";
      }
      break;
    case 2:
      return "A second";
      break;
    case 3:
      return "A third";
      break;
    case 4:
      return "A fourth";
      break;
    case 5:
      return "A fifth";
      break;
    default:
      return "Another";
      break;
  }
}


//################# INTERACTION AUTOMATION FUNCTIONS ###############################

//##### AUDIO #####
function musicFirstSetup(AudioClip* newMusic, int thisID)
{
  bgMusic = newMusic.Play();
  bgMusic.Volume = 20;
  playingMusic = thisID;
}

function musicInRoom(AudioClip* newMusic, int thisID)
{
  if(playingMusic != thisID)
  {
    if(bgMusic.IsPlaying)
    {
      bgMusic.Stop();
    }
    bgMusic = newMusic.Play();
    bgMusic.Volume = 20;
    playingMusic = thisID;
  }
}

function playConfirm()
{
  AudioChannel* uiSounds = aConfirm.Play(eAudioPriorityLow, eOnce);
  uiSounds.Volume = 100;
}

function playSelect()
{
  AudioChannel* uiSounds = aSelect.Play(eAudioPriorityLow, eOnce);
  uiSounds.Volume = 100;
}

function playCancel()
{
  AudioChannel* uiSounds = aCancel.Play(eAudioPriorityLow, eOnce);
  uiSounds.Volume = 100;
}

//##### UTILITIES #####

function gameIsOver(String message)
{
  lblGameOver_how.Text = message;
  open_gui(gGameOver);
}

int getIndexOfElementUsed()
{
  return useIndex;
}

elementType getETOfElementUsed()
{
  return useET;
}

int getObjectMidX(Object* Obj) {
  DynamicSprite* tempSprite = DynamicSprite.CreateFromExistingSprite(Obj.Graphic);
  int returnInt = tempSprite.Width / 2;
  tempSprite.Delete();
  
  returnInt = returnInt + Obj.X;
  
  return returnInt;
}

float calculateDistanceFromCharacter(int targetX, int targetY,  Character* who) // Return a float of the distance (in px) between a character and a target
{
  float deltaX = IntToFloat(targetX) - IntToFloat(who.x);
  float deltaY = IntToFloat(targetY) - IntToFloat(who.y);
  return Maths.Sqrt(Maths.RaiseToPower(deltaX, 2.0)+ Maths.RaiseToPower(deltaY, 2.0));  
}

bool isCharacterCloseEnough(int targetX, int targetY, float maxDistance,  Character* who) // Returns a bool describing if a character's distance from a target is lower than the indicated max
{
  float dist = calculateDistanceFromCharacter(targetX, targetY, who);
  return dist < maxDistance;
}

bool isCharacterNearHotspot(Hotspot* HS, float maxDistance,  Character* who) // Is the character close to the passed hotspot
{
  return isCharacterCloseEnough(HS.WalkToX, HS.WalkToY, maxDistance,  who);  
}

bool isCharacterNearObject(Object* Obj, float maxDistance,  Character* who) // Is the character close to the passed object
{
  return isCharacterCloseEnough(getObjectMidX(Obj), Obj.Y, maxDistance,  who);  
}

bool isCharacterNearCharacter(Character* target, float maxDistance,  Character* who)  // Is the character close to the passed character
{
  return isCharacterCloseEnough(target.x, target.y, maxDistance,  who);  
}

bool isThisOpened(Object* Obj)
{
  bool returnBool = false;
  
  switch(Obj.GetProperty("Open_SpriteNumber"))
  {
    case -2:
      returnBool = !Obj.Visible;
      break;
    case -1:
      break;
    default:
      returnBool = (Obj.Visible && Obj.Graphic == Obj.GetProperty("Open_SpriteNumber"));
      break;
  }
  
  return returnBool;
}

String whatIsThis(elementType eT, int index) // return an element's name
{
  switch(eT)
  {
    case roomObjects:
      return object[index].Name;
      break;
    case roomHotspots:
      return hotspot[index].Name;
      break;
    case allCharacters:
      return character[index].Name;
      break;
    case allInventoryItems:
      return inventory[index].Name;
      break;
    default: 
      return "Unknown";
      break;
  }
}

String[] findClosestElement(String elementType_index[], float dist[], int arraysLength) // Returns the closest element from indexed arrays
{
  String closestElementType_index = elementType_index[0];
  float closestDist = dist[0];
  String returnArray[] = new String[2];
  
  int i; 
  for(i = 1; i < arraysLength; i++)
  {
    if(dist[i] < closestDist) 
    {
      closestElementType_index = elementType_index[i];
      closestDist = dist[i];
    }
  }
  
  returnArray[0] = closestElementType_index.Truncate(closestElementType_index.IndexOf("_"));
  closestElementType_index = closestElementType_index.Replace(returnArray[0], "", eCaseInsensitive);
  closestElementType_index = closestElementType_index.Replace("_", "", eCaseInsensitive);
  returnArray[1] = closestElementType_index;
  
  return returnArray;
}

String isInteractionOnElement(String cmd) // returns true if the command has both a 'use synonym' and a 'on' synonym (e.g.: USE razor ON Jonathan // INSERT files IN folder)
{
  Set* OnSynonyms = Set.Create(eSorted);
  OnSynonyms.Add(" in ");
  OnSynonyms.Add(" into ");
  OnSynonyms.Add(" onto ");
  OnSynonyms.Add(" on ");
  OnSynonyms.Add(" over ");
  OnSynonyms.Add(" with ");
  OnSynonyms.Add(" under ");
  OnSynonyms.Add(" to ");
  
  String OnSynonymsArray[] = OnSynonyms.GetItemsAsArray();
  int i = OnSynonyms.ItemCount - 1;
  String foundMatch = "Null";
  
  while(i >= 0 && foundMatch == "Null")
  {
    if(cmd.IndexOf(OnSynonymsArray[i]) != -1)
    {
      foundMatch = OnSynonymsArray[i];
    } else {
      i--;
    }
  }
  
  return foundMatch;
}

//##### SCORING #################################################
function giveScoreOnce(String tag, int scoreToGive)
{
  if(Game.DoOnceOnly(tag)){
    GiveScore(scoreToGive);
  }
}

//##### MEMORY MECHANIC #######################################

function memorize(String thought) {
  while(GetTextHeight(String.Format(". . .%s", thought), eFontNormal, lblCurrentThought.Width) > lblCurrentThought.Height)
  {
    thought = thought.Substring(2, thought.Length - 1);
  }
  lblCurrentThought.Text = thought;
  timeUITransparency = 0.0;
}

String getMemorisedThought()
{
  if(lblCurrentThought.Transparency < 100)
  {
    return lblCurrentThought.Text;
  } else {
    return ". . .I forget";
  }
}

bool hasMemorizedThought()
{
  return (getMemorisedThought() != ". . .I forget");
}

function loseThought()
{
  lblCurrentThought.Text = "";
  timeUITransparency = 200.0;
  lblCurrentThought.Transparency = 100;
}


//##### TIME FUNCTIONS #####

String translateTimeToHHMMAM(int hour, int minutes, String AMPM)
{
  return String.Format("%d:%02d%s", hour, minutes, AMPM);
}

String translateMinutesToHHMMAM(int minutes)
{
  int hours = minutes/60;
  minutes = minutes - (hours * 60);
  String AMPM = "AM";
  if(hours >= 12)
  {
    AMPM = "PM";
    if(hours > 12)
    {
      hours = hours - 12;
    }
  }
  return translateTimeToHHMMAM(hours, minutes, AMPM);
}

int translateTimeToMinutes(String HHMMAM)
{
  int returnMinutes;
  String hour = HHMMAM.Truncate(HHMMAM.IndexOf(":"));
  
  int hour_int = hour.AsInt;
  if(HHMMAM.EndsWith("PM") && hour_int != 12)
  {
    hour_int = hour_int + 12;
  }
  returnMinutes = 60*(hour_int);
  
  String minutes = HHMMAM.Substring(HHMMAM.IndexOf(":") + 1, 2);
  
  returnMinutes = returnMinutes + minutes.AsInt;
  
  return returnMinutes;
}

String whatTimeIsIt(bool showTimeInStatusLine)
{
  int timeInLoops = currentTime;
  String AmPm = "AM";
  
  //remove the days from the calculation (and update currentDay while we're at it
  int loopsPerDay = loopPerSecond * 60 * 60 * 24;
  int day = timeInLoops / loopsPerDay;
  timeInLoops = timeInLoops - (day * 60 * 60 * 24 * loopPerSecond);
  currentDay = day;
  
  //manage hours
  int hour = timeInLoops / (loopPerSecond * 3600);
  timeInLoops = timeInLoops - (hour * 3600 * loopPerSecond);
  
  if(hour >= 12)
  {
    AmPm = "PM";
  }
  if(hour > 12)
  {
    hour = hour - 12;
  }
  
  //manage minutes
  int minutes = timeInLoops / (loopPerSecond * 60);
  
  //memorize?
  if(showTimeInStatusLine)
  {
    memorize(String.Format("%d:%02d%s", hour, minutes, AmPm));
  }
  
  return translateTimeToHHMMAM(hour, minutes, AmPm);
}

int getCurrentHour()
{
  String currentHourS = whatTimeIsIt(false);
  
  currentHourS = currentHourS.Truncate(currentHourS.IndexOf(":"));
  
  return currentHourS.AsInt;
}

int getCurrentMinutes()
{
  String currentMinutesS = whatTimeIsIt(false);
  
  if(currentMinutesS.EndsWith("AM")) {
    currentMinutesS = currentMinutesS.Truncate(currentMinutesS.IndexOf("AM"));
  } else {
    currentMinutesS = currentMinutesS.Truncate(currentMinutesS.IndexOf("PM"));
  }
  currentMinutesS = currentMinutesS.Substring(currentMinutesS.IndexOf(":")+1, 2);
   
  return currentMinutesS.AsInt;
}

String getAMPM()
{
  String currentAMPM = whatTimeIsIt(false);
  if(currentAMPM.EndsWith("AM")){
    return "AM";
  } else {
    return "PM";
  }
}

bool isThisTimeWithinXminOfThisTime(String HHMMAM_test, String HHMMAM_max, int withinThisManyMinutes)
{
  int minutes_test = translateTimeToMinutes(HHMMAM_test);
  int minutes_max = translateTimeToMinutes(HHMMAM_max);
  if(minutes_max - minutes_test <= withinThisManyMinutes && minutes_max - minutes_test > 0)
  {
    return true;
  } else
  {
    return false;
  }
}

bool isThisTimeBeforeThisTime(String HHMMAM_1, String HHMMAM_2)
{
  int minutes_1 = translateTimeToMinutes(HHMMAM_1);
  int minutes_2 = translateTimeToMinutes(HHMMAM_2);
  //debugDisplay(String.Format("First : %d[Second: %d[Before? %d", minutes_1, minutes_2, minutes_1 < minutes_2)); 
  return minutes_1 < minutes_2;
}

bool isItBeforeThisTime(int hour, int minutes, int seconds, bool PM, int day)
{
  if(PM && hour != 12)
  {
    hour = hour + 12;
  }
  int maxLoops = ((((((day * 24) + hour) * 60) + minutes) * 60) + seconds) * loopPerSecond;
  int currentAllTimeLoop = currentTime + ((currentDay * 86400) * loopPerSecond);
  return currentAllTimeLoop <= maxLoops;
}

String addTimeToDescription(String textDescription)
{
  String returnText = String.Format("%s[It is %s", textDescription, whatTimeIsIt(true));
  return returnText;
}

function setCurrentTime(int hour, int minutes, int seconds, bool PM,  int day)
{
  if(PM && (hour != 12))
  {
    hour = hour + 12;
  }
  currentTime = ((hour * 3600) + (minutes * 60) + seconds) * loopPerSecond;
  currentDay = day;
}

function addTime(int hour, int minutes, int seconds, int day)
{
  int loopsToAdd = ((hour * 3600) + (minutes * 60) + seconds) * loopPerSecond;
  currentTime = currentTime + loopsToAdd;
}

function show_wait_GUI(String passtimeVerb)
{
  if(player.HasInventory(iWatch)){
    lblWaitUI.Text = String.Format("It is %s[How long should I wait?", whatTimeIsIt(false));
  } else {
    lblWaitUI.Text = String.Format("How long should I wait?");
  }
  passtimeVerb = passtimeVerb.LowerCase();
  lblWaitUI.Text = lblWaitUI.Text.Replace("wait", passtimeVerb);
  btnConfirmWait.Text = btnConfirmWait.Text.Replace("wait", passtimeVerb);
  String firstLetter = passtimeVerb.Truncate(1);
  firstLetter = firstLetter.UpperCase();
  passtimeVerb = firstLetter.Append(passtimeVerb.Substring(1, passtimeVerb.Length-1));
  btnToggleForUntil.Text = btnToggleForUntil.Text.Replace("wait", passtimeVerb);
  tbWaitAmount.Text = "15";
  open_gui(gWait);
}

function modifyCloudiness(int change)
{
  cloudiness = cloudiness + change;
  if(cloudiness < 0)
  {
    cloudiness = 0;
  } else if (cloudiness > MAX_CLOUDINESS)
  {
    cloudiness = MAX_CLOUDINESS;
  }
}

String getInteriorORExterior()
{
  return interiorORexterior[player.Room];
}

int getPercentPositionBetweenXAndY(int min, int max, int now)
{
  int totalDist = 100 * (max - min);
  int positioning = 100 * (now - min);
  return positioning / totalDist;
}

function manageDarkness()
{
  String theNow = whatTimeIsIt(false);
  String dawn = translateTimeToHHMMAM(4, 46, "AM");
  String fullMorning = translateTimeToHHMMAM(5, 46, "AM");
  String dusk = translateTimeToHHMMAM(7, 12, "PM");
  String fullNight = translateTimeToHHMMAM(8, 12, "PM");
  int divider = 1;
  
  if(getInteriorORExterior() == "interior")
  {
    divider = 2;
  }
  
  int nowMinutes;
  int startChange;
  int endChange;
  
  int maxLight = 100 - (cloudiness / divider);
  int minLight = 100 - (MAX_CLOUDINESS / divider);
 
  if(isThisTimeBeforeThisTime(theNow, dawn) || isThisTimeBeforeThisTime(fullNight, theNow)) // night
  {
    gDark.Transparency = minLight;
  } else if(isThisTimeBeforeThisTime(theNow, dusk) && isThisTimeBeforeThisTime(fullMorning, theNow))//day
  {
    gDark.Transparency = maxLight;
  } else if(isThisTimeBeforeThisTime(theNow, fullMorning) && isThisTimeBeforeThisTime(dawn, theNow))//dawn
  {
    startChange = translateTimeToMinutes(dawn);
    endChange = translateTimeToMinutes(fullMorning);
    nowMinutes = translateTimeToMinutes(theNow);
    gDark.Transparency = maxLight + ((maxLight - minLight) * (1 - getPercentPositionBetweenXAndY(startChange, endChange, nowMinutes)) / 100);
  } else if(isThisTimeBeforeThisTime(theNow, fullMorning) && isThisTimeBeforeThisTime(dawn, theNow))//dusk
  {
    startChange = translateTimeToMinutes(dusk);
    endChange = translateTimeToMinutes(fullNight);
    nowMinutes = translateTimeToMinutes(theNow);
    gDark.Transparency = maxLight + (maxLight - minLight * (getPercentPositionBetweenXAndY(startChange, endChange, nowMinutes) / 100));
  }
  
  int windowDarknessPercent = 100 * ((gDark.Transparency - maxLight) / (minLight - maxLight));
  if(player.Room == 4)
  {
    object[7].Visible = true;
    object[7].Transparency = windowDarknessPercent;    
  } else if(player.Room == 18)
  {
    object[6].Visible = true;
    object[6].Transparency = windowDarknessPercent;    
  } else if(player.Room == 20)
  {
    object[6].Visible = true;
    object[6].Transparency = windowDarknessPercent;
  }
}

//##### TRAIN TRAVELS ##################################################################
String cityAsString(city cityName)
{
  switch (cityName)
  {
    case Exeter:
      return "Exeter";
      break;
    case London:
      return "London";
      break;
    case Paris:
      return "Paris";
      break;
    case Munich:
      return "Munich";
      break;
    case Vienna:
      return "Vienna";
      break;
    case Budapest:
      return "Budapest";
      break;
    case Klausenburg:
      return "Klausenburg";
      break;
    case Bistritz:
      return "Bistritz";
      break;
    case Plymouth:
      return "Plymouth";
      break;
    case Salisbury:
      return "Salisbury";
      break;
    case Andover:
      return "Andover";
      break;
    case Yeovil:
      return "Yeovil";
      break;
    case Hurstbourne:
      return "Hurstbourne";
      break;
    case Woking:
      return "Woking";
      break;    
    case Templecombe:
      return "Templecombe";
      break;
    default:
      return "Null";
      break;
  }
}

function addTrainDeparture(city origin, city destination, int hour_O, int minute_O, String AMPM_O, int hour_D, int minute_D, String AMPM_D)
{
  String timeKey = translateTimeToHHMMAM(hour_O, minute_O, AMPM_O);
  String arrivalTime = translateTimeToHHMMAM(hour_D, minute_D, AMPM_D);
  
  trainTimeTableSorter.Set(String.Format("%09d", translateTimeToMinutes(timeKey)), timeKey);
  
  trainTimetableOrigin.Set(timeKey, cityAsString(origin));
  trainTimetableDestination.Set(timeKey, cityAsString(destination));
  trainTimetableArrivalTimes.Set(timeKey, arrivalTime);
}

function adjustTicketDescription(String departureTimeKey)
{
  String ticketDescription;
  if(isThisTimeBeforeThisTime(whatTimeIsIt(false), departureTimeKey))
  {
    ticketDescription = "TODAY";
  } else {
    ticketDescription = "TOMORROW";
  }
  ticketDescription = ticketDescription.Append("[");
  ticketDescription = ticketDescription.Append(trainTimetableOrigin.Get(departureTimeKey));
  ticketDescription = ticketDescription.Append("[");
  ticketDescription = ticketDescription.Append(departureTimeKey);
  ticketDescription = ticketDescription.Append("[");
  ticketDescription = ticketDescription.Append("[");
  ticketDescription = ticketDescription.Append(trainTimetableDestination.Get(departureTimeKey));
  ticketDescription = ticketDescription.Append("[");
  ticketDescription = ticketDescription.Append(trainTimetableArrivalTimes.Get(departureTimeKey));
  
  lblTrainTicketSchedule.Text = ticketDescription;
  lblTrainTicketSchedule.Text = ticketDescription;
}

String getTrainDepartureTime()
{
  return trainDepartureTime;
}

String getTrainArrivalTime(String departureTime)
{
  return trainTimetableArrivalTimes.Get(departureTime);
}

bool canPlayerBoardTrain(String ticketTime)
{
  return ticketTime == trainInStation;
}

String getTrainInStation()
{
  return trainInStation;
}

function show_trainTicket_GUI(city origin, city destination)
{
  String departureTimeKeys[];
  String tomorrowsTimes[];
  departureTimeKeys = trainTimeTableSorter.GetValuesAsArray();
  Set* tomorrow;
  tomorrow = Set.Create(eSorted);
  int i;
  
  lbTrainDepartures.Clear();
  
  lblTrainTicket_title.Text = String.Format("Train Timetable:[%s to %s", cityAsString(origin), cityAsString(destination));
  
  //debugDisplay(whatTimeIsIt(false));
  
  for(i = 0 ; i < trainTimetableOrigin.ItemCount ; i++)
  {
    if(trainTimetableOrigin.Get(departureTimeKeys[i]) == cityAsString(origin) && trainTimetableDestination.Get(departureTimeKeys[i]) == cityAsString(destination))
    {
      if(isThisTimeBeforeThisTime(whatTimeIsIt(false), departureTimeKeys[i]))
      {
        lbTrainDepartures.AddItem(departureTimeKeys[i]);
      } else {
        tomorrow.Add(departureTimeKeys[i]);
      }
    }    
  }
  
  tomorrowsTimes = tomorrow.GetItemsAsArray();
  for(i = 0 ; i < tomorrow.ItemCount ; i++)
  {
    lbTrainDepartures.AddItem(tomorrowsTimes[i]);
    //debugDisplay(String.Format("Tomorrow : %s", departureTimeKeys[i]));
  }
  
  lbTrainDepartures.SelectedIndex = 0;
  adjustTicketDescription(lbTrainDepartures.Items[lbTrainDepartures.SelectedIndex]);
  open_gui(gTrainTickets);
}

function createTrainTimetables()
{
  trainTimeTableSorter = Dictionary.Create(eSorted);
  trainTimetableOrigin = Dictionary.Create(eNonSorted);
  trainTimetableDestination = Dictionary.Create(eNonSorted);
  trainTimetableArrivalTimes = Dictionary.Create(eNonSorted);
  trainInStation = "Null";
  
  //Exeter to London
  addTrainDeparture(Exeter, London, 7, 45, "AM", 12, 1, "PM");
  addTrainDeparture(Exeter, London, 6, 50, "AM", 1, 20, "PM");
  addTrainDeparture(Exeter, London, 10, 25, "AM", 2, 33, "PM");
  addTrainDeparture(Exeter, London, 10, 35, "AM", 4, 43, "PM");
  addTrainDeparture(Exeter, London, 12, 45, "PM", 5, 00, "PM");
  addTrainDeparture(Exeter, London, 1, 11, "PM", 6, 26, "PM");
  addTrainDeparture(Exeter, London, 2, 10, "PM", 7, 52, "PM");
  addTrainDeparture(Exeter, London, 4, 15, "PM", 8, 16, "PM");
  addTrainDeparture(Exeter, London, 6, 00, "PM", 10, 15, "PM");
  
  //Arrival times are for Exeter,  with layovers
  addTrainDeparture(London, Exeter, 5, 25, "AM", 10, 24, "AM");
  addTrainDeparture(London, Plymouth, 5, 50, "AM", 10, 43, "AM");
  addTrainDeparture(London, Salisbury, 7, 5, "AM", 1, 38, "PM");
  addTrainDeparture(London, Plymouth, 9, 0, "AM", 1, 38, "PM");
  addTrainDeparture(London, Andover, 9, 15, "AM", 3, 5, "PM");
  addTrainDeparture(London, Yeovil, 9, 45, "AM", 4, 17, "PM");
  addTrainDeparture(London, Plymouth, 11, 0, "AM", 3, 5, "PM");
  addTrainDeparture(London, Hurstbourne, 11, 15, "AM", 9, 27, "PM");
  addTrainDeparture(London, Salisbury, 11, 45, "AM", 5, 9, "PM");
  addTrainDeparture(London, Plymouth, 1, 0, "PM", 5, 9, "PM");
  addTrainDeparture(London, Plymouth, 2, 25, "PM", 6, 16, "PM");
  addTrainDeparture(London, Yeovil, 3, 45, "PM", 9, 27, "PM");
  addTrainDeparture(London, Woking, 4, 20, "PM", 9, 27, "PM");
  addTrainDeparture(London, Plymouth, 5, 0, "PM", 9, 27, "PM");
  addTrainDeparture(London, Templecombe, 5, 50, "PM", 5, 23, "AM");
  addTrainDeparture(London, Yeovil, 7, 25, "PM", 5, 23, "AM");
  addTrainDeparture(London, Salisbury, 8, 50, "PM", 5, 23, "AM");
  
  trainScheduleCreated = true;
}

function emptySayBackground()
{
  backgroundThingsToSay.Clear();
}

function talkInBackground()
{
  int characterIndex;
  Character* talkChar;
  int i;
  String dictKeysArray[];
  dictKeysArray = backgroundThingsToSay.GetKeysAsArray();
  String currentKey;
  String currentKey_dictIndexPart;
  String currentKey_charIndexPart;
  
  if(backgroundThingsToSay.ItemCount > 0)
  {
    for(i = 0 ; i < backgroundThingsToSay.ItemCount ; i++)
    {
      currentKey = dictKeysArray[i];
      currentKey_dictIndexPart = currentKey.Truncate(currentKey.IndexOf("_")+1);
      currentKey_charIndexPart = currentKey.Replace(currentKey_dictIndexPart, "", eCaseInsensitive);
      //debugDisplay(currentKey_dictIndexPart);
      characterIndex = currentKey_charIndexPart.AsInt;
      talkChar = character[characterIndex];
      if(backgroundSayOverlay_active[characterIndex] != null)
      {
        if(!backgroundSayOverlay_active[characterIndex].Valid && talkChar.Room == player.Room && talkChar.Transparency < 100)
        {
          backgroundSayOverlay_active[characterIndex] = talkChar.SayBackground(backgroundThingsToSay.Get(currentKey));
          backgroundThingsToSay.Remove(currentKey);
        }
      } else {
        if(talkChar.Room == player.Room && talkChar.Transparency < 100)
        {
          backgroundSayOverlay_active[characterIndex] = talkChar.SayBackground(backgroundThingsToSay.Get(currentKey));
          backgroundThingsToSay.Remove(currentKey);
        }
      }
    }
  } else 
  {
    checkSayBackground = false;
  }
}

void sayBackgroundBacklog(this Character*, String addedMessage)
{
  String index = String.Format("%09d_%d", backgroundSayIndex, this.ID);
  backgroundSayIndex++;
  backgroundThingsToSay.Set(index, addedMessage);
  checkSayBackground = true;
}

function manageTrainAnimation(int trainObjectIndex, Character* trainOfficer, bool arrives, bool animateTrain, int callRoomScriptIndex)
{
  int arrivalView = 27;
  int departureView = 28;
  int lastArrivalFrame = Game.GetFrameCountForLoop(arrivalView, 0) - 1;
  int lastDepartureFrame = Game.GetFrameCountForLoop(departureView, 0) - 1;
  Object* train = object[trainObjectIndex];
  
  if(animateTrain)
  {
    CallRoomScript(callRoomScriptIndex);
    if(arrives)
    {
      train.Visible = false;
      train.SetView(arrivalView, 0, 0);
      train.Visible = true;
      train.Animate(0, 5, eOnce, eNoBlock, eForwards);
    } else
    {
      train.SetView(departureView, 0, 0);
      train.Animate(0, 5, eOnce, eNoBlock, eForwards);
    }
  } else
  {
    if(arrives)
    {
      train.SetView(arrivalView, 0, lastArrivalFrame);
      train.Visible = true;
    } else
    {
      train.SetView(departureView, 0, lastDepartureFrame);
      train.Visible = true;
    }
  }
}

function isAnyTrainInStation(city currentCity, int trainObjectIndex, Character* trainOfficer, bool animateTrain, int callRoomScriptIndex)
{
  int i = 0;
  String depTimes[];
  String depCities[];
  String destCity[];
  String thisCity = cityAsString(currentCity);
  
  if(!trainScheduleCreated)
  {
    createTrainTimetables();
  }
  
  depTimes = trainTimetableOrigin.GetKeysAsArray();
  depCities = trainTimetableOrigin.GetValuesAsArray();
  destCity = trainTimetableDestination.GetValuesAsArray();
  
  if(trainInStation != "Null")//There is a train in station
  {
    if(!trainDepartureAnnounced && isThisTimeWithinXminOfThisTime(whatTimeIsIt(false), trainInStation, 1))
    {
      trainOfficer.sayBackgroundBacklog("Steer clear of the tracks for the train's departure!");
      trainDepartureAnnounced = true;
    } else if(isThisTimeBeforeThisTime(trainInStation, whatTimeIsIt(false)))//Train should leave
    {
      manageTrainAnimation(trainObjectIndex, trainOfficer, false, true, callRoomScriptIndex);
      trainInStation = "Null";
      trainDepartureAnnounced = false;
    }
  } else
  {
    while(i < trainTimetableOrigin.ItemCount)
    {
      if(depCities[i] == thisCity && isThisTimeWithinXminOfThisTime(whatTimeIsIt(false), depTimes[i], 25) && trainInStation == "Null" && !object[trainObjectIndex].Animating)//train should arrive
      {
        trainOfficer.sayBackgroundBacklog(String.Format("The %s train to %s is arriving in station!", depTimes[i], destCity[i]));
        manageTrainAnimation(trainObjectIndex, trainOfficer, true, true, callRoomScriptIndex);
        trainOfficer.sayBackgroundBacklog("All passengers with tickets are required to board immediately");
        trainOfficer.sayBackgroundBacklog("This is the one and only call for boarding");
        trainInStation = depTimes[i];
        i = trainTimetableOrigin.ItemCount;
      } else
      {
        i++;
      }      
    }
  }
}


//##### HAWKINS FILES ##################################################################
//Players need to get the requirements (city,  sector,  age), consult the map (city+sector), get the names, use ledger to get the drawer number,  get file by name, validate the age,  bring it back to Hawkins
String createHawkinsPropertyFile (String clientName, String cityName, String sector, int age)
{
  hawkinsLedgerCity.Set(clientName, cityName);
  hawkinsLedgerSector.Set(clientName, sector);
  hawkinsLedgerPropertyAge.Set(clientName, String.Format("%d", age));
  
  return clientName;
}

function createHawkinsRequestFile (String clientName, String cityName, String sector, int ageMin,  int ageMax,  String clientMessage,  bool addToRequesters)
{  
  if(clientMessage == "Auto")
  {
    clientMessage = String.Format("They want a property in %s's %s sector, aged between %d and %d years old", cityName, sector, ageMin, ageMax);
  }
  
  hawkinsRequestCity.Set(clientName, cityName);
  hawkinsRequestSector.Set(clientName, sector);
  hawkinsRequestPropertyAgeMin.Set(clientName, String.Format("%d", ageMin));
  hawkinsRequestPropertyAgeMax.Set(clientName, String.Format("%d", ageMax));
  hawkinsRequestMessage.Set(clientName, clientMessage);
  
  if(addToRequesters)
  {
    hawkinsRequesters.Add(clientName);
  }
}

String getClientListPerCitySector(String thisCity, String sector)
{
  int i;
  String clientFiles[];
  clientFiles = hawkinsLedgerCity.GetKeysAsArray();
  String returnString = "";
  for(i = 0 ; i < hawkinsLedgerCity.ItemCount ; i++)
  {
    if(hawkinsLedgerCity.Get(clientFiles[i]) == thisCity && hawkinsLedgerSector.Get(clientFiles[i]) == sector)
    {
      if(returnString == "")
      {
        returnString = clientFiles[i];
      } else {
        returnString = returnString.Append(String.Format(" , %s", clientFiles[i]));
      }
    }
  }
  return returnString;
}

String generateReadHawkinsFileString(String clientName)
{
  String propAge = hawkinsLedgerPropertyAge.Get(clientName);
  String returnString = String.Format("Name: %s", clientName);
  returnString = returnString.Append(String.Format("[City: %s", hawkinsLedgerCity.Get(clientName)));
  returnString = returnString.Append(String.Format("[Sector: %s", hawkinsLedgerSector.Get(clientName)));
  returnString = returnString.Append(String.Format("[Construction: %d (%s y.o.)", 1893 - (propAge.AsInt), propAge));
  return returnString;
}

String getPropertyRequestMessage(String clientName)
{
  return hawkinsRequestMessage.Get(clientName);
}

Set* getHawkinsSellerList()
{
  Set* sellerList;
  sellerList = Set.Create(eSorted);
  String clientNames[];
  clientNames = hawkinsLedgerCity.GetKeysAsArray();
  int i;
  for(i = 0 ; i < hawkinsLedgerCity.ItemCount ; i++)
  {
    sellerList.Add(clientNames[i]);
  }
  return sellerList;
}

String getPropertyRequesterName()
{
  String returnName;
  String clientNames[];
  clientNames = hawkinsRequesters.GetItemsAsArray();
  returnName = clientNames[Random(hawkinsRequesters.ItemCount - 1)];
  hawkinsRequesters.Remove(returnName);
  return returnName;
}

String capitalizeName(String theName)
{
  if(theName != "")
  {
    String firstLetter = theName.Truncate(1);
    firstLetter = firstLetter.UpperCase();
    theName = String.Format("%s%s", firstLetter, theName.Substring(1, theName.Length-1));
  }
  return theName;
}

String getProposedSeller()
{
  return proposedSeller;
}

bool validatePropertyProposition(String requesterName, String sellerName)
{
  bool validated = true;
  if(hawkinsLedgerCity.Contains(sellerName))
  {
    String propAge = hawkinsLedgerPropertyAge.Get(sellerName);
    String ageMin = hawkinsRequestPropertyAgeMax.Get(requesterName);
    String ageMax = hawkinsRequestPropertyAgeMin.Get(requesterName);
    if( hawkinsLedgerCity.Get(sellerName) != hawkinsRequestCity.Get(requesterName) ||
        hawkinsLedgerSector.Get(sellerName) != hawkinsRequestSector.Get(requesterName) ||
        propAge.AsInt <= ageMax.AsInt ||
        propAge.AsInt >= ageMin.AsInt)
    {
      validated = false;
    }
    sellerName = capitalizeName(sellerName);
    cHawkins.Say(String.Format("Oh yes, the %s's property!", sellerName));
  } else
  {
    sellerName = capitalizeName(sellerName);
    cHawkins.Say(String.Format("%s? I do not know this name. You made a mistake", sellerName));
    validated = false;
  }
  return validated;
}

function createMultipleHawkinsPropertyFile (String thisCity, String sector, int ageMin, int ageMax,  int nbFiles)
{
  int propAge;
  while(nbFiles > 0)
  {
    propAge = ageMin + Random((ageMax - ageMin - 1));
    createHawkinsPropertyFile("Random", thisCity, sector, propAge);
    nbFiles--;
  }
}

function createAllHawkinsFiles ()
{
  createHawkinsRequestFile("Hopkinson", "Exeter", "City center", 25, 75, "Auto", true);
  createHawkinsPropertyFile("Lyon", "Exeter", "City center", 37);
  createHawkinsPropertyFile("Montague", "Exeter", "City center", 196);
  createHawkinsPropertyFile("Heathcote", "Exeter", "City center", 3);
  
  createHawkinsRequestFile("McMahon", "Exeter", "North", 100, 200, "Auto", true);
  createHawkinsPropertyFile("Guest", "Exeter", "North", 183);
  createHawkinsPropertyFile("Foster", "Exeter", "North", 62);
  createHawkinsPropertyFile("Maxton", "Exeter", "North", 512);
  
  createHawkinsRequestFile("Greene", "Exeter", "West", 5, 25, "Auto", true);
  createHawkinsPropertyFile("Drake", "Exeter", "West", 17);
  createHawkinsPropertyFile("Norman", "Exeter", "West", 102);
  createHawkinsPropertyFile("Bernal", "Exeter", "West", 78);
  
  createHawkinsRequestFile("Peel", "Exeter", "South", 500, 750, "Auto", true);
  createHawkinsPropertyFile("MacKay", "Exeter", "South", 578);
  createHawkinsPropertyFile("Brookes", "Exeter", "South", 18);
  createHawkinsPropertyFile("Robinson", "Exeter", "South", 278);
  
  createHawkinsRequestFile("Atkins", "Exeter", "East", 10, 40, "Auto", true);
  createHawkinsPropertyFile("Keen", "Exeter", "East", 11);
  createHawkinsPropertyFile("Vivian", "Exeter", "East", 89);
  createHawkinsPropertyFile("Silkin", "Exeter", "East", 286);
  
  createHawkinsRequestFile("Mancroft", "London", "City center", 200, 300, "Auto", true);
  createHawkinsPropertyFile("Ridley", "London", "City center", 258);
  createHawkinsPropertyFile("Perry", "London", "City center", 148);
  createHawkinsPropertyFile("Smith", "London", "City center", 56);
  
  createHawkinsRequestFile("Watts", "London", "North", 100, 1000, "Auto", true);
  createHawkinsPropertyFile("Sinclair", "London", "North", 752);
  createHawkinsPropertyFile("Sturgeon", "London", "North", 85);
  createHawkinsPropertyFile("Greenwood", "London", "North", 52);
  
  createHawkinsRequestFile("Ormsby", "London", "West", 20, 50, "Auto", true);
  createHawkinsPropertyFile("Wakefield", "London", "West", 34);
  createHawkinsPropertyFile("Howarth", "London", "West", 9);
  createHawkinsPropertyFile("Dunwoody", "London", "West", 144);
  
  createHawkinsRequestFile("Tyrwhitt", "London", "South", 500, 950, "Auto", true);
  createHawkinsPropertyFile("Paisley", "London", "South", 778);
  createHawkinsPropertyFile("Cryer", "London", "South", 416);
  createHawkinsPropertyFile("Ewing", "London", "South", 287);
  
  createHawkinsRequestFile("Dracula", "London", "East", 500, 1500, "This is a special one, recommanded by Robert Parton himself[Very old East London property, let's say over 500 years old", false);
  createHawkinsPropertyFile("Gladstone", "London", "East", 999);
  createHawkinsPropertyFile("Clifton", "London", "East", 149);
  createHawkinsPropertyFile("Jenkins", "London", "East", 410); 
}

function setLedgerReadText(String thisLedgerReadText)
{
  ledgerReadText = thisLedgerReadText;
}

String getLedgerReadText()
{
  return ledgerReadText;
}

String getCarfaxSeller()
{
  String returnString;
  if(carfaxSeller == null)
  {
    returnString = "";
  } else
  {
    returnString = carfaxSeller;
  }
  return returnString;
}

//##### solicitor EXAM ##########################################################################################
function addExamQuestion(String question, String actualAnswer)
{
  exam_ActualAnswers.Set(question, actualAnswer);
  exam_SubmittedAnswers.Set(question, "");
  
  if(exam_ActualAnswers.ItemCount == 1)
  {
    lblExam_question.Text = question;
  }
}

function createFullExam()
{
  addExamQuestion("When filing a property for sale in a client's file, should one use only the construction date, only the property's age or both?", "Both");
  addExamQuestion("Complete the following list, in order : Introduction, Current sale agreements, Proof of '?', Proof of current state, Annexes of previous paperwork", "ownership");
  addExamQuestion("As a solicitor, which Inn of Courts are you associated with? A: Grey, B: Lincoln, C: Inner Temple, D: Middle Temple, E: All of them, F: None of them", "F");
  addExamQuestion("The population of Transylvania consists of four distinct nationalities. Which one are you most likely to find in the West of the region?", "Magyars");
  addExamQuestion("Transylvania, Moldavia and Bukovina are located in the midst of which mountainous region?", "Carpathians");
  addExamQuestion("In Magyar folklore, which of these are devil-like creatures? A: Lid√©rc, B: √ñrd√∂g, C: T√°ltos, D: T√ºnd√©rek", "B");
}

bool areAllExamQuestionsAnswered()
{
  String answers[];
  answers = exam_SubmittedAnswers.GetValuesAsArray();
  int i;
  bool allIn = true;
  
  for(i = 0 ; i < exam_SubmittedAnswers.ItemCount ; i++)
  {
    if(answers[i] == "")
    {
      allIn = false;
    }
  }
  
  return allIn;
}

int howManyExamAnswers()
{
  return exam_ActualAnswers.ItemCount;
}

int howManyCorrectExamAnswers()
{
  String questions[];
  questions = exam_SubmittedAnswers.GetKeysAsArray();
  int i;
  int correct = 0;
  String expectedAnswer;
  String submittedAnswer;
  
  for(i = 0 ; i < exam_SubmittedAnswers.ItemCount ; i++)
  {
    expectedAnswer = exam_ActualAnswers.Get(questions[i]);
    submittedAnswer = exam_SubmittedAnswers.Get(questions[i]);
    
    expectedAnswer = expectedAnswer.LowerCase();
    submittedAnswer = submittedAnswer.LowerCase();
    
    if(expectedAnswer == submittedAnswer)
    {
      correct++;
    } else if (expectedAnswer.EndsWith("s") & (expectedAnswer.Truncate(expectedAnswer.Length - 1) == submittedAnswer))
    {
      correct++;
    }
  }
  
  return correct;
}

function modifyExamQuestion(bool nextORprev)
{
  String question = lblExam_question.Text;
  String allQuestions[];
  int i = 0;
  
  allQuestions = exam_ActualAnswers.GetKeysAsArray();
  exam_SubmittedAnswers.Set(question, tbExam_Answer.Text);
  
  while(question != allQuestions[i] && i < exam_ActualAnswers.ItemCount)
  {
    i++;
  }
  //debugDisplay(String.Format("Question number is %d[Item count is %d", i, exam_ActualAnswers.ItemCount));
  
  if(i < exam_ActualAnswers.ItemCount)
  {
    if(nextORprev)
    {
      i++;
    } else
    {
      i--;      
    }
    tbExam_Answer.Text = exam_SubmittedAnswers.Get(allQuestions[i]);
    lblExam_question.Text = allQuestions[i];
    if(i+1 == exam_ActualAnswers.ItemCount)
    {
      btnExam_next.Visible = false;
    } else
    {
      btnExam_next.Visible = true;
    }
    if(i-1 < 0)
    {
      btnExam_prev.Visible = false;
    } else
    {
      btnExam_prev.Visible = true;
    }
  } else
  {
    debugDisplay("Error in nextExamQuestion");
  }
}

//##### TRAVEL DESTINATIONS ######################################################################################
String zoneAsString(zone thisZone) 
{
  switch(thisZone)
  {
    case JonathanApt:
      return "Jonathan's Apartment";
      break;
    case HawkinsOffices:
      return "Hawkins Esq. Office";
      break;
    case ExeterTrainStation:
      return "Exeter Train Station";
      break;
    case StationCafe:
      return "Station Caf√©";
      break;
    case LondonTrainStation:
      return "London Train Station";
      break;
    case LondonHotel:
      return "Hotel The Hummums";
      break;
    case Purfleet:
      return "Purfleet";
      break;
    case TelegramOffice:
      return "Telegram Office";
      break;
    case BritishMuseum:
      return "British Museum";
      break;
    case PhotographyShop:
      return "Photography shop";
      break;
    case LawSocietyOffices:
      return "Law Society Offices";
      break;
    case StayHere:
      return "Stay here";
      break;
    default:
      return "Null";
      break;
  }
}

zone stringAsZone(String thisZone) 
{
  switch(thisZone)
  {
    case "Jonathan's Apartment":
      return JonathanApt;
      break;
    case "Hawkins Esq. Office":
      return HawkinsOffices;
      break;
    case "Exeter Train Station":
      return ExeterTrainStation;
      break;
    case "Station Caf√©":
      return StationCafe;
      break;
    case "London Train Station":
      return LondonTrainStation;
      break;
    case "Hotel The Hummums":
      return LondonHotel;
      break;
    case "Purfleet":
      return Purfleet;
      break;
    case "Telegram Office":
      return TelegramOffice;
      break;
    case "British Museum":
      return BritishMuseum;
      break;
    case "Photography shop":
      return PhotographyShop;
      break;
    case "Law Society Offices":
      return LawSocietyOffices;
      break;
    case "Stay here":
      return StayHere;
      break;
    default:
      return StayHere;
      break;
  }
}

commerce stringAsCommerce(String thisCommerce)
{
  switch(thisCommerce)
  {
    case "HawkinsEsq":
      return HawkinsEsq;
      break;
    case "TrainStation":
      return TrainStation;
      break;
    case "LawSocietyBuilding":
      return LawSocietyBuilding;
      break;
    case "Museum":
      return Museum;
      break;
    case "Shop":
      return Shop;
      break;
    case "AlwaysOpened":
      return AlwaysOpened;
      break;
    default:
      debugDisplay(String.Format("Commerce not recognized"));
  }
}

String commerceAsString(commerce thisCommerce)
{
  switch(thisCommerce)
  {
    case HawkinsEsq:
      return "HawkinsEsq";
      break;
    case TrainStation:
      return "TrainStation";
      break;
    case LawSocietyBuilding:
      return "LawSocietyBuilding";
      break;
    case Museum:
      return "Museum";
      break;
    case Shop:
      return "Shop";
      break;
    case AlwaysOpened:
      return "AlwaysOpened";
      break;
    default:
      debugDisplay(String.Format("Commerce not recognized"));
  }
}

function setupTravelDestinations()
{
  String thisZone;
  
  thisZone = zoneAsString(JonathanApt);
  roomForEachTravelDestinations.Set(thisZone, "1");
  x_TravelDestinations.Set(thisZone, "6");
  y_TravelDestinations.Set(thisZone, "2");
  city_TravelDestinations.Set(thisZone, "Exeter");
  zone_CommerceType.Set(thisZone, commerceAsString(AlwaysOpened));
  
  thisZone = zoneAsString(HawkinsOffices);
  roomForEachTravelDestinations.Set(thisZone, "2");
  x_TravelDestinations.Set(thisZone, "3");
  y_TravelDestinations.Set(thisZone, "4");
  city_TravelDestinations.Set(thisZone, "Exeter");
  zone_CommerceType.Set(thisZone, commerceAsString(HawkinsEsq));
  
  thisZone = zoneAsString(ExeterTrainStation);
  roomForEachTravelDestinations.Set(thisZone, "3");
  x_TravelDestinations.Set(thisZone, "3");
  y_TravelDestinations.Set(thisZone, "1");
  city_TravelDestinations.Set(thisZone, "Exeter");
  zone_CommerceType.Set(thisZone, commerceAsString(TrainStation));
  
  thisZone = zoneAsString(StationCafe);
  roomForEachTravelDestinations.Set(thisZone, "3");
  x_TravelDestinations.Set(thisZone, "3");
  y_TravelDestinations.Set(thisZone, "1");
  city_TravelDestinations.Set(thisZone, "Exeter");
  zone_CommerceType.Set(thisZone, commerceAsString(TrainStation));
  
  thisZone = zoneAsString(LondonTrainStation);
  roomForEachTravelDestinations.Set(thisZone, "5");
  x_TravelDestinations.Set(thisZone, "6");
  y_TravelDestinations.Set(thisZone, "4");
  city_TravelDestinations.Set(thisZone, "London");
  cabSellMsg_TravelDestinations.Set(thisZone, "The Waterloo Train Station? State of the art transport wherever you wanna go!");
  zone_CommerceType.Set(thisZone, commerceAsString(TrainStation));
  
  thisZone = zoneAsString(LondonHotel);
  roomForEachTravelDestinations.Set(thisZone, "4");
  x_TravelDestinations.Set(thisZone, "6");
  y_TravelDestinations.Set(thisZone, "4");
  city_TravelDestinations.Set(thisZone, "London");
  cabSellMsg_TravelDestinations.Set(thisZone, "Ride to the Hummums in the Covent Garden? Get some shut eye and one of them baths for cheap!");
  zone_CommerceType.Set(thisZone, commerceAsString(AlwaysOpened));
  
  thisZone = zoneAsString(Purfleet);
  roomForEachTravelDestinations.Set(thisZone, "6");
  x_TravelDestinations.Set(thisZone, "11");
  y_TravelDestinations.Set(thisZone, "4");
  city_TravelDestinations.Set(thisZone, "London");
  cabSellMsg_TravelDestinations.Set(thisZone, "Purfleet? 'Tis a quaint little community to the East o'London");
  zone_CommerceType.Set(thisZone, commerceAsString(AlwaysOpened));
  
  thisZone = zoneAsString(TelegramOffice);
  roomForEachTravelDestinations.Set(thisZone, "8");
  x_TravelDestinations.Set(thisZone, "4");
  y_TravelDestinations.Set(thisZone, "3");
  city_TravelDestinations.Set(thisZone, "London");
  cabSellMsg_TravelDestinations.Set(thisZone, "My buddy James' telegram shop? He just clickety-clack that thing!");
  zone_CommerceType.Set(thisZone, commerceAsString(Shop));
  
  thisZone = zoneAsString(BritishMuseum);
  roomForEachTravelDestinations.Set(thisZone, "9");
  x_TravelDestinations.Set(thisZone, "5");
  y_TravelDestinations.Set(thisZone, "3");
  city_TravelDestinations.Set(thisZone, "London");
  cabSellMsg_TravelDestinations.Set(thisZone, "The British Museum? Lots of old neat stuff there");
  zone_CommerceType.Set(thisZone, commerceAsString(Museum));
  
  thisZone = zoneAsString(LawSocietyOffices);
  roomForEachTravelDestinations.Set(thisZone, "10");
  x_TravelDestinations.Set(thisZone, "6");
  y_TravelDestinations.Set(thisZone, "3");
  city_TravelDestinations.Set(thisZone, "London");
  cabSellMsg_TravelDestinations.Set(thisZone, "The Law Society office? You wearing a suit, people in suits like to go there");
  zone_CommerceType.Set(thisZone, commerceAsString(LawSocietyBuilding));
}

int travelDestinationTimeInMinutes(zone origin, zone destination)
{
  String tempString;
  if(destination == StayHere)
  {
    destination = origin;
  }
  
  tempString = x_TravelDestinations.Get(zoneAsString(origin));
  int x_origin = tempString.AsInt;
  
  tempString = y_TravelDestinations.Get(zoneAsString(origin));
  int y_origin = tempString.AsInt;
  
  tempString = x_TravelDestinations.Get(zoneAsString(destination));
  int x_dest = tempString.AsInt;
  
  tempString = y_TravelDestinations.Get(zoneAsString(destination));
  int y_dest = tempString.AsInt;
  
  float x_dist = IntToFloat(x_origin - x_dest);  
  float y_dist = IntToFloat(y_origin - y_dest);
  
  float dist = Maths.Sqrt(Maths.RaiseToPower(x_dist, 2.0) + Maths.RaiseToPower(y_dist, 2.0));
  
  bool inLondon;
  if(city_TravelDestinations.Get(zoneAsString(destination)) == "London")
  {
    inLondon = true;
  } else
  {
    inLondon = false;
  }
  
  if(inLondon)
  {
    return londonTravelDistanceMultiplier * FloatToInt(dist);
  } else
  {
    return exeterTravelDistanceMultiplier * FloatToInt(dist);
  }
}

function adjustTravelDestinations()
{
  String allDestination[];
  String currentCity = city_TravelDestinations.Get(zoneAsString(currentZone));
  
  allDestination = city_TravelDestinations.GetKeysAsArray();
  int i;
  
  for(i = 0 ; i < city_TravelDestinations.ItemCount ; i++)
  {
    if( city_TravelDestinations.Get(allDestination[i]) == currentCity &&
        availableDestinations.Contains(allDestination[i]) &&
        roomForEachTravelDestinations.Get(allDestination[i]) != String.Format("%d", player.Room))
    {
      dTravel.SetOptionState(stringAsZone(allDestination[i]), eOptionOn);
    } else
    {   
      dTravel.SetOptionState(stringAsZone(allDestination[i]), eOptionOff);
    }
  }
  dTravel.SetOptionState(StayHere, eOptionOn);
}

function addTravelDestination(zone thisZone)
{
  if(!availableDestinations.Contains(zoneAsString(thisZone)))
  {
    availableDestinations.Add(zoneAsString(thisZone));
  }
}

function removeTravelDestination(zone thisZone)
{
  if(availableDestinations.Contains(zoneAsString(thisZone)))
  {
    availableDestinations.Remove(zoneAsString(thisZone));
  }
}

bool playerHasTravelDestination(zone thisZone)
{
  return availableDestinations.Contains(zoneAsString(thisZone));
}

zone getCurrentZone()
{ 
  return currentZone;
}

String getCurrentCity()
{
  return city_TravelDestinations.Get(zoneAsString(currentZone));
}

function changeArrival_X_Y(int roomIndex, int newX, int newY)
{
  arrival_x[roomIndex] = newX;
  arrival_y[roomIndex] = newY;
}

function sayListOfThings(String listOfThings[], Dictionary* dictOfThings, int numberOfThings, Character* talker)
{
  int i;
  
  for(i = 0 ; i < numberOfThings ; i++)
  {
      
    if(listOfThings[i] == "" || listOfThings[i] == null || !dictOfThings.Contains(listOfThings[i]))
    {
      debugDisplay(String.Format("Error processing %s in the 'sayListOfThings' function", listOfThings[i]));
    } else
    {
      talker.Say(dictOfThings.Get(listOfThings[i]));
    }
  }
}

function cabTellPropositions() 
{
  sayListOfThings(cabbyPropositions, cabSellMsg_TravelDestinations, 3, cCabby);
}

String getCabPropositionByIndex(int index)
{
  return cabbyPropositions[index];
}

function setThreeLondonCabRides(bool includePurfleet)
{
  String allPossibleDestination[];
  Set* proposedDestinations = Set.Create(eNonSorted);
  allPossibleDestination = city_TravelDestinations.GetKeysAsArray();
  int maxIndex = city_TravelDestinations.ItemCount - 1;
  int randomIndex;
  int numberOfRandomPropositions;
  if(includePurfleet)
  {
    numberOfRandomPropositions = 2;
  } else
  {
    numberOfRandomPropositions = 3;
  }
  
  while (proposedDestinations.ItemCount < numberOfRandomPropositions)
  {
    randomIndex = Random(maxIndex);
    if(city_TravelDestinations.Get(allPossibleDestination[randomIndex]) == "London" &&  // In London
       allPossibleDestination[randomIndex] != zoneAsString(currentZone) &&              // not current zone
       allPossibleDestination[randomIndex] != zoneAsString(Purfleet))                   // Not Purfleet,  see below
    {
      if(proposedDestinations.ItemCount > 0)
      {
        if(!proposedDestinations.Contains(allPossibleDestination[randomIndex]))           // Not already chosen
        {
          proposedDestinations.Add(allPossibleDestination[randomIndex]);
        }
      } else
      {
        proposedDestinations.Add(allPossibleDestination[randomIndex]);
      }
    }
  }
  
  if(includePurfleet)
  {
    proposedDestinations.Add(zoneAsString(Purfleet));
  }
  
  cabbyPropositions = proposedDestinations.GetItemsAsArray();
}



//##### NOTEBOOK ###################################################################################################################
String modifyNote(String key, String newMessage)
{
  notes_message.Set(key, newMessage);
}

function takeNote() // adds a note in the notepad
{
  createANote(Notable_title, Notable_description);
  //lbNoteTitles.AddItem(Notable_title);//fix me
  giveScoreOnce(Notable_description, Notable_score);
}

function changeNotableDescription(String newDescription)
{
  Notable_description = newDescription;
}

function makeNotable(String title, String description, int score) // overrides the last notable thing
{
  Notable_title = title;
  Notable_description = description;
  Notable_score = score;
}

function notableRead(String title, String description,  int score) // Displays something and make it notable (establish the added score if noted too)
{
  if(player.HasInventory(iNotebook))
  {
    makeNotable(title,  description,  score);
    Display(String.Format("%s*", description));
  } else {
    Display(description);
  }
}

function notableThought(String title, String description,  int score) // both make the player think something and make it notable (establish the added score if noted too)
{
  if(player.HasInventory(iNotebook))
  {
    makeNotable(title,  description,  score);
    player.Think(String.Format("%s*", description));
  } else {
    player.Think(description);
  }
}

function notableWhisper(Character* who, String title, String description,  int score) // both make a character say something and make it notable (establish the added score if noted too)
{
  if(player.HasInventory(iNotebook))
  {
    makeNotable(title,  description,  score);
    who.Say(String.Format("*whispering*[%s*", description));
  } else {
    who.Say(String.Format("*whispering*[%s", description));
  }
}

function notableSay(Character* who, String title, String description,  int score) // both make a character say something and make it notable (establish the added score if noted too)
{
  if(player.HasInventory(iNotebook))
  {
    makeNotable(title,  description,  score);
    who.Say(String.Format("%s*", description));
  } else {
    who.Say(description);
  }
}

function closeNotebookThoughts()
{
  String thoughts[];
  int i;
  if(afterNotebookThoughts.ItemCount > 0)
  {
    thoughts = afterNotebookThoughts.GetItemsAsArray();
    for(i = 0 ; i < afterNotebookThoughts.ItemCount ; i++)
    {
      player.Think(thoughts[i]);
    }
    afterNotebookThoughts.Clear();
  }
}

function isNoteTaken(String noteTitle)
{
  int i = 0;
  bool foundIt = false;
  String takenNotesTitles[];
  takenNotesTitles = notes_titles.GetValuesAsArray();
     
  while(i < lbNoteTitles.ItemCount && !foundIt)
  {
    if(takenNotesTitles[i] == noteTitle)
    {
      foundIt = true;
    } else
    {
      i++;
    }
  }
  return foundIt;
}

function foundMorseClue(int clueIndex)
{
  morseCodeState[clueIndex] = true;
}

bool getMorseClues(int clueIndex)
{
  if(clueIndex == -1)
  {
    return (morseCodeState[2] && morseCodeState[3]);
  } else
  {
    return morseCodeState[clueIndex];
  }
}

String getNoteIndex(String thatNoteTitle)
{
  String noteIndexes[];
  noteIndexes = notes_titles.GetKeysAsArray();
  String noteTitles[];
  noteTitles = notes_titles.GetValuesAsArray();
  int i = 0;
  String foundIndex = "-1";
  
  while (i < notes_titles.ItemCount && foundIndex == "-1")
  {
    if(noteTitles[i] == thatNoteTitle)
    {
      foundIndex = noteIndexes[i];
    }
    i++;
  }
  
  return foundIndex;
}

function linkNoteToQuestByTitle(String thisNoteTitle, int questIndex)
{
  String noteIndexS = getNoteIndex(thisNoteTitle);
  int noteIndexI = noteIndexS.AsInt;
  linkNoteToQuest(noteIndexI, questIndex);
}

function hasRead(String noteTitle)
{
  String thisNoteIndex = getNoteIndex(noteTitle);
  notes_seen.Set(thisNoteIndex, "true");
  
  switch(noteTitle)
  {
    case "Mina - tea":
      if(Game.DoOnceOnly("Mina's tea")){
        GiveScore(1);
        if(isItBeforeThisTime(11, 0, 0, false, 1)){
          afterNotebookThoughts.Add("Mina and I have a tea rendezvous at 11 at the Station Caf√©");
        } else
        {
          afterNotebookThoughts.Add("Oh no! I missed my tea rendezvous with Mina!");
        }
        addTravelDestination(StationCafe);
      }
      break;
    case "Intercepted code":
      if(player.Room == 8 && !player.HasInventory(iInterceptedtelegram))
      {
        afterNotebookThoughts.Add("That intercepted code is in morse. I should try to translate it");
        foundMorseClue(2);//read
      }
      break;
    default:
      break;
  }
}

//##### INTERACTION FUNCTIONS #####
int whoIsSittingInThisChair(int objectIndex)
{
  int nbOfCharacter = Game.CharacterCount;
  int i = 0;
  int returnIndex = -1;
  
  while(i < nbOfCharacter && returnIndex == -1)
  {
    if(character[i] != player && character[i].GetProperty("sitting") == objectIndex)
    {
      returnIndex = i;
    }
    i++;
  }
  return returnIndex;
}

int shouldITalkToSomeone(int seatIndex)
{
  int i = 0;
  int talkToCharIndex = -1;
  
  while(i < Game.CharacterCount && talkToCharIndex == -1)
  {
    if(character[i].GetProperty("dialogWhileSitting") == seatIndex && character[i].Room == player.Room && character[i].Transparency < 100)
    {
      talkToCharIndex = i;
    }
    i++;
  }
  
  return talkToCharIndex;
  
}

function sit(elementType eT, int index, Character* who, int sittingView, bool alreadySat, float overrideReachdistance) // make the character sit on an appropriately setup element
{
  String redir;
  int whoSitsThere;
  String indexElementVerbHandled[];
  int talkToCharacter;
  int talkToCharDialogIndex;
  float maxDist;
  
  if(overrideReachdistance == -1.0)
  {
    maxDist = reachDistance;
  } else
  {
    maxDist = overrideReachdistance;
  }
  
  switch(eT)
  {
    case roomObjects:
      whoSitsThere = whoIsSittingInThisChair(index);
      if(who == player) {
        redir = object[index].GetTextProperty("sit_Direction");
        if(redir.StartsWith("redir", eCaseInsensitive))
        {
          redir = redir.Replace("redir", "", eCaseInsensitive);
          index = redir.AsInt;
        }
      }
      if(object[index].GetTextProperty("sit_Direction") == "Null")
      {
        who.Think("I cannot sit on this.");        
      } else if(!isCharacterNearObject(object[index], maxDist, who))
      {
        who.Think(String.Format("I cannot reach the %s from here", object[index].Name.LowerCase()));
      } else if(whoSitsThere != -1)
      {
        player.FaceObject(object[index]);
        player.Say(String.Format("%s is already sitting there", character[whoSitsThere].Name));
      } else
      {
        who.Walk(object[index].X + object[index].GetProperty("sit_deltaX"), object[index].Y + object[index].GetProperty("sit_deltaY"), eBlock, eWalkableAreas);
        who.Move(object[index].X + object[index].GetProperty("sit_deltaX"), object[index].Y + object[index].GetProperty("sit_deltaY"), eBlock, eAnywhere);
        who.LockView(sittingView, eStopMoving);
        if(who == player) {
          cHarkersBeard.LockView(6, eKeepMoving);
        }
        who.SetProperty("sitting", index);
        
        if(!alreadySat)
        {
          switch(object[index].GetTextProperty("sit_Direction"))
          {
            case "down":
              who.Animate(0, 6, eOnce, eNoBlock, eForwards);
              break;
            case "left":
              who.Animate(1, 6, eOnce, eNoBlock, eForwards);
              break;
            case "right":
              who.Animate(2, 6, eOnce, eNoBlock, eForwards);
              break;
            case "up":
              who.Animate(3, 6, eOnce, eNoBlock, eForwards);
              break;
            default:
              break;
          }
          if(who == player)
          {
            switch(object[index].GetTextProperty("sit_Direction"))
            {
              case "down":
                cHarkersBeard.Animate(0, 6, eOnce, eBlock, eForwards);
                break;
              case "left":
                cHarkersBeard.Animate(1, 6, eOnce, eBlock, eForwards);
                break;
              case "right":
                cHarkersBeard.Animate(2, 6, eOnce, eBlock, eForwards);
                break;
              case "down":
                cHarkersBeard.Animate(3, 6, eOnce, eBlock, eForwards);
                break;
              default:
                break;
            }
          }
        } else {
          who.Frame = nbFrameInSittingAnim;
        }
        if(who == player)
        {
          mouse.Mode = eModePointer;
          KeyboardMovement.Mode = eKeyboardMovementModeNone;
          talkToCharacter = shouldITalkToSomeone(index);
          if(talkToCharacter != -1 && character[talkToCharacter].GetProperty("dialogIndex") != -1)
          {
            talkToCharDialogIndex = character[talkToCharacter].GetProperty("dialogIndex");
            dialog[talkToCharDialogIndex].Start();
          }
        }
      }
      break;
    default:
      break;
  }
}

function playerSitsInClosestChair(bool playerComment,  float overrideReachdistance)
{
  int nbObjectsInRoom = Room.ObjectCount;
  Dictionary* sittableObjects = Dictionary.Create(eNonSorted);
  String sitDirection;
  String redirNb;
  int whoSitsThere;
  int isSitting = (player.GetProperty("sitting") != -1);
  
  int distance;
  int i;
  
  int closestIndex = -1;
  int closestDistance = 500;
  
  float maxDist;
  if(overrideReachdistance == -1.0)
  {
    maxDist = reachDistance;
  } else
  {
    maxDist = overrideReachdistance;
  }
  
  
  for(i = 0 ; i < Room.ObjectCount ; i++)
  {
    sitDirection = object[i].GetTextProperty("sit_Direction");
    if(sitDirection.StartsWith("Redir"))
    {
      redirNb = sitDirection.Replace("redir", "", eCaseInsensitive);
    } else
    {
      redirNb = String.Format("%d", i);
    }
    if(sitDirection != "Null")
    {
      sittableObjects.Set(String.Format("%09d", i), redirNb);
      distance = FloatToInt(calculateDistanceFromCharacter(object[i].X, object[i].Y, player));
      
      whoSitsThere = whoIsSittingInThisChair(i);
      if(distance < closestDistance && whoSitsThere == -1)
      {
        closestDistance = distance;
        closestIndex = i;
      }
    }
  }
  
  if(closestIndex == -1)
  {
    if(playerComment)
    {
      player.FaceDirection(eDirectionRight);
      Wait(15);
      player.FaceDirection(eDirectionLeft);
      Wait(15);
      player.FaceDirection(eDirectionDown);
      player.Say("I don't see anywhere to sit nearby");
    }
  } else
  {
    redirNb = sittableObjects.Get(String.Format("%09d", closestIndex));
    i = redirNb.AsInt;
    if(!isCharacterNearObject(object[i], maxDist, player))
    {
      if(playerComment)
      {
        player.FaceObject(object[i], eBlock);
        player.Say(String.Format("I am too far away from the %s", object[i].Name));
      }
    } else
    {
      sit(roomObjects, i, player, 2, isSitting, maxDist);
    }
  }
}

function standUp(Character* who,  int walkingView) // the player stands up
{
  if(who.GetProperty("sitting") > -1)
  {
    who.Animate(player.Loop, 6, eOnce, eNoBlock,  eBackwards);
    if(who == player)
    {
      cHarkersBeard.Animate(player.Loop, 6, eOnce, eBlock, eBackwards);
    }
    who.LockView(walkingView, eKeepMoving);
    if(who == player)
    {
      cHarkersBeard.LockView(5, eKeepMoving);
    }
    who.PlaceOnWalkableArea();
    who.SetProperty("sitting", -1);
    if(who == player)
    {
      mouse.Mode = eModeWalkto;
      KeyboardMovement.Mode = eKeyboardMovementModeTapping;
    }
  } else {
    who.Think("I am not sitting");
  }
}

//##### PARSE COMMAND REACTIONS FUNCTIONS #####
bool sitHighjack()
{
  bool returnBool = false;
  if(useIndex != -1)
  {
      
    switch (useET)
    {
      case roomObjects:
        if(object[useIndex].GetTextProperty("sit_Direction") != "Null")
        {
          returnBool = true;
          sit(roomObjects, useIndex, player, 2, false);
          useIndex = -1;
        }
        break;
      case roomHotspots:
        if(hotspot[useIndex].GetTextProperty("sit_Direction") != "Null")
        {
          returnBool = true;
          sit(roomHotspots, useIndex, player, 2, false);
          useIndex = -1;
        }
        break;
      default:
        break;
    }
  }
  return returnBool;
}

function unhandled_event(int what, int type) // called when a runInteraction is called on something without an appropriate event handler
{
  switch(what)
  {
    case 2: // room object
      switch(type)
      {
        case 1: // use/interact with object
          if(!sitHighjack())
          {
            player.Think("I am not sure what to use this for");
          }
          break;
        case 3: // use inventory item on object
          break;
        default:
          break;
      }
      break;
    case 1: // hotspot
      switch(type)
      {
        case 2: // use/interact with hotspot
          if(!sitHighjack())
          {
            player.Think("I am not sure what to use this for");
          }
          break;
        case 3: // use inventory item on hotspot
          break;
        default:
          break;
      }
      break;
    case 3: // character
      switch(type)
      {
        case 1: // use/interact character
          player.Think("I am not sure what to use them for");
          break;
        case 3: // use inventory item on character
          break;
        default:
          break;
      }
      break;
    case 5: // inventory item
      switch(type)
      {
        case 1: // use/interact with inventory item
          player.Think("I am not sure what to use this for");
          break;
        case 3: // use inventory item on inventory item
          break;
        default:
          break;
      }
      break;
    case 4: // nothing
      switch(type)
      {
        case 2: // use/interact with nothing
          player.Think("I am not sure what to use");
          break;
        case 3: // use inventory item on nothing
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}

int findRoomObjectIndexByName(String objectName) // returns the object index of an object named
{
  int i = Room.ObjectCount - 1;
  int foundMatch = -1;
  
  while(i >= 0 && foundMatch == -1)
  {
    if(object[i].Name.LowerCase() == objectName.LowerCase())
    {
      foundMatch = i;
    } else {
      i--;
    }
  }
  
  return foundMatch;
}

int findInvItemIndexByName(String itemName)
{
  int nbInventoryItems = Game.InventoryItemCount;//don't forget the index start at one
  int i = 0;
  int returnIndex = -1;
  bool foundit = false;
  String compareString;
  
  itemName = itemName.LowerCase();
  
  while(i < nbInventoryItems && !foundit)
  {
    i++;
    compareString = inventory[i].Name.LowerCase();
    if(compareString == itemName) {
      returnIndex = i;
      foundit = true;
    }
  }
  return returnIndex;
}

String[] findElementIndexByName(String cmd) // returns a String array with array[0] being the index and array[1] being the element type,  both as Strings!!!
{
  int i;
  int y;
  String testedStrings[];
  String allPossibleNames;
  String finalIndex;
  String finalElementType;
  bool foundMatch;
  float distanceFromPlayer;
  String tempArray[];
  float tempArrayF[];
  String returnArray[] = new String[2];
  
  int nbObjects = Room.ObjectCount;
  int nbHotpots = 50;
  int nbCharacters = Game.CharacterCount;
  int nbInventoryItems = Game.InventoryItemCount;//don't forget the index start at one
  Dictionary* correspondingRoomElements = Dictionary.Create(eSorted, eCaseInsensitive);
  
  //OBJECTS
  for(i = 0; i < (nbObjects); i++)
  {
    allPossibleNames = object[i].Name.Append(", ");
    if(object[i].GetTextProperty("alternateNames") != "")
    {
      allPossibleNames = allPossibleNames.Append(object[i].GetTextProperty("alternateNames"));
      allPossibleNames = allPossibleNames.Append(", ");
    }
    //debugDisplay(allPossibleNames);
    testedStrings = split(allPossibleNames, ", ");
    int testedStringsLength = testedStrings[0].AsInt;
    y = 1;
    foundMatch = false;
    while(y < testedStringsLength && !foundMatch)
    {
      if(object[i].Name != "" && testedStrings[y] != "" && cmd.IndexOf(testedStrings[y]) != -1)
      {
        if(object[i].Visible || object[i].GetProperty("InteractableWhenInvisible"))
        {
          foundMatch = true;
          distanceFromPlayer = calculateDistanceFromCharacter(getObjectMidX(object[i]), object[i].Y, player);
          correspondingRoomElements.Set(String.Format("%d_%s", i, etToString(roomObjects)), String.Format("%d", FloatToInt(distanceFromPlayer)));
        } else {
          y++;
        }
      } else {
        y++;
      }
    }
  }
  
  //HOTSPOTS
  for(i = 0; i < (nbHotpots); i++)
  {
    allPossibleNames = hotspot[i].Name.Append(", ");
    allPossibleNames = allPossibleNames.Append(hotspot[i].GetTextProperty("alternateNames"));
    testedStrings = split(allPossibleNames, ", ");
    int testedStringsLength = testedStrings[0].AsInt;
    y = 1;
    foundMatch = false;
    while(y < testedStringsLength && !foundMatch)
    {
      if(hotspot[i].Name != "" && cmd.IndexOf(testedStrings[y]) != -1)
      {
        foundMatch = true;
        distanceFromPlayer = calculateDistanceFromCharacter(hotspot[i].WalkToX, hotspot[i].WalkToY, player);
        correspondingRoomElements.Set(String.Format("%d_%s", i, etToString(roomHotspots)), String.Format("%d", FloatToInt(distanceFromPlayer)));
      } else {
        y++;
      }
    }
  }
  
  //CHARACTERS
  for(i = 0; i < (nbCharacters); i++)
  {
    allPossibleNames = character[i].Name.Append(", ");
    allPossibleNames = allPossibleNames.Append(character[i].GetTextProperty("alternateNames"));
    testedStrings = split(allPossibleNames, ", ");
    int testedStringsLength = testedStrings[0].AsInt;
    y = 1;
    foundMatch = false;
    while(y < testedStringsLength && !foundMatch)
    {
      if(character[i].Room == player.Room && character[i].Transparency < 100 && character[i].Name != "" && cmd.IndexOf(testedStrings[y]) != -1)
      {
        foundMatch = true;
        distanceFromPlayer = calculateDistanceFromCharacter(character[i].x, character[i].y,  player);
        correspondingRoomElements.Set(String.Format("%d_%s", i, etToString(allCharacters)), String.Format("%d", FloatToInt(distanceFromPlayer)));
      } else {
        y++;
      }
    }
  }
  
  //INVENTORY ITEMS
  for(i = 1; i <= (nbInventoryItems); i++)//inventory item index start at 1
  {
    allPossibleNames = inventory[i].Name.Append(", ");
    allPossibleNames = allPossibleNames.Append(inventory[i].GetTextProperty("alternateNames"));
    testedStrings = split(allPossibleNames, ", ");
    int testedStringsLength = testedStrings[0].AsInt;
    y = 1;
    foundMatch = false;
    
    while(y < testedStringsLength && !foundMatch)
    {
      if(player.HasInventory(inventory[i]) && inventory[i].Name != "" && cmd.IndexOf(testedStrings[y]) != -1)
      {
        foundMatch = true;
        if(cmd.IndexOf(" my ") != -1)
        {
          distanceFromPlayer = 0.0;
        } else {
          distanceFromPlayer = 400.0;
        }
        correspondingRoomElements.Set(String.Format("%d_%s", i, etToString(allInventoryItems)), String.Format("%d", FloatToInt(distanceFromPlayer)));
      } else {
        y++;
      }
    }
  }
    
  switch(correspondingRoomElements.ItemCount)
  {
    case 0:
      returnArray[0] = "-1";
      returnArray[1] = "Null";
      break;
    case 1:
      tempArray = correspondingRoomElements.GetKeysAsArray();
      finalIndex = tempArray[0].Truncate(tempArray[0].IndexOf("_"));
      finalElementType = tempArray[0].Replace(finalIndex, "", eCaseInsensitive);
      finalElementType = finalElementType.Replace("_", "", eCaseInsensitive);
      returnArray[0] = finalIndex;
      returnArray[1] = finalElementType;
      break;
    default:
      tempArray = correspondingRoomElements.GetValuesAsArray();
      tempArrayF = new float[correspondingRoomElements.ItemCount];
      for(i = 0; i < correspondingRoomElements.ItemCount; i++)
      {
        tempArrayF[i] = tempArray[i].AsFloat;
      }
      tempArray = correspondingRoomElements.GetKeysAsArray();
      returnArray = findClosestElement(tempArray, tempArrayF, correspondingRoomElements.ItemCount);
      break;
  }  
  
  return returnArray;
}

String findVerbInDictionary(String cmd) // finds the verb in the verbDictionary
{
  int i;
  int stringPosition = -1;
  String verbs[] = verbDictionary.GetKeysAsArray();
  Set* foundVerbs = Set.Create(eSorted);
  String returnVerb;
   
  for(i = 0 ; i < verbDictionary.ItemCount ; i++){
    stringPosition = cmd.IndexOf(String.Format("%s ", verbs[i]));
    if(stringPosition != -1) {
      foundVerbs.Add(verbs[i]);
    }
  }
  
  if(foundVerbs.ItemCount == 0) 
  {
    return "Null";
  } else 
  {
    verbs = foundVerbs.GetItemsAsArray();
    returnVerb = verbs[0];
    for(i = 1 ; i < foundVerbs.ItemCount ; i++)
    {
      if(verbs[i].Length > returnVerb.Length)
      {
        returnVerb = verbs[i];
      }
    }
    return verbDictionary.Get(returnVerb);
  }
}

// this function allows 2 inventory items to be merged together (keeps one,  modifies its parameters and removes the other)
function fitInventoryItemsTogether(InventoryItem* keptItem, InventoryItem* fittedItem, String newKeptItemName, int newItemGraphic, bool ReplaceDesc_orAppend, String newItemDescription, int AddedScore)
{
  String oldDescription = keptItem.GetTextProperty("TextDescription");
  String oldName = keptItem.Name;
  
  keptItem.Name = newKeptItemName;
  if(ReplaceDesc_orAppend)
  {
    keptItem.SetTextProperty("TextDescription", newItemDescription);
  } else {
    keptItem.SetTextProperty("TextDescription", oldDescription.Append(String.Format(" %s", newItemDescription)));
  }
  keptItem.Graphic = newItemGraphic;
  player.LoseInventory(fittedItem);
  if(AddedScore > 0)
  {
    giveScoreOnce(String.Format("Fit %s in %s", fittedItem.Name, oldName), AddedScore);
  }
}

//##### ITEMS IN ITEMS #####
Dictionary* getClassifySolutionDict(String parentItemName)
{
  InventoryItem* parentItem = inventory[findInvItemIndexByName(parentItemName)];
  
  switch(parentItem)
  {
    case iLegalPapers:
      return legalPapers_solution;
      break;
    case iSalesDossier:
      return saleDossier_solution;
      break;
    default:
      debugDisplay(String.Format("%s is not handled by getClassifySolutionDict function", parentItemName));
      break;
  }
}

Dictionary* getDictionariesForParentItems(InventoryItem* parentItem, parentItemDict aspect)
{
  switch (parentItem)
  {
    case iLegalPapers:
      if(aspect == subitemDescription)
      {
        return legalPapers_description;
      } else if(aspect == subitemNote)
      {
        return legalPapers_notes;
      } else
      {
        debugDisplay("Unhandled aspect of legal papers from getDictionariesForParentItems");
      }
      break;
    case iFilm:
      if(aspect == subitemDescription)
      {
        return film_description;
      } else if(aspect == subitemNote)
      {
        return film_notes;
      } else
      {
        debugDisplay("Unhandled aspect of film from getDictionariesForParentItems");
      }
      break;
    case iSubmittedFilm:
      if(aspect == subitemDescription)
      {
        return subFilm_description;
      } else if(aspect == subitemNote)
      {
        return subFilm_notes;
      } else
      {
        debugDisplay("Unhandled aspect of film from getDictionariesForParentItems");
      }
      break;
    case iPhotos:
      if(aspect == subitemDescription)
      {
        return photo_description;
      } else if(aspect == subitemNote)
      {
        return photo_notes;
      } else
      {
        debugDisplay("Unhandled aspect of photos from getDictionariesForParentItems");
      }
      break;
    case iSalesDossier:
      if(aspect == subitemDescription)
      {
        return saleDossier_description;
      } else if(aspect == subitemNote)
      {
        return saleDossier_notes;
      } else
      {
        debugDisplay("Unhandled aspect of saleDossier from getDictionariesForParentItems");
      }
      break;
    case iHotelPackages:
      if(aspect == subitemDescription)
      {
        return hotelPackages_description;
      } else if(aspect == subitemNote)
      {
        return hotelPackages_notes;
      } else
      {
        debugDisplay("Unhandled aspect of hotel packages from getDictionariesForParentItems");
      }
      break;
    case iTelegrams:
      if(aspect == subitemDescription)
      {
        return telegram_description;
      } else if(aspect == subitemNote)
      {
        return telegram_notes;
      } else
      {
        debugDisplay("Unhandled aspect of telegram from getDictionariesForParentItems");
      }
      break;        
    case iFood:
      if(aspect == subitemDescription)
      {
        return food_description;
      } else if(aspect == subitemNote)
      {
        return food_notes;
      } else if(aspect == subItemSpoiltime)
      {
        return food_spoilTime;
      } else if(aspect == subItemAlternateName)
      {
        return food_alternateNames;
      } else
      {
        debugDisplay("Unhandled aspect of food from getDictionariesForParentItems");
      }
      break;
    case iBooks:
      if(aspect == subitemDescription)
      {
        return books_description;
      } else if(aspect == subitemNote)
      {
        return books_notes;
      } else
      {
        debugDisplay("Unhandled aspect of books from getDictionariesForParentItems");
      }
      break;
    case iBooksArchives:
      if(aspect == subitemDescription)
      {
        return britishMuseumBooks_comment;
      } else if(aspect == subitemNote)
      {
        return britishMuseumBooks_notes;
      } else
      {
        debugDisplay("Unhandled aspect of british museum books from getDictionariesForParentItems");
      }
      break;  
    default:
      debugDisplay(String.Format("%d is not handled by the getDictionariesForParentItems function", parentItem.Name));
      break;
  }
  
}

bool playerHasSubitem(String subItemName, InventoryItem* parentItem)
{
  Dictionary* thisParentItemDict = getDictionariesForParentItems(parentItem, subitemDescription);
  return thisParentItemDict.Contains(subItemName);
}

int playerHasHowManySubitems(InventoryItem* thisParentItem)
{
  Dictionary* ketSet = getDictionariesForParentItems(thisParentItem, subitemDescription);
  return (ketSet.ItemCount);
}

bool playerHasAnySubitem(InventoryItem* thisParentItem)
{
  Dictionary* ketSet = getDictionariesForParentItems(thisParentItem, subitemDescription);
  return (ketSet.ItemCount > 0);
}

function changeSubItemNote(InventoryItem* thisParentItem, String thisSubItemName, String newNote)
{
  Dictionary* thisParentItemDict = getDictionariesForParentItems(thisParentItem, subitemNote);
  
  if(playerHasSubitem(thisSubItemName, thisParentItem))
  {
    thisParentItemDict.Set(thisSubItemName, newNote);
  }
}

function changeAllSubItemNoteInParent(InventoryItem* thisParentItem, String newNote)
{
  Dictionary* thisParentItemDict = getDictionariesForParentItems(thisParentItem, subitemNote);
  String subItemNames[];
  subItemNames = thisParentItemDict.GetKeysAsArray();
  int i;
  
  for(i = 0 ; i < thisParentItemDict.ItemCount ; i++)
  {
    changeSubItemNote(thisParentItem, subItemNames[i], newNote);
  }
}

function removeSubitem(InventoryItem* parentItem, String thisSubitemName,  bool showWarningOnError)
{
  Dictionary* mySubitemDescription = getDictionariesForParentItems(parentItem, subitemDescription);
  Dictionary* mySubitemNote = getDictionariesForParentItems(parentItem, subitemNote);
  
  if(mySubitemDescription.Contains(thisSubitemName) && mySubitemNote.Contains(thisSubitemName))
  {
    mySubitemDescription.Remove(thisSubitemName);
    mySubitemNote.Remove(thisSubitemName);
    if(!playerHasAnySubitem(parentItem))
    {
      player.LoseInventory(parentItem);
    }
  } else if (showWarningOnError)
  {
    debugDisplay(String.Format("%s is not a subitem of %s", thisSubitemName, parentItem.Name));
  }    
}

function addSubitem(InventoryItem* parentItem, String thisSubitemName, String thisSubitemDescription, String thisSubitemNote)
{
  Dictionary* mySubitemDescription;
  Dictionary* mySubitemNote;
   
  if(parentItem.GetTextProperty("InvContext") == "Classify" || parentItem.GetTextProperty("InvContext") == "Contains")
  {
    if(!player.HasInventory(parentItem))
    {
      player.AddInventory(parentItem);
    }
    mySubitemDescription = getDictionariesForParentItems(parentItem, subitemDescription);
    mySubitemDescription.Set(thisSubitemName, thisSubitemDescription);
    mySubitemNote = getDictionariesForParentItems(parentItem, subitemNote);
    mySubitemNote.Set(thisSubitemName, thisSubitemNote);
    
  } else
  {
    debugDisplay(String.Format("%d does not have an appropriate invContext parameter", parentItem.Name));
  }  
}

function transfertSubitemFromOneParentToAnother(InventoryItem* originalParentItem, InventoryItem* targetParentItem, String subItemName,  bool showWarningOnError)
{
  Dictionary* mySubitemDescription_origin = getDictionariesForParentItems(originalParentItem, subitemDescription);
  Dictionary* mySubitemNote_origin = getDictionariesForParentItems(originalParentItem, subitemNote);
  Dictionary* mySubitemDescription_target = getDictionariesForParentItems(targetParentItem, subitemDescription);
  Dictionary* mySubitemNote_target = getDictionariesForParentItems(targetParentItem, subitemNote);
  
  if(mySubitemDescription_origin.Contains(subItemName) && mySubitemNote_origin.Contains(subItemName))
  {
    addSubitem(targetParentItem, subItemName, mySubitemDescription_origin.Get(subItemName), mySubitemNote_origin.Get(subItemName));
    removeSubitem(originalParentItem, subItemName, showWarningOnError);
  } else
  {
    if(showWarningOnError)
    {
      debugDisplay(String.Format("%s is not a subitem of %s", subItemName, originalParentItem.Name));
    }
  }
  
  if(!playerHasAnySubitem(originalParentItem))
  {
    player.LoseInventory(originalParentItem);
  }
}

function tranfertAllSubitemFromOneParentToAnother(InventoryItem* originalParentItem, InventoryItem* targetParentItem)
{
  Dictionary* mySubitemDescription_origin = getDictionariesForParentItems(originalParentItem, subitemDescription);
  Dictionary* mySubitemNote_origin = getDictionariesForParentItems(originalParentItem, subitemNote);
  Dictionary* mySubitemDescription_target = getDictionariesForParentItems(targetParentItem, subitemDescription);
  Dictionary* mySubitemNote_target = getDictionariesForParentItems(targetParentItem, subitemNote);
  String subitemNames[];
  int originalLength = mySubitemDescription_origin.ItemCount;
  subitemNames = mySubitemDescription_origin.GetKeysAsArray();
  int i;
  for(i = 0 ; i < originalLength ; i++)
  {
    transfertSubitemFromOneParentToAnother(originalParentItem, targetParentItem, subitemNames[i], true);
  }
}

function lbInventory_Selector_adapt(String itemName){
  int i = Game.InventoryItemCount;
  String allContexts = "Classify, Contains";
  bool foundMatch = false;
  
  while(i > 0 && !foundMatch) 
  {
    if(inventory[i].Name == itemName)
    {
      if(inventory[i].GetProperty("tellsTime"))
      {
        lblDescriptionSelectedItem.Text = String.Format("%s[It is %s, currently.", inventory[i].GetTextProperty("TextDescription"), whatTimeIsIt(true));
      } else {
        lblDescriptionSelectedItem.Text = String.Format("%s", inventory[i].GetTextProperty("TextDescription"));
      }
      
      if(inventory[i].GetTextProperty("invContext") == "Null")
      {
        btnInvContext.Visible = false;
      } else if (allContexts.IndexOf(inventory[i].GetTextProperty("invContext")) != -1)
      {
        btnInvContext.Text = String.Format("> %s", inventory[i].GetTextProperty("invContext"));
        btnInvContext.Visible = true;
      }
      foundMatch = true;
    } else {
      i--;
    }
  }
}

function fillInventoryListBox ()
{
  int i;
  bool firstItem = false;
  String itemDescription;
  lbInventory.Clear();
  
  for(i = Game.InventoryItemCount ; i > 0 ; i--) 
  {
    if(player.HasInventory(inventory[i]))
    {
      lbInventory.AddItem(inventory[i].Name);
      if(firstItem == false) {
        lbInventory_Selector_adapt(inventory[i].Name);
        firstItem = true;
      }
    }
  }
}

int findListBoxIndexbyName(ListBox* thisLB, String itemLookedFor)
{
  int selectedIndex = 0;
  int i = 0;
  bool foundit = false;
  while (i < thisLB.ItemCount && !foundit)
  {
    if(thisLB.Items[i] == itemLookedFor)
    {
      selectedIndex = i;
      foundit = true;
    }
    i++;
  }
  return selectedIndex;
}

function show_inventory_window()
{
  fillInventoryListBox();
  playConfirm();
  open_gui(gInventory);
}


function modifyQuestNoteLineVariant(int questIndex, int lineIndex, int newVariantIndex)
{
  String lineIndex_String = String.Format("%d", lineIndex);
  String newVariantIndex_String = String.Format("%d", newVariantIndex);
  quests[questIndex].Set(lineIndex_String, newVariantIndex_String);
}

function ValidateFileIt (ListBox* classifiedProposition, Dictionary* classifiedSolution, InventoryItem* thisItem, String classifiedItemName, int addScoreAmount)
{
  bool allGood = true;
  int i = 0;
  String orderedSolution[];
  String tempString;
  orderedSolution = classifiedSolution.GetValuesAsArray();
  
  close_gui(gClassify);
  if(classifiedSolution.ItemCount != classifiedProposition.ItemCount)
  {
    player.Think("Hmm. . . That's not right");
    player.Think("Something is missing");
  } else
  {
    while(i < classifiedSolution.ItemCount && allGood)
    {
      if(orderedSolution[i] != classifiedProposition.Items[i]) {
        allGood = false;
      }
      i++;
    }
    
    if(allGood)
    {
      player.Say("Hurray! Perfectly organized");
      giveScoreOnce(thisItem.Name, addScoreAmount);
      
      switch(thisItem.ID)
      {
        case 6://Legal papers
          modifyQuestNoteLineVariant(0, 1, 2);//The papers are all in order. I have to sign these before I hand them in. I should have my writing instruments in my secretary. 
          break;
        default:
          break;
      }
      
      thisItem.Name = classifiedItemName;
      tempString = thisItem.GetTextProperty("TextDescription");
      tempString = tempString.Append("[This item is not signed");
      thisItem.SetTextProperty("TextDescription", tempString);
      thisItem.SetTextProperty("invContext", "Null");
      fillInventoryListBox();
      lbInventory.SelectedIndex = findListBoxIndexbyName(lbInventory, thisItem.Name);
      lblDescriptionSelectedItem.Text = inventory[findInvItemIndexByName(lbInventory.Items[lbInventory.SelectedIndex])].GetTextProperty("TextDescription");
    } else {
      player.Think("Hmm. . . That's not right");
    }
  }
  open_gui(gInventory);  
}

Set* breakWrittenContentByPage(String fullMessage, String pageBreakSymbol)
{
    Set* returnSet = Set.Create(eSorted);
    String currentPage;
    int currentPageNumber = 1;
    
    while(fullMessage.IndexOf(pageBreakSymbol) != -1)
    {
      currentPage = fullMessage.Truncate(fullMessage.IndexOf(pageBreakSymbol));
      currentPage = currentPage.Replace(pageBreakSymbol, "", eCaseInsensitive);
      fullMessage = removeOneStringInstance(fullMessage, currentPage.Append(pageBreakSymbol));
      currentPage = String.Format("PAGE %d[%s", currentPageNumber, currentPage);
      returnSet.Add(currentPage);
      
      currentPageNumber++;
    }
    fullMessage = String.Format("PAGE %d[%s", currentPageNumber, fullMessage);
    returnSet.Add(fullMessage);
    
    return returnSet;
}

function readThis(String fullMessage, String pageSeparator)
{
  Set* readContent = breakWrittenContentByPage(fullMessage, pageSeparator);
  String readContentToDisplay[] = readContent.GetItemsAsArray();
  int i;
  for(i = 0 ; i < readContent.ItemCount ; i++)
  {
    Display(readContentToDisplay[i]);
  }
}

//##### TELEGRAMS AND PACKAGES #####
function addHotelPackage(String packageName, String description, String note)
{
  addSubitem(iHotelPackages, packageName, description, note);
  if(player.HasInventory(iHotelPackages))
  {
    player.LoseInventory(iHotelPackages);
  }
}

function getHotelPackages()
{
  if(playerHasAnySubitem(iHotelPackages))
  {
    cConcierge.Say("You do, Mr. Harker");
    cConcierge.Say("Here they are");
    tranfertAllSubitemFromOneParentToAnother(iHotelPackages, iTelegrams);
    if(player.HasInventory(iHotelPackages))
    {
      player.LoseInventory(iHotelPackages);
    }
    if(!player.HasInventory(iTelegrams))
    {
      player.AddInventory(iTelegrams);
    }
    giveScoreOnce("Hotel packages", 1);
    player.Say("Thank you!");
  } else
  {
    cConcierge.Say("Nothing to your name, Mr. Harker");
    cConcierge.Say("Could it be under another. . . alias?");
    player.Say("No alias");
    player.Say("Thanks for checking");
  }
}

function setTelegramInclusionByIndex(String name, int msgPartIndex, bool include)
{
  telegramRecipient_messageParts_include.Set(String.Format("%s_%d", name, msgPartIndex), String.Format("%d", include));
}

function createTelegram(String name, String alternateNames, String fullNameAndCity,  String signOff, int msgPartIndex, String msgPart, bool includeByDefault, String answerPart)
{
  if(!telegramRecipient_alternateNames.Contains(name))
  {
    telegramRecipient_alternateNames.Set(name, alternateNames);
    telegramRecipient_recipientDescription.Set(name, fullNameAndCity);
    telegramRecipient_signOff.Set(name, signOff);
  }
  telegramRecipient_messageParts.Set(String.Format("%s_%d", name, msgPartIndex), msgPart);
  telegramRecipient_messageParts_include.Set(String.Format("%s_%d", name, msgPartIndex), String.Format("%d", includeByDefault));
  
  telegramAnswer_messageParts.Set(String.Format("%s_%d", name, msgPartIndex), answerPart);
  telegramAnswer_messageParts_include.Set(String.Format("%s_%d", name, msgPartIndex), String.Format("%d", includeByDefault));
}

function createAllTelegram()
{
  String nameKey;
  String altNames;
  String desc;
  String signOff;
  
  //Mina's telegrams
  nameKey = "Mina";
  altNames = "Mina, Murray, Wilhelmina, fiancee, bethroted";
  desc = "Wilhelmina Murray, in Exeter";
  signOff = "Love";
  createTelegram(nameKey, altNames, desc, signOff, 1, "In London STOP", true, "Have a good time in London STOP"); //base
  createTelegram(nameKey, altNames, desc, signOff, 2, "Back in Exeter tomorrow STOP[Sorry missed caf√© STOP", false, "Duty called STOP I understand STOP"); //If not met Mina
  createTelegram(nameKey, altNames, desc, signOff, 3, "Planned exam STOP", false, "Very exciting STOP[Keep me posted STOP"); //If planned exam at LawSociety
  createTelegram(nameKey, altNames, desc, signOff, 4, "Succeeded exam STOP", false, "How wonderful STOP[Cannot wait to celebrate this with you STOP"); //If succeeded exam at LawSociety
  createTelegram(nameKey, altNames, desc, signOff, 5, "Got major sell assignment STOP[Anticipating major royalties STOP[Need to travel to Transylvania STOP[Only be gone a few weeks STOP", false, "Be careful on your trip STOP[Hope all goes well STOP"); //If gotten assignment
  
  //Hawkins
  nameKey = "Hawkins";
  altNames = "Peter, Hawkins, Boss, solicitor";
  desc = "Mr. Peter Hawkins, Esq., in Exeter";
  signOff = "Salutations";
  createTelegram(nameKey, altNames, desc, signOff, 1, "In London STOP", true, "Hope the Hummums is convenient STOP"); //base
  createTelegram(nameKey, altNames, desc, signOff, 2, "Taken all required pictures STOP", false, "You need to go to Count Dracula's castle STOP[Cannot go STOP[gout is acting up STOP[Will send letter for Count to your Hotel by courrier STOP"); //when pictures are taken
  createTelegram(nameKey, altNames, desc, signOff, 3, "Solicitor exam succeeded STOP[Now full solicitor STOP[Very greatful for all your support STOP", false, "Congratulation on the exam STOP[I always had every possible confidence in you STOP[You are a young man full of energy and talent in your own way, and of a very faithful disposition STOP"); //succeeded
  createTelegram(nameKey, altNames, desc, signOff, 4, "I accept the assignment STOP[Very grateful for your thrust STOP", false, "Godspeed on the assignment STOP[Major royalties to fund your upcoming wedding STOP"); //aftger assignment
  
  //CarfaxSeller should be created later
}

Dictionary* setupAnswerInclude(Dictionary* usedIncludeDict)
{
  Dictionary* noAnswer = Dictionary.Create(eNonSorted);
  String originalKeys[];
  originalKeys = usedIncludeDict.GetKeysAsArray();
  int i;
  for(i = 0 ; i < usedIncludeDict.ItemCount ; i++)
  {
    noAnswer.Set(originalKeys[i], "0");
  }
  
  switch(usedIncludeDict)
  {
    case telegramRecipient_messageParts_include:
      return telegramAnswer_messageParts_include;
      break;
    default:
      return noAnswer;
      break;
  }
}

String buildTelegramToSend(String recipient, Dictionary* messages, Dictionary* inclusions)
{
  String partsToConcatenate = "";
  String msgKey[];
  Dictionary* msgAnswers = setupAnswerInclude(inclusions);
  msgKey = messages.GetKeysAsArray();
  int i;
  
  for(i = 0 ; i < messages.ItemCount ; i++)
  {
    if(msgKey[i].StartsWith(recipient) && inclusions.Get(msgKey[i]) == "1")
    {
      if(partsToConcatenate == "")
      {
        partsToConcatenate = messages.Get(msgKey[i]);
      } else
      {
        partsToConcatenate = partsToConcatenate.Append("[");
        partsToConcatenate = partsToConcatenate.Append(messages.Get(msgKey[i]));
      }
      inclusions.Set(msgKey[i], "0"); // include msgPart only once
      msgAnswers.Set(msgKey[i], "1"); // setup the answer
    }
  }
  
  if(partsToConcatenate != "")
  {
    partsToConcatenate = partsToConcatenate.Append("[");
    partsToConcatenate = partsToConcatenate.Append(String.Format("%s STOP", telegramRecipient_signOff.Get(recipient)));
  }  
  return partsToConcatenate;
}

function createCarfaxSeller()
{
  carfaxSeller = createHawkinsPropertyFile("Wintringham", "London", "East", 764);
  
  String nameKey = "Wintringham";
  String altNames = "Wintringham, Carfax, Seller";
  String desc = "Mr. Edward Wintringham, in Norwich";
  String signOff = "Regards";
  createTelegram(nameKey, altNames, desc, signOff, 1, "Interested in Carfax property in Purfleet STOP[Please confirm condition and file availability STOP", true, "Carfax is up for sale as is STOP[Made detailed sale dossier available for you at Law Society reception"); //base
  createTelegram(nameKey, altNames, desc, signOff, 2, "Acquired sale dossier STOP[Will present property to our client STOP", false, "Noted STOP[Will wait further news from you"); //after gotten dossier  
}

function addTimedEventInXMinutes(int minutes, String whatHappens)
{
  int theseMinutes = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
  theseMinutes = theseMinutes + minutes;
  
  timedEvents.Set(String.Format("%05d_%s", theseMinutes, whatHappens), whatHappens);
}

function removeTimedEvent(String timedEventKey)
{
  if(timedEvents.Contains(timedEventKey))
  {
    timedEvents.Remove(timedEventKey);
  }
}

bool playerHasTimedEventByWhatHappens(String whatHappens)
{
  String theseValues[];
  theseValues = timedEvents.GetValuesAsArray();
  int i = 0;
  bool returnBool = false;
  
  while(i < timedEvents.ItemCount && !returnBool)
  {
    if(theseValues[i] == whatHappens)
    {
      returnBool = true;
    } else
    {
      i++;
    }
  }
  
  return returnBool;
}

function removeTimedEventByWhatHappens(String whatHappens)
{
  String theseKeys[];
  String theseValues[];
  theseValues = timedEvents.GetValuesAsArray();
  theseKeys = timedEvents.GetKeysAsArray();
  int i;
  
  for(i = 0 ; i < timedEvents.ItemCount ; i++)
  {
    if(theseValues[i] == whatHappens)
    {
      removeTimedEvent(theseKeys[i]);
    }
  }
}

bool getGottaSleep()
{
  return gottaSleep;
}

function hasSlept()
{
  removeTimedEventByWhatHappens("Sleep complaint");
  removeTimedEventByWhatHappens("Forced sleep");
  addTimedEventInXMinutes((17 * 60), "Sleep complaint");
  lastSleepTime = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
  gottaSleep = false;
}

function hasEaten()
{
  removeTimedEventByWhatHappens("Hungry complaint");
  addTimedEventInXMinutes((7 * 60), "Hungry complaint");
  lastMealTime = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
}

function setBasicTimedEvents()
{
  addTimedEventInXMinutes((7 * 60), "Hungry complaint"); // hungry in 7 hours
  addTimedEventInXMinutes((17 * 60), "Sleep complaint"); // sleepy in 17 hours
  addTimedEventInXMinutes((30), "Beard growth"); // by 1%
  gottaSleep = false;
}

Dictionary* cutByStops(String msg)
{
  Dictionary* listOfSentences = Dictionary.Create(eSorted);
  msg = msg.Replace("[", "", eCaseInsensitive);
  String workingString;
  int i = 0;
  
  while(msg.IndexOf("STOP") != -1)
  {
    workingString = msg.Truncate(msg.IndexOf("STOP") + 4);
    msg = removeOneStringInstance(msg, workingString);
    if(msg.StartsWith(" "))
    {
      msg = removeOneStringInstance(msg, " ");
    }
    listOfSentences.Set(String.Format("%09d", i), workingString);
    i++;
  }
  listOfSentences.Set(String.Format("%09d", i), msg);
  
  return listOfSentences;
}

function sendTelegram(String recipientName)
{
  String sendThis = buildTelegramToSend(recipientName, telegramRecipient_messageParts, telegramRecipient_messageParts_include);
  Dictionary* thingsToSay_d;
  String thingsToSay_s[];
  int i;
  int randomizer = 60;
  int delay;
  
  if(sendThis == "")
  {
    player.Say("Scratch that, I already sent them all I needed");
  } else
  {
    thingsToSay_d = cutByStops(sendThis);
    thingsToSay_s = thingsToSay_d.GetValuesAsArray();
    for(i = 0 ; i < thingsToSay_d.ItemCount ; i++)
    {
      player.Say(thingsToSay_s[i]);
    }
    if(Game.DoOnceOnly("Ask name and address"))
    {
      cTelegramOperator.Say("And finally: Your name and 'lieu' of residence?");
      if(player.HasInventory(iDiploma))
      {
        player.Say("Jonathan Harker, Esq.");
      } else
      {
        player.Say("Jonathan Harker");
      }
      player.Say("I reside at the Hotel the Hummums while in London");
    }
    cTelegramOperator.Say("Noted, Mr. Harker. I will send this in a minute");
    cTelegramOperator.Say("If and when an answer comes, I will send it to your hotel by messenger");
    delay = 60 + Random(randomizer);
    addTimedEventInXMinutes(delay, String.Format("Telegram answer from %s", recipientName));
    
    if(recipientName == "Hawkins" && sendThis.IndexOf("Taken all required pictures") != -1)
    {
      removeTimedEventByWhatHappens("Max time for photos & telegram");
      player.FaceDirection(eDirectionDown);
      player.Say(String.Format("%s", whatTimeIsIt(true)));
      if(isItBeforeThisTime(3, 15, 0, true, 2))
      {
        player.Say("Telegram sent with plenty of time to spare");
        giveScoreOnce("telegram sent with plenty of time", 2);
      } else
      {
        player.Say("A bit more last minute than I'd like, but the job's done");
      }
      player.FaceDirection(eDirectionUp);
    }
  }
}

String findTelegramRecipientByName(String givenName)
{
  String possibleName[];
  possibleName = telegramRecipient_alternateNames.GetKeysAsArray();
  int i = 0;
  String returnName = "Null";
  String listOfAlternates;
  
  while(i < telegramRecipient_alternateNames.ItemCount)
  {
    listOfAlternates = telegramRecipient_alternateNames.Get(possibleName[i]);
    if(listOfAlternates.IndexOf(givenName) != -1)
    {
      returnName = possibleName[i];
      i = telegramRecipient_alternateNames.ItemCount;
    } else {
      i++;
    }
  }
  
  return returnName;
}

function handleTelegramRecipient(String textInput)
{
  String originalInput = textInput;
  String actualRecipient = "Null";
  String workingString = "";
  Dictionary* eachWordInPrompt = Dictionary.Create(eSorted);
  int dictIndex = 0;
  String eachWordArray[];
  
  
  while(textInput.IndexOf(" ") != -1) // build a dictionary of words to test
  {
    workingString = textInput.Truncate(textInput.IndexOf(" "));
    textInput = textInput.Substring(workingString.Length, textInput.Length);
    if(textInput.StartsWith(" "))
    {
      textInput = textInput.Substring(1, textInput.Length);
    }
    
    workingString = workingString.Replace(" ", "", eCaseInsensitive);
    eachWordInPrompt.Set(String.Format("%09d", dictIndex), workingString);
    dictIndex++;
  }
  eachWordInPrompt.Set(String.Format("%09d", dictIndex), textInput);
  
  eachWordArray = eachWordInPrompt.GetValuesAsArray();
  dictIndex = 0;
  
  while(dictIndex < eachWordInPrompt.ItemCount && actualRecipient == "Null")
  {
    actualRecipient = findTelegramRecipientByName(eachWordArray[dictIndex]);
    dictIndex++;
  }
  
  if(actualRecipient == "Null")
  {
    player.Say(String.Format("%s?", originalInput));
    cTelegramOperator.Say("That sounded more like a question than an answer!");
    cTelegramOperator.Say("Do you think I'll find this name with an interrogation point in my directory?");
    cTelegramOperator.Say("Ha ha ha!");
    cTelegramOperator.Say("I'm just being silly");
    cTelegramOperator.Say("But that name is not in my directory");
  } else
  {
    player.Say(telegramRecipient_recipientDescription.Get(actualRecipient));
    cTelegramOperator.Say("And what is the message?");
    sendTelegram(actualRecipient);
  }
  dTelegram.Start();
}

//##### PERMITTED ENTRANCE #####
function setOpeningAndClosingTimeForACommerce(commerce thisCommerce, String thisOpeningTime, String thisClosingTime, bool rebuteWhenClosed)
{
  String rebute = "false";
  if(rebuteWhenClosed)
  {
    rebute = "true";
  }
  
  commerce_openingTime.Set(commerceAsString(thisCommerce), thisOpeningTime);
  commerce_closingTime.Set(commerceAsString(thisCommerce), thisClosingTime);
  commerce_rebuteWhenClosed.Set(commerceAsString(thisCommerce), rebute);
}

function setOpeningAndClosingTimes()
{
  setOpeningAndClosingTimeForACommerce(Museum, translateTimeToHHMMAM(10, 0, "AM"), translateTimeToHHMMAM(5, 0, "PM"), true);
  setOpeningAndClosingTimeForACommerce(HawkinsEsq, translateTimeToHHMMAM(8, 0, "AM"), translateTimeToHHMMAM(4, 30, "PM"), true);
  setOpeningAndClosingTimeForACommerce(LawSocietyBuilding, translateTimeToHHMMAM(10, 0, "AM"), translateTimeToHHMMAM(4, 30, "PM"), true);
  setOpeningAndClosingTimeForACommerce(Shop, translateTimeToHHMMAM(9, 0, "AM"), translateTimeToHHMMAM(6, 0, "PM"), true);
  setOpeningAndClosingTimeForACommerce(TrainStation, translateTimeToHHMMAM(6, 0, "AM"), translateTimeToHHMMAM(11, 0, "PM"), false);
  setOpeningAndClosingTimeForACommerce(AlwaysOpened, translateTimeToHHMMAM(0, 00, "AM"), translateTimeToHHMMAM(11, 59, "PM"), false);
}

commerce getCommerceType(zone targetZone)
{
  return stringAsCommerce(zone_CommerceType.Get(zoneAsString(targetZone)));
}

function setCurrentZone(zone thisZone)
{
  currentZone = thisZone;
  currentCommerceType = getCommerceType(currentZone);
}

String isThisPlaceOpened(commerce commerceType)
{
  String thisTime = whatTimeIsIt(false);
  String minTime = commerce_openingTime.Get(commerceAsString(commerceType));
  String maxTime = commerce_closingTime.Get(commerceAsString(commerceType));
  int openedFor;
  String giveOpeningTimes = String.Format("Closed! The sign says it is opened from %s to %s", minTime, maxTime);
  
  if(commerceType == AlwaysOpened)
  {
    return "opened";
  } else if(isThisTimeBeforeThisTime(thisTime, minTime)) //not opened yet
  {
    return giveOpeningTimes;
  } else if (isThisTimeBeforeThisTime(maxTime, thisTime)) //alreadyclosed
  {
    return giveOpeningTimes;
  } else if (isThisTimeWithinXminOfThisTime(thisTime, maxTime, 30))
  {
    openedFor = translateTimeToMinutes(maxTime) - translateTimeToMinutes(thisTime);
    return String.Format("%d", openedFor);
  } else
  {
    return "opened";
  }
}

bool isThisPlaceOpened_bool(commerce commerceType)
{
  String isIt = isThisPlaceOpened(commerceType);
  return !isIt.StartsWith("Close");
}

zone manageEntranceToCommerce(zone destination)
{
  commerce commerceType = getCommerceType(destination);
  String state = isThisPlaceOpened(commerceType);
  bool rebute = (state.StartsWith("Close") && commerce_rebuteWhenClosed.Get(commerceAsString(commerceType)) == "true");
  
  commerce commerceType2 = getCommerceType(currentZone);
  String state2 = isThisPlaceOpened(commerceType2);
  bool rebute2 = (state2.StartsWith("Close") && commerce_rebuteWhenClosed.Get(commerceAsString(commerceType2)) == "true");
  
  if (!rebute)
  {
    return destination;
  } else if (rebute && !rebute2)
  {
    return currentZone;
  } else
  {
    if (city_TravelDestinations.Get(zoneAsString(currentZone)) == "Exeter")
    {
      return JonathanApt;
    } else
    {
      return LondonTrainStation;
    }
  }
}

zone getWantedDestination()
{
  return wantedDestination;
}

zone getRealDestination()
{
  return realDestination;
}

function setTravellingBool(bool targetbool)
{
  travelling = targetbool;
}

bool getTravellingBool()
{
  return travelling;
}

function travel_movePlayer(zone destination,  bool addTravelTime)
{
  CharacterDirection arrivalDirection;
  String roomDestination;
  int futureRoom;
  int minutesOfTravel;
  
  wantedDestination = destination;
  travelling = true;
  
  realDestination = manageEntranceToCommerce(destination);
  
  if(wantedDestination != realDestination)
  {
    player.ChangeRoom(12, 156, 142, eDirectionDown);
  } else
  {
    roomDestination = roomForEachTravelDestinations.Get(zoneAsString(realDestination));
    futureRoom = roomDestination.AsInt;
    
    if(addTravelTime)
    {
      minutesOfTravel = travelDestinationTimeInMinutes(getCurrentZone(), getWantedDestination());
      addTime(0, minutesOfTravel, 0, 0);
    }
    loseThought();
  
    player.ChangeRoom(futureRoom, arrival_x[futureRoom], arrival_y[futureRoom], faceDirection[futureRoom]);
    cHarkersBeard.ChangeRoom(futureRoom, arrival_x[futureRoom], arrival_y[futureRoom], faceDirection[futureRoom]);
    addTravelDestination(wantedDestination);
    setCurrentZone(realDestination);
    travelling = false;
  }
}

function travel(zone destination)
{
  if(destination != StayHere)
  {
    travel_movePlayer(destination,  true);
  } else {
    player.Walk(arrival_x[player.Room], arrival_y[player.Room], eBlock, eAnywhere);
    player.FaceDirection(faceDirection[player.Room]);
  }
}

//##### FOOD #######
function addFood(String foodName, String alternateNames, String textDescription)
{
  if(!food_description.Contains(foodName))
  {
    int spoilTime = translateTimeToMinutes(whatTimeIsIt(false)) + (6*60) + (currentDay * 24 * 60);
    String spoilTimeAsString = String.Format("%d", spoilTime);
    addSubitem(iFood, foodName, textDescription, "This food is still good");
    food_alternateNames.Set(foodName, String.Format("%s,%s", foodName, alternateNames));
    food_spoilTime.Set(foodName, spoilTimeAsString);
  } else
  {
    player.Say(String.Format("I already have %s, I better eat mine instead, before it spoils", foodName));
  }
}

bool isFoodSpoiled(String foodName)
{
  int currentMinutes = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
  String foodSpoilTime_asString = food_spoilTime.Get(foodName);
  int foodSpoilTime = foodSpoilTime_asString.AsInt;
  return (currentMinutes > foodSpoilTime);
}

function updateFoodFreshness()
{
  String foodNames[];
  foodNames = food_spoilTime.GetKeysAsArray();
  int i;
  
  for(i = 0 ; i < food_spoilTime.ItemCount ; i++)
  {
    if(isFoodSpoiled(foodNames[i]))
    {
      food_notes.Set(foodNames[i], "This food is spoiled. I can throw it out in any caf√©'s bin");
    } 
  }
}

bool playerHasSpoiledFood()
{
  bool returnBool = false;
  String foodNames[];
  foodNames = food_spoilTime.GetKeysAsArray();
  int i = 0;
  while(i < food_spoilTime.ItemCount)
  {
    if(isFoodSpoiled(foodNames[i]))
    {
      i = food_spoilTime.ItemCount;
      returnBool = true;
    } else
    {
      i++;
    }
  }
  return returnBool;
}

function cleanAllSpoiledFood()
{
  String foodNames[];
  foodNames = food_spoilTime.GetKeysAsArray();
  int i;
  for(i = 0 ; i < food_spoilTime.ItemCount ; i++)
  {
    if(isFoodSpoiled(foodNames[i]))
    {
      switch(Random(3))
      {
        case 0:
          player.Say(String.Format("Away with the spoiled %s", foodNames[i]));
          break;
        case 1:
          player.Say(String.Format("Spoiled %s is discarded", foodNames[i]));
          break;
        case 2:
          player.Say(String.Format("No need for a spoiled %s", foodNames[i]));
          break;
        default:
          player.Say(String.Format("Spoiled %s are smelly", foodNames[i]));
          break;
      }
      removeSubitem(iFood, foodNames[i], false);
      food_spoilTime.Remove(foodNames[i]);
    } 
  }
  if(playerHasSpoiledFood())
  {
    dMenu.SetOptionState(9,eOptionOn);
  } else
  {
    dMenu.SetOptionState(9,eOptionOff);
  }
}

bool isPlayerHungry()
{
  int nowInMinutes = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
  return ((lastMealTime + (4 * 60)) < nowInMinutes);
}

bool isPlayerDrowsy()
{
  int nowInMinutes = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
  return ((lastSleepTime + (12 * 60)) < nowInMinutes);
}

String findFoodByName(String cmd)
{
  String returnName = "Null";
  String altNames;
  String foodList[];
  String foodKey[];
  String alternateName[];
  int i = 0;
  int y = 1;

  foodList = food_alternateNames.GetValuesAsArray();
  foodKey = food_alternateNames.GetKeysAsArray();
  while(i < food_alternateNames.ItemCount)
  {
    alternateName = split(foodList[i], ", ");
    while(y < alternateName[0].AsInt) // [0] is the length
    {
      if(cmd.IndexOf(alternateName[y]) != -1)
      {
        returnName = foodKey[i];
        y = alternateName[0].AsInt;
        i = food_alternateNames.ItemCount;
      } else
      {
        y++;
      }
    }
    i++;
  }
  return returnName;
}

function eatFood(String foodName)
{
  foodName = findFoodByName(foodName);
  if(foodName == "Null")
  {
    player.Say("I do not have this food");
  } else
  {
    if(isPlayerHungry())
    {
      player.Say(String.Format("I am hungry for a %s", foodName));
      if(isFoodSpoiled(foodName))
      {
        player.Say("Blo. . . H. . .! Ew!");
        player.Say("That food is spoiled");
        removeSubitem(iFood, foodName, false);
        GiveScore(-1);
      } else
      {
        player.Say("Delicious!");
        removeSubitem(iFood, foodName, false);
        hasEaten();
      }
    } else
    {
      player.Say("I ate not that long ago");
    }
  }
}

//####### PICTURES ######
int getNbNegative()
{
  return nbNegatives;
}

int getNbMissingNegatives()
{
  return MAXNEGATIVE - nbNegatives;
}

function setNumberOfNegative(int targetNbNegative)
{
  String nbNegativesMsg = "I have ### negative@ left";
  
  if(targetNbNegative < 0)
  {
    nbNegatives = 0;
  } else if (targetNbNegative > MAXNEGATIVE)
  {
    nbNegatives = MAXNEGATIVE;
  } else
  {
    nbNegatives = targetNbNegative;
  }
  
  switch(nbNegatives)
  {
    case 0:
      nbNegativesMsg = nbNegativesMsg.Replace("###", "no", eCaseInsensitive);
      nbNegativesMsg = nbNegativesMsg.Replace("@", "s", eCaseInsensitive);
      break;
    case 1:
      nbNegativesMsg = nbNegativesMsg.Replace("###", "1", eCaseInsensitive);
      nbNegativesMsg = nbNegativesMsg.Replace("@", "", eCaseInsensitive);
      break;
    default:
      nbNegativesMsg = nbNegativesMsg.Replace("###", String.Format("%d", nbNegatives), eCaseInsensitive);
      nbNegativesMsg = nbNegativesMsg.Replace("@", "s", eCaseInsensitive);
      break;
  }
  iCamera.SetTextProperty("TextDescription", String.Format("This is the office's photo camera. State of the art technology![[%s", nbNegativesMsg));
  
  if(!playerHasTravelDestination(PhotographyShop) && nbNegatives < 4)
  {
    gameIsOver("Jonathan likes photos too much");
  }
}

function resetNbNegativesToMax()
{
  setNumberOfNegative(MAXNEGATIVE);
}

int playerHasHowManyCarfaxPictureByState(bool negativeORphotos)
{
  int nbPictures = 0;
  String currentSubject;
  InventoryItem* pictureItem;
  if(negativeORphotos)
  {
    pictureItem = iFilm;
  } else
  {
    pictureItem = iPhotos;
  }
  
  currentSubject = "Carfax's Kitchen";
  if(playerHasSubitem(currentSubject, pictureItem))
  {
    nbPictures++;
  }
  
  currentSubject = "Carfax's Living";
  if(playerHasSubitem(currentSubject, pictureItem))
  {
    nbPictures++;
  }
  
  currentSubject = "Carfax's Dining";
  if(playerHasSubitem(currentSubject, pictureItem))
  {
    nbPictures++;
  }
 
  currentSubject = "Carfax's Bedroom";
  if(playerHasSubitem(currentSubject, pictureItem))
  {
    nbPictures++;
  }
  
  return nbPictures;
}

bool playerHasAllCarfaxPictures() 
{
  bool allPhotos;
  
  if(playerHasHowManyCarfaxPictureByState(false) + playerHasHowManyCarfaxPictureByState(true) == 4)
  {
    allPhotos = true;
  } else
  {
    allPhotos = false;
  }
  
  if(allPhotos)
  {
    if(Game.DoOnceOnly("taken all 4 photos"))
    {
      setTelegramInclusionByIndex("Hawkins", 2, true);
      modifyCloudiness(15);
    }
  }
  
  return allPhotos;
}

bool playerOnlyHasCaxfaxPictures()
{
  return (playerHasHowManyCarfaxPictureByState(false));
}

function addStuckEnveloppe()
{
  if(!player.HasInventory(iBritishMuseumTicket) && dLibrarian.GetOptionState(14) != eOptionOn)
  {
    if(Game.DoOnceOnly("Add stuck enveloppe"))
    {
      addHotelPackage("E Nash Letter", "This letter is not mine. It is addressed to a certain Edith Nash. It must have been stuck to my messages in the delievery", "I should probably bring it back to the telegram office");
    }
  }
}

function embarkTrain()
{
  isOnTrain = true;
}

bool wasOnTrain()
{
  if(isOnTrain)
  {
    isOnTrain = false;
    return true;
  } else
  {
    return false;
  }
}

function triggerTimedEvent(String timedEventKey, String whatHappens)
{
  String CarfaxSellerTelegramAnswer = String.Format("Telegram answer from %s", getCarfaxSeller());
  
  removeTimedEvent(timedEventKey);
  switch(whatHappens)
  {
    case "Beard growth":
      cHarkersBeard.Transparency = cHarkersBeard.Transparency - 1;
      addTimedEventInXMinutes((30), "Beard growth");
      break;
    case "Hungry complaint":
      if(player.Room != 13)
      {
        player.Say("I have not had a bite in a while, I am quite hungry");
        GiveScore(-1);
      }
      addTimedEventInXMinutes((60), "Hungry complaint");
      break;
    case "Sleep complaint":
      if(player.Room != 13)
      {
        player.Say("*yawn*");
        player.Say("Oh my, I have not slept in quite a while");
        if(getCurrentCity() == "Exeter")
        {
          player.Say("Better get home to take a nap");       
        } else
        {
          player.Say("Better head to the hotel to take a nap");
        }
        addTimedEventInXMinutes(60, "Forced sleep");
      } else
      {
        Display("Jonathan was drowsy and took a nap");
        addTime(0, 15, 0, 0);
        hasSlept();
      }
      break;
    case "Forced sleep":
      player.Say("*yawn*");
      player.Say("Ok, I have to go get some sleep");
      gottaSleep = true;
      if(getCurrentCity() == "Exeter")
      {
        if(player.Room == 1)
        {
          player.Walk(61, 172, eBlock, eWalkableAreas);
          FadeOut(5);
          addTime(1, 0, 0, 0);
          hasSlept();
          player.FaceDirection(eDirectionRight);
          FadeIn(5);
          player.Say("Ah, I feel refreshed");
        } else
        {
          travel(JonathanApt);
        }
      } else
      {
        travel(LondonHotel);
        addTime(1, 0, 0, 0);
        hasSlept();
      }
      GiveScore(-1);
      break;
    case "Max time for photos & telegram":
      player.Say(String.Format("Oh no. . . It is %s", whatTimeIsIt(true)));
      if(playerHasAllCarfaxPictures())
      {
        player.Say("I had to send a telegram to Mr. Hawkins before his train left");
        gameIsOver("Jonathan failed his assignment");
      }
      break;
    case "Telegram answer from Mina":
      addHotelPackage(String.Format("Mina - %s", whatTimeIsIt(false)), buildTelegramToSend("Mina", telegramAnswer_messageParts, telegramAnswer_messageParts_include), String.Format("Telegram send by %s - received at %s", telegramRecipient_recipientDescription.Get("Mina"), whatTimeIsIt(false)));
      addStuckEnveloppe();
      break;
    case "Telegram answer from Hawkins":
      addHotelPackage(String.Format("Hawkins - %s", whatTimeIsIt(false)), buildTelegramToSend("Hawkins", telegramAnswer_messageParts, telegramAnswer_messageParts_include), String.Format("Telegram send by %s - received at %s", telegramRecipient_recipientDescription.Get("Hawkins"), whatTimeIsIt(false)));
      addStuckEnveloppe();
      addTimedEventInXMinutes(3 * 60, "Hawkins' Letter");
      break;
    case CarfaxSellerTelegramAnswer:
      addHotelPackage(String.Format("%s - %s", carfaxSeller, whatTimeIsIt(false)), buildTelegramToSend(carfaxSeller, telegramAnswer_messageParts, telegramAnswer_messageParts_include), String.Format("Telegram send by %s - received at %s", telegramRecipient_recipientDescription.Get(carfaxSeller), whatTimeIsIt(false)));
      addStuckEnveloppe();
      break;
    case "Hawkins' Letter":
      addHotelPackage("Instructions", "This letter, signed by Count Dracula, describes the suggested itinerary from London to Transylvania", "Suggested route: London, Southamptons, Paris, Munich, Vienna, Budapest, Klausenburg, Bistritz");
      addHotelPackage("Munich's contracts", "Mr. Hawkins planned to stop a few days in Munich and negotiate some dealings with different Londonian firms", "Stops: Old Pinakothek Museum, Munich Opera House, Municipal Dead House");
      addHotelPackage("To Dracula", "Mr. Hawkins's letter to the Count, explaining that I will handled his purchase", "It reads: 'I must regret that an attack of gout, from which malady I am a constant sufferer, forbids absolutely any travelling on my part for some time to come; but I am happy to say I can send a sufficient substitute, one in whom I have every possible confidence. He is a young man, full of energy and talent in his own way, and of a very faithful disposition. He is discreet and silent, and has grown into manhood in my service. He shall be ready to attend on you when you will during his stay, and shall take your instructions in all matters.'");
      addStuckEnveloppe();
      break;
    case "Imminent telegram":
      if(player.Room == 8 && !getMorseClues(4))
      {
        if(!isNoteTaken("Intercepted code"))
        {
          object[2].SetView(29, 0, 0);
          object[2].Animate(0, 8, eRepeat, eNoBlock, eForwards);
          Display("The telegraph receiver is activating[A message will probably be received soon");
          player.FaceLocation(200, 120, eBlock);
          player.Say("The receiver's volume is set to low. I will need to be very close to each the message");
          addTimedEventInXMinutes(1, "Incoming telegram");
        }
      }
      break;
    case "Incoming telegram":
      if(player.Room == 8 && !getMorseClues(4))
      {
        CallRoomScript(4);
      }
      break;
  }
}

int extractTimeFromTimedEventKey(String theKey)
{
  String returnString = theKey.Truncate(theKey.IndexOf("_"));
  returnString = returnString.Replace("_", "", eCaseInsensitive);
  return returnString.AsInt;
}

function isThereAnExpiredTimedEvent()
{
  
  if(!handlingTriggeredEvent)
  {
    int thisTime = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
    int nbActiveTimedEvents = timedEvents.ItemCount;
    String timedEventList[];
    timedEventList = timedEvents.GetKeysAsArray();
    int i = 0;
    
    while (i < nbActiveTimedEvents)
    {
      if(thisTime > extractTimeFromTimedEventKey(timedEventList[i]))
      {
        triggerTimedEvent(timedEventList[i], timedEvents.Get(timedEventList[i]));
        i++;
      } else
      {
        i++;
      }
    }
  }
}

function takeAPicture(String subject, String pictureDescription, int score)
{
  if(!player.HasInventory(iCamera))
  {
    player.Say("I need a camera to take pictures");
  } else if(nbNegatives < 1)
  {
    player.Say("I am out of film. . .");
  } else
  {
    setNumberOfNegative(nbNegatives - 1);
    addSubitem(iFilm, subject, pictureDescription, "This picture must be developed by a professional before I can use it");
    Display("Click!");
    player.Say(String.Format("I took a picture of the %s", subject));
    if(Game.DoOnceOnly("Talk about developped photos"))
    {
      player.Say("Of course it must be developed by a professional before I can use it");
    }
    
    if(score != 0)
    {
      giveScoreOnce(String.Format("Picture of %s", subject), score);
    }
    
    if(playerHasAllCarfaxPictures())
    {
      if(Game.DoOnceOnly("All Carfax's pictures"))
      {
        player.Say("Splendid, I have all four pictures of this property for the file");
        player.Say("Time to head back to London");
        player.Say("I must send a telegram to Mr. Hawkins as soon as possible");
        addTravelDestination(TelegramOffice);
      }
    }
  }
}

//####### INTERACTIONS #######



function findElementContaining(String keyword) // makes a list of found things reacting to the 'find' keyword
{
  int i;
  bool intro = false;
  bool invIntro = false;
  String nameAndAKA;
  String article = "";
  String allElementsMentionned = "";
  
  //OBJECTS IN THE ROOM
  for(i = 0; i < Room.ObjectCount; i++) {
    nameAndAKA = object[i].Name;
    if(object[i].GetTextProperty("alternateNames") != "")
    {
      nameAndAKA = nameAndAKA.Append(", ");
      nameAndAKA = nameAndAKA.Append(object[i].GetTextProperty("alternateNames"));
    }
    if(nameAndAKA.IndexOf(keyword) != -1) {
      if(!intro)
      {
        player.Say("Looking around, I can spot. . .");
        intro = true;
      }
      player.FaceObject(object[i], eBlock);
      article = whichArticle(allElementsMentionned, object[i].Name);
      player.Say(String.Format("%s %s over there.", article,  object[i].Name));
      allElementsMentionned = allElementsMentionned.Append(String.Format("%s ", object[i].Name));
    }
  }
  //HOTSPOTS IN THE ROOM
  for(i = 0; i < 50; i++) {
    nameAndAKA = hotspot[i].Name;
    if(hotspot[i].GetTextProperty("alternateNames") != "")
    {
      nameAndAKA = nameAndAKA.Append(", ");
      nameAndAKA = nameAndAKA.Append(hotspot[i].GetTextProperty("alternateNames"));
    }
    if(nameAndAKA.IndexOf(keyword) != -1) {
      if(!intro)
      {
        player.Say("Looking around, I can spot. . .");
        intro = true;
      }
      player.FaceLocation(hotspot[i].WalkToX, hotspot[i].WalkToY, eBlock);
      article = whichArticle(allElementsMentionned, hotspot[i].Name);
      player.Say(String.Format("%s %s over there.", article,  hotspot[i].Name));
      allElementsMentionned = allElementsMentionned.Append(String.Format("%s ", hotspot[i].Name));
    }
  }
  //CHARACTERS IN THE ROOM
  for(i = 0; i < Game.CharacterCount; i++) {
    nameAndAKA = character[i].Name;
    if(character[i].GetTextProperty("alternateNames") != "")
    {
      nameAndAKA = nameAndAKA.Append(", ");
      nameAndAKA = nameAndAKA.Append(character[i].GetTextProperty("alternateNames"));
    }
    if(nameAndAKA.IndexOf(keyword) != -1 && player.Room == character[i].Room) {
      if(!intro)
      {
        player.Say("Looking around, I can spot. . .");
        intro = true;
      }
      player.FaceCharacter(character[i]);
      player.Say(String.Format("%s over there.", character[i].Name));
    }
  }
  //OWNED INVENTORY ITEMS
  for(i = 1; i <= Game.InventoryItemCount; i++) {
    nameAndAKA = inventory[i].Name;
    if(inventory[i].GetTextProperty("alternateNames") != "")
    {
      nameAndAKA = nameAndAKA.Append(", ");
      nameAndAKA = nameAndAKA.Append(inventory[i].GetTextProperty("alternateNames"));
    }
    if(nameAndAKA.IndexOf(keyword) != -1 && player.HasInventory(inventory[i])) {
      if(!invIntro)
      {
        if(intro)
        {
          player.Say("Also. . .");
        }
        player.Say("In my inventory, I can spot. . .");
        invIntro = true;
        intro = true;
      }
      player.FaceDirection(eDirectionDown);
      article = whichArticle(allElementsMentionned, inventory[i].Name);
      player.Say(String.Format("%s %s.", article, inventory[i].Name));
      allElementsMentionned = allElementsMentionned.Append(String.Format("%s ", inventory[i].Name));
    }
  }
}

function useInteraction(String cmd) // either 'interact' or 'UseInv' version of runInteraction is used
{
  String OnSynonym = isInteractionOnElement(cmd);
  String useSynonym = cmdStartsWithUSEsynonym(cmd);
  
  String cmdUsed;
  String cmdOn;
  
  String indexElementUsed[] = new String[2];
  elementType eTUsed;
  int indexUsed;
  bool canUse = true;
  
  String indexElementOn[] = new String[2];
  elementType eTOn;
  int indexOn;
  
  elementType eTTemp;
  int indexTemp;
    
  if(OnSynonym == "Null") // there is only one verb (use) and a target
  {
      cmd = removeOneStringInstance(cmd, useSynonym.Append(" "));
      indexElementUsed = findElementIndexByName(cmd);
      
      if(indexElementUsed[1] == "Null")
      {
        player.Think("I am not sure what to use");
      } else {
        eTUsed = stringToET(indexElementUsed[1]);
        indexUsed = indexElementUsed[0].AsInt;
        // to handled generic unhandled exception later
        useET = eTUsed;
        useIndex = indexUsed;
        
        switch(eTUsed)
        {
          case roomObjects:
            if(isCharacterNearObject(object[indexUsed], reachDistance, player))
            {
              object[indexUsed].RunInteraction(eModeInteract);
            } else {
              player.Think(String.Format("I need to get closer to the %s to use it", object[indexUsed].Name.LowerCase()));
            }
            break;
          case roomHotspots:
            if(isCharacterNearHotspot(hotspot[indexUsed], reachDistance, player))
            {
              hotspot[indexUsed].RunInteraction(eModeInteract);
            } else {
              player.Think(String.Format("I need to get closer to the %s to use it", hotspot[indexUsed].Name.LowerCase()));
            }
            break;
          case allInventoryItems:
            if(player.HasInventory(inventory[indexUsed]))
            {
              inventory[indexUsed].RunInteraction(eModeInteract);
            } else {
              player.Think("I am not sure what you want me to use");
            }
            break;
          default:
            player.Think("I am not sure what you want me to use");
            break;
        }
      } 
  } else // The player wants to use something on/with something
  {
    cmd = removeOneStringInstance(cmd, useSynonym.Append(" "));
    cmdUsed = cmd.Truncate(cmd.IndexOf(OnSynonym));
    cmd = removeOneStringInstance(cmd, cmdUsed);
    cmdOn = removeOneStringInstance(cmd, OnSynonym);
    indexElementUsed = findElementIndexByName(cmdUsed);
    indexElementOn = findElementIndexByName(cmdOn);
    
    if(indexElementOn[1] == "Null" || indexElementUsed[1] == "Null")
    {
      player.Think("I am not sure what you want me to do");
    } else {
      eTUsed = stringToET(indexElementUsed[1]);
      indexUsed = indexElementUsed[0].AsInt;
      eTOn = stringToET(indexElementOn[1]);
      indexOn = indexElementOn[0].AsInt;
      
      if(eTOn == allInventoryItems && eTUsed != allInventoryItems) // if the 2nd is an item but not the first,  invert them
      {
        indexTemp = indexOn;
        eTTemp = eTOn;
        indexOn = indexUsed;
        eTOn = eTUsed;
        indexUsed = indexTemp;
        eTUsed = eTTemp;
      }
      if(eTUsed == allCharacters && eTOn != allCharacters) // if the 1st is a character but not the second,  invert them
      {
        indexTemp = indexOn;
        eTTemp = eTOn;
        indexOn = indexUsed;
        eTOn = eTUsed;
        indexUsed = indexTemp;
        eTUsed = eTTemp;
      }
      
      if(eTUsed == allInventoryItems)
      {
        if(!player.HasInventory(inventory[indexUsed]))
        {
          canUse = false;
        }
      } else if (eTUsed == allCharacters)
      {
        if(character[indexUsed].Room != player.Room)
        {
          canUse = false;
        }
      }
          
          
      if(canUse)
      {
        activeElementToUse_ElementType = etToString(eTUsed);
        activeElementToUse_Index = indexUsed;
        
        useET = eTUsed;
        useIndex = indexUsed;

        switch(eTOn)
        {
          case roomObjects:
            if(isCharacterNearObject(object[indexOn], reachDistance, player))
            {
              object[indexOn].RunInteraction(eModeUseinv);
            } else {
              player.Think(String.Format("I need to get closer to the %s to use my %s on it", object[indexOn].Name.LowerCase(), inventory[indexUsed].Name.LowerCase()));
            }              
            break;
          case roomHotspots:
            if(isCharacterNearHotspot(hotspot[indexOn], reachDistance, player))
            {
              hotspot[indexOn].RunInteraction(eModeUseinv);
            } else {
              player.Think(String.Format("I need to get closer to the %s to use my %s on it", hotspot[indexOn].Name.LowerCase(), inventory[indexUsed].Name.LowerCase()));
            }
            break;
          case allCharacters:
            if(character[indexOn].Room == player.Room && isCharacterNearCharacter(character[indexOn], reachDistance, player))
            {
              character[indexOn].RunInteraction(eModeUseinv);
            } else {
              player.Think(String.Format("I need to get closer to %s to use my %s on them", hotspot[indexOn].Name.LowerCase(), inventory[indexUsed].Name.LowerCase()));
            }
            break;
          case allInventoryItems:
            if(player.HasInventory(inventory[indexOn]))
            {
              inventory[indexOn].RunInteraction(eModeUseinv);
            } else {
              player.Think("I am not sure what you want me to use");
            }
            break;
          default:
            break;
        }
      } else {
        player.Think("I am not sure what you want me to use");
      }
    }
  }
}

int getNbOfDayPerMonth(int monthNumber)
{
  switch(monthNumber)
  {
    case 2:
      return 28;
      break;
    case 4:
      return 30;
      break;
    case 6:
      return 30;
      break;
    case 9:
      return 30;
      break;
    case 11:
      return 30;
      break;
    default:
      return 31;
      break;
  }
}

String getMonthName(int monthIndex)
{
  switch(monthIndex)
  {
    case 1:
      return "January";
      break;
    case 2:
      return "February";
      break;
    case 3:
      return "March";
      break;
    case 4:
      return "April";
      break;
    case 5:
      return "May";
      break;
    case 6:
      return "June";
      break;
    case 7:
      return "July";
      break;
    case 8:
      return "August";
      break;
    case 9:
      return "September";
      break;
    case 10:
      return "October";
      break;
    case 11:
      return "November";
      break;
    case 12:
      return "December";
      break;
  }
}

String getCurrentDate(bool written, bool withYear, int addedDays)
{
  int dayNb = currentDay + (FIRSTDAY_DAY - 1) + addedDays;
  int month = FIRSTDAY_MONTH;
  int year = FIRSTDAY_YEAR;
  String returnString;
  
  while(dayNb > getNbOfDayPerMonth(month))
  {
    dayNb = dayNb - getNbOfDayPerMonth(month);
    month++;
    if(month > 12)
    {
      month = 1;
      year++;
    }
  }
  
  if(written)
  {
    returnString = String.Format("%d %s", dayNb, getMonthName(month));
  } else
  {
    returnString = String.Format("%s %d", getMonthName(month), dayNb);
    if(returnString.EndsWith("1"))
    {
      returnString = returnString.Append("st");
    } else if (returnString.EndsWith("2"))
    {
      returnString = returnString.Append("nd");
    } else if (returnString.EndsWith("3"))
    {
      returnString = returnString.Append("rd");
    } else
    {
      returnString = returnString.Append("th");
    }
  }
  
  if(withYear)
  {
    returnString = returnString.Append(String.Format(" %d", year));
  }
  
  return returnString;
}

function removeRandomChars(bool allOfThemRightNow)
{
  int characterIndextoManageLength = characterIndextoManage.ItemCount;
  if(characterIndextoManageLength > 0)
  {
    String charactersToManage[] = characterIndextoManage.GetItemsAsArray();
  
    String thisCharacterIndexAsString;
    Character* thisCharacter;
    
    for(int i = 0 ; i < characterIndextoManageLength ; i++)
    {
      thisCharacterIndexAsString = charactersToManage[i];
      thisCharacter = character[thisCharacterIndexAsString.AsInt];
      if(!thisCharacter.Moving || allOfThemRightNow)
      {
        thisCharacter.Transparency = 100;
        characterIndextoManage.Remove(thisCharacterIndexAsString);
      }
    }
  }  
}

bool wasInteracableObjectFound(String interactableObjectName)
{
  interactableObjectName = interactableObjectName.LowerCase();
  return interactableObjectsPerRoom[player.Room].Contains(interactableObjectName);
}

function removeFromInteractableElements(String interactableElementName)
{
  interactableElementName = interactableElementName.LowerCase();
  if(wasInteracableObjectFound(interactableElementName))
  {
    interactableObjectsPerRoom[player.Room].Remove(interactableElementName);
  }
}

function findInteractableElement()
{
  String elementName = Game.GetLocationName(mouse.x, mouse.y);
  if(elementName != "" && !wasInteracableObjectFound(elementName))
  {
    interactableObjectsPerRoom[player.Room].Set(elementName.LowerCase(), "true");
    mouse.Mode = eModePointer;
  }
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  currentTime = currentTime + currentTimeIncrementPerLoop;
  
  if(timeUITransparency < 200.0)
  {
    timeUITransparency = timeUITransparency + timeUIFadeSpeed;
    lblCurrentThought.Transparency = FloatToInt(timeUITransparency/2.0, eRoundDown);
    if(lblNoteDescriptionHighlight.Transparency < 100)
    {
      lblNoteDescriptionHighlight.Transparency = lblNoteDescriptionHighlight.Transparency + 1;
    }
  }
  
  if(checkSayBackground)
  {
    talkInBackground();
  }
  
  isThereAnExpiredTimedEvent();
  
  removeRandomChars(false);
  
  if(showHints)
  {
    String pointedObjectName = Game.GetLocationName(mouse.x, mouse.y);
    if(pointedObjectName != "")
    {
      if(!wasInteracableObjectFound(pointedObjectName))
      {
        mouse.Mode = eModeFindInter;
      }
    } else
    {
      mouse.Mode = eModePointer;
    }
  } else
  {
    mouse.Mode = eModePointer;
  }
}

function readTextBox(TextBox* target)
{
  if(target == tbMorseTranslation)
  {
    String str = tbMorseTranslation.Text.LowerCase();
    String codedMsg = lblCodedMessage.Text;
    
    if(str == "deliver" && codedMsg.StartsWith("‚Äî‚Ä¢‚Ä¢ ‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ ‚Ä¢‚Äî‚Ä¢", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER ‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Ä¢ ‚Äî‚Ä¢‚Äî‚Ä¢ ‚Äî ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî ‚Äî‚Äî‚Äî / ‚Ä¢‚Äî‚Ä¢ / ‚Ä¢‚Äî‚Äî‚Ä¢ ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Äî ‚Äî‚Äî‚Äî ‚Äî‚Ä¢ / ‚Äî‚Ä¢‚Äî‚Äî ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢ / ‚Ä¢‚Ä¢ / ‚Ä¢‚Äî‚Äî ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ / ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "directly" && codedMsg.StartsWith("DELIVER", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY ‚Äî ‚Äî‚Äî‚Äî / ‚Ä¢‚Äî‚Ä¢ / ‚Ä¢‚Äî‚Äî‚Ä¢ ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Äî ‚Äî‚Äî‚Äî ‚Äî‚Ä¢ / ‚Äî‚Ä¢‚Äî‚Äî ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢ / ‚Ä¢‚Ä¢ / ‚Ä¢‚Äî‚Äî ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ / ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "to" && codedMsg.StartsWith("DELIVER DIRECTLY", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO ‚Ä¢‚Äî‚Ä¢ / ‚Ä¢‚Äî‚Äî‚Ä¢ ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Äî ‚Äî‚Äî‚Äî ‚Äî‚Ä¢ / ‚Äî‚Ä¢‚Äî‚Äî ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢ / ‚Ä¢‚Ä¢ / ‚Ä¢‚Äî‚Äî ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ / ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "r" && codedMsg.StartsWith("DELIVER DIRECTLY TO", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R ‚Ä¢‚Äî‚Äî‚Ä¢ ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Äî ‚Äî‚Äî‚Äî ‚Äî‚Ä¢ / ‚Äî‚Ä¢‚Äî‚Äî ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢ / ‚Ä¢‚Ä¢ / ‚Ä¢‚Äî‚Äî ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ / ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "parton" && codedMsg.StartsWith("Deliver directly to R", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R PARTON ‚Äî‚Ä¢‚Äî‚Äî ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢ / ‚Ä¢‚Ä¢ / ‚Ä¢‚Äî‚Äî ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ / ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "yes" && codedMsg.StartsWith("Deliver directly to R Parton", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R PARTON YES ‚Ä¢‚Ä¢ / ‚Ä¢‚Äî‚Äî ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ / ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "i" && codedMsg.StartsWith("Deliver directly to R Parton Yes", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R PARTON YES I ‚Ä¢‚Äî‚Äî ‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Ä¢‚Äî‚Ä¢‚Ä¢ / ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "will" && codedMsg.StartsWith("Deliver directly to R Parton Yes I", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R PARTON YES I WILL ‚Äî‚Äî ‚Ä¢‚Äî ‚Ä¢‚Äî‚Ä¢ ‚Ä¢‚Äî‚Ä¢ ‚Äî‚Ä¢‚Äî‚Äî / ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "marry" && codedMsg.StartsWith("Deliver directly to R Parton Yes I will", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R PARTON YES I WILL MARRY ‚Äî‚Ä¢‚Äî‚Äî ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Äî / ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "you" && codedMsg.StartsWith("Deliver directly to R Parton Yes I will marry", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R PARTON YES I WILL MARRY YOU ‚Ä¢‚Äî‚Ä¢‚Ä¢ ‚Äî‚Äî‚Äî ‚Ä¢‚Ä¢‚Ä¢‚Äî ‚Ä¢ / ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "love" && codedMsg.StartsWith("Deliver directly to R Parton Yes I will marry you", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "DELIVER DIRECTLY TO R PARTON YES I WILL MARRY YOU LOVE ‚Ä¢‚Äî ‚Äî‚Äî‚Ä¢ ‚Äî‚Ä¢ ‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢";
    } else if(str == "agnes" && codedMsg.StartsWith("Deliver directly to R Parton Yes I will marry you Love", eCaseInsensitive))
    {
      playConfirm();
      tbMorseTranslation.Text = "";
      lblCodedMessage.Text = "Deliver directly to R. Parton. Yes, I will marry you. Love. Agnes";
      target.Enabled = false;
      target.Visible = false;
      btnMorseSubmit.Enabled = true;
    }    
  }
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  if(cHarkersBeard.Transparency < 100 && cHarker.GetProperty("sitting") == -1) // in REAlways,  becase we want it to continue even when a 'eBlock' animation is running
  {
    cHarkersBeard.FaceDirection(cHarker.Loop);
  }
  
  if(adjustForDarkness)
  {
    manageDarkness();
  }
  
  if(gMorseTranslation.Visible)
  {
    readTextBox(tbMorseTranslation);
  }
}

function hide_wait_gui()
{
  close_gui(gWait);
  lblWaitUI.Text = "It is 8:00AM[How long should I wait ?";
  btnToggleForUntil.Text = "Wait for";
  btnConfirmWait.Text= "Confirm wait";
  btnToggleMinHrs.Text = "Minutes";
}

function whatGraphicIsThisCharacterAtFrame(Character* thisChar)
{
  ViewFrame* thisFrame = Game.GetViewFrame(thisChar.View, thisChar.Loop, thisChar.Frame);
}

function hide_parser_gui()
{
  close_gui(gParser);
  lbParserVerbList.Visible = false;
  lbParserObjectList.Visible = false;
  btnLBBG_objects.Visible = false;
  btnLBBG_verbs.Visible = false;
}

function show_parser_gui(eKeyCode thisKeyCode)
{
  open_gui(gParser);
  lblParse_F4Memory.Visible = hasMemorizedThought();
  if(thisKeyCode != eKeyReturn)
  {
    tbParser.Text = keycodeToString(thisKeyCode);
  } else
  {
    tbParser.Text = "";
  }
  if(interactableObjectsPerRoom[player.Room].ItemCount == 0)
  {
    btnParserInsertObject.Text = "Inventory";
  } else
  {
    btnParserInsertObject.Text = "Objects";
  }
}

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gPanel.Visible)
    {
      // Escape will turn the panel off
      close_gui(gPanel);
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    else if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else if (gParser.Visible) {
      // Escape will cancel the text parser
      hide_parser_gui();
    }
    else if (gWait.Visible) {
      // Escape will close the GUI
      hide_wait_gui();
    }
    else if (gClassify.Visible) {
      // Escape will close the GUI
      close_gui(gClassify);
      show_inventory_window();
    }
    else if (gNotebook.Visible) {
      // Escape will close the GUI
      close_gui(gNotebook);
      closeNotebookThoughts();
    }
    else if (gBook.Visible) {
      // Escape will close the GUI
      close_gui(gBook);
      closeNotebookThoughts();
    }
    else
    {
      // Escape will turn the panel on
      open_gui(gPanel);
    }
  }
  else if (keycode == eKeyF4)
  {
    if(lblCurrentThought.Transparency < 100)
    {
      if(gParser.Visible) 
      {
        tbParser.Text = tbParser.Text.Append(lblCurrentThought.Text);
      } else if (gSimpleTextbox.Visible) 
      {
        tbSimpleTextbox.Text = tbSimpleTextbox.Text.Append(lblCurrentThought.Text);
      } else if (gExam.Visible)
      {
        tbExam_Answer.Text = tbExam_Answer.Text.Append(lblCurrentThought.Text);
      }
    }
  }
  else if (keycode == eKeyHome)
  {
    //whatGraphicIsThisCharacterAtFrame(cRandomChar);
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will prompt to save a game
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to save a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if ((keycode >= 65 && keycode <= 90) || keycode == eKeyReturn)
  {
    show_parser_gui(keycode);
  }
  else if (keycode == eKeyF3)
  {
    show_parser_gui(eKeyReturn);
    //debugDisplay(keycodeToString(keycode));
    tbParser.Text = lastCMD;
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    show_inventory_window();
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
}

float distanceBetweenClickedAreas(int clickedX, int clickedY)
{
  int deltaXsquared = (lastClickX - clickedX) * (lastClickX - clickedX);
  int deltaYsquared = (lastClickY - clickedY) * (lastClickY - clickedY);
  if(lastClickRoom == player.Room)
  {
    return Maths.Sqrt(IntToFloat(deltaXsquared) + IntToFloat(deltaYsquared));
  } else
  {
    return 100000.0;
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  findInteractableElement();
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  }
  else if (button == eMouseLeft)
  {
    int destX = mouse.x + Game.Camera.X;
    int destY = mouse.y + Game.Camera.Y;
    
    if(player.Moving && player.WalkSpeedX > WALK_SPEED && (distanceBetweenClickedAreas(destX, destY) < 10.0) && BtnMultClickSpeed.Text == "3-Click Blink")
    {
      SkipUntilCharacterStops(player.ID);
    } else
    {
      player.SetWalkSpeed(WALK_SPEED, WALK_SPEED);
        
      if(player.GetProperty("sitting") == -1)
      {
        if(player.Moving && (distanceBetweenClickedAreas(destX, destY) < 10.0))
        {
          player.StopMoving();
          player.SetWalkSpeed(WALK_SPEED + 5, WALK_SPEED + 5);
        }      
        player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y, eNoBlock, eWalkableAreas);
      } else {
        standUp(player, 1);
        player.Walk(destX, destY, eNoBlock, eWalkableAreas);
      }
    }
    lastClickX = destX;
    lastClickY = destY;
    lastClickRoom = player.Room;
  }
}

// triggered when the Inventory button from the gQuickInventory is clicked
function btnIconInv_Click(GUIControl *control, MouseButton button)
{
  show_inventory_window();
}

//START OF CONTROL PANEL FUNCTIONS
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  playConfirm();
  show_save_game_dialog();
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  Display("%s[AGS %s", Game.Name, System.Version);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  playSelect();
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  playConfirm();
  show_restore_game_dialog();
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  set_default_options();
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  RestartGame();
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }

  // find first free save slot, starting with slot 1
  i = 1;

  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }

    i ++;
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);
  playSelect();
  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  close_gui(gPanel);
  playSelect();
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  
  close_owning_gui(control);
  
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  playSelect();
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    playConfirm();
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  QuitGame(0);
}

function lbInventory_OnSelectionChanged(GUIControl *control)
{
  String itemName = lbInventory.Items[lbInventory.SelectedIndex];
  playSelect();
  lbInventory_Selector_adapt(itemName);
}

function setupHints(bool selection)
{
  if(selection)
  {
    lblOverHotspot.Text = "@OVERHOTSPOT@";
    btnToggleHints.Text = "Hints shown";
  } else {   
    lblOverHotspot.Text = "";
    btnToggleHints.Text = "Hints hidden";
  }
  
  showHints = selection;
  lblOverHotspot.Visible = selection;
  btnParserInsertVerb.Visible = selection;
  btnParserInsertObject.Visible = selection;
}

function btnToggleHints_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  setupHints(!showHints);
}

function tbParser_OnActivate(GUIControl *control) // function that calls the room function 'on call' with index '1' (to start the text parsing)
{
  //PRESS ENTER
  playSelect();
  if(gParser.Visible) {
    String cmd = tbParser.Text;
    lastCMD = cmd;
    CallRoomScript (1);
  }
}

function lbVerbs_OnSelectionChanged(GUIControl *control)
{
  playSelect();
  lblHelpVerbDesc.Text = verbDescriptionDictionary.Get(lbVerbs.Items[lbVerbs.SelectedIndex]);
}

function btnHelpPanel_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  open_gui(gHelp);
  close_gui(gPanel);
}

function btnHelpResume_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  close_gui(gHelp);
  open_gui(gPanel);
}

function btnConfirmCancel_OnClick(GUIControl *control, MouseButton button)
{
  playCancel();
  close_gui(gConfirm);
}

function btnDelete_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  open_gui(gConfirm);
}

function btnLoadAtStart_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  show_restore_game_dialog();
}

function newGame_BtnClicked()
{ 
  playConfirm();
  FadeOut(10);
  close_gui(gStartHelp);
  gGUIbg.Transparency = 50;
  gGUIbg.Visible = true;
  Wait(20);
  gQuickInventory.Visible = true;
  gStatusline.Visible = true;
  player.ChangeRoom(1);
  Wait(10);  
}

function btnStartHelp_newgame_withHints_OnClick(GUIControl *control, MouseButton button)
{
  setupHints(true);
  newGame_BtnClicked();
}

function btnStartHelp_newgame_classic_OnClick(GUIControl *control, MouseButton button)
{
  setupHints(false);
  newGame_BtnClicked();
}

//##### SCRIPTED CUTSCENES #####
function setStoryBeat(storyBeat newStoryBeat)
{
  CurrentStoryBeat = newStoryBeat;
}

storyBeat getStoryBeat()
{
  return CurrentStoryBeat;
}

//##### IN-GAME INTERACTIONS ######

function cHarker_UseInv()
{
  int shavingGlassObjectIndex = findRoomObjectIndexByName("shaving glass");
  
  //debugDisplay(String.Format("%s[%d", activeElementToUse_ElementType, activeElementToUse_Index));
  
  if(activeElementToUse_ElementType == "allInventoryItems" && activeElementToUse_Index == 3)//razor
  {
    if(cHarkersBeard.Transparency == 100)
    {
      player.Think("I do not need to shave");
    } else if(shavingGlassObjectIndex == -1)
    {
      player.Think("I cannot shave here");
    } else if(!object[shavingGlassObjectIndex].Visible && player.HasInventory(iMirror))
    {
      player.Think("I need to install my shaving glass first");
      player.FaceObject(object[shavingGlassObjectIndex]);
      player.Think("There seems to be an appropriate surface over there");
    } else if(object[shavingGlassObjectIndex].Visible && !isCharacterNearObject(object[shavingGlassObjectIndex], reachDistance, player))
    {
      player.FaceObject(object[shavingGlassObjectIndex]);
      player.Think(String.Format("I need to get closer to the %s", object[shavingGlassObjectIndex].Name));
    } else
    {
      player.Walk(object[shavingGlassObjectIndex].X + 18, object[shavingGlassObjectIndex].Y + 14, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft);
      cHarkersBeard.Transparency = 100;
      player.Think("Ah, prefectly smooth");
      giveScoreOnce("perfect shave", 1);
    }
  }
}

function iLegalPapers_UseInv()
{
  //do nothing
}

function iFolder_UseInv()
{
  //do nothing
}

bool isThisSigned(InventoryItem* thisParentItem)
{
  Dictionary* theseNotes = getDictionariesForParentItems(thisParentItem, subitemNote);
  String signedMsg = "I signed those documents as the solicitor representative";
  
  if(playerHasSubitem("Signatures", thisParentItem))
  {
    return (theseNotes.Get("Signatures") == signedMsg);
  } else
  {
    return false;
  }
}

bool signAsRep(InventoryItem* thisParentItem)
{
  switch(thisParentItem)
  {
    case iSalesDossier:
      return false;
      break;
    default:
      return true;
      break;
  }
}

function signDocument(String wholeCMD)
{
  wholeCMD = wholeCMD.Replace("Sign ", "", eCaseInsensitive);
  String documentFinder[];
  InventoryItem* thisParentItem;
  Dictionary* theseNotes;
  String tempString;
  String playerSignature;
  int signPoints;
  if(player.HasInventory(iDiploma))
  {
    playerSignature = signedMsgSol;
    signPoints = 3;
  } else
  {
    playerSignature = signedMsgRep;
    signPoints = 1;
  }
  
  documentFinder = findElementIndexByName(wholeCMD);
  if(documentFinder[1] != etToString(allInventoryItems))
  {
    player.Say("I don't know what to sign");
  } else 
  {
    thisParentItem = inventory[documentFinder[0].AsInt];
    if(!playerHasSubitem("Signatures", thisParentItem))
    {
      player.Say(String.Format("There is no signatures page in my %s", thisParentItem.Name.LowerCase()));
    } else {
      theseNotes = getDictionariesForParentItems(thisParentItem, subitemNote);
      if(theseNotes.Get("Signatures") == signedMsgRep || theseNotes.Get("Signatures") == signedMsgSol)
      {
        player.Say(String.Format("I already signed the %s", thisParentItem.Name.LowerCase()));
      } else {
        if(signAsRep(thisParentItem) || player.HasInventory(iDiploma))
        {
          if(thisParentItem.GetTextProperty("invContext") == "Classify")
          {
            player.Say("They need to be complete and classified, first");
          } else
          {
            if(player.HasInventory(iPenInk))
            {
              Display(String.Format("Jonathan signs the %s", thisParentItem.Name.LowerCase()));
              theseNotes.Set("Signatures", playerSignature);
              tempString = thisParentItem.GetTextProperty("TextDescription");
              tempString = tempString.Replace("This item is not signed", playerSignature);
              thisParentItem.SetTextProperty("TextDescription", tempString);
              giveScoreOnce(String.Format("signed the %s", thisParentItem.Name), signPoints);
              
              switch(thisParentItem.ID)
              {
                case 6:
                  modifyQuestNoteLineVariant(0, 1, 3);//The papers are all in order, signed and ready to be handed in
                  break;
                default:
                  break;
              }
            } else
            {
              player.Say("I need a pen and ink to sign this document");            
            }          
          }
        } else
        {
          player.Say("These papers need to be signed by a full solicitor");
          player.Say("I need to complete my solicitor exam before signing them");
        }
      }
    }
  }
}

function iLedger_Interact()
{
  readThis(iLedger.GetTextProperty("ReadDisplay"), "¬∂");
}

function handleDirectory(String textInput)
{
  Dictionary* validDirectorySections = Dictionary.Create(eSorted);
  String validSectionsArray[];
  String currentTopic;
  int i = 0;
  
  if(textInput == "")
  {
    player.Say("I will consult the directory later");
  } else
  {
    currentTopic = "Telegram Office";
    validDirectorySections.Set("telegram", currentTopic);
    validDirectorySections.Set("telegraph", currentTopic);
    validDirectorySections.Set("messaging", currentTopic);
    validDirectorySections.Set("post", currentTopic);
    validDirectorySections.Set("messenger", currentTopic);

    currentTopic = "British Museum";
    validDirectorySections.Set("museum", currentTopic);
    validDirectorySections.Set("library", currentTopic);
    validDirectorySections.Set("archive", currentTopic);
    validDirectorySections.Set("exhibit", currentTopic);

    currentTopic = "Hotel";
    validDirectorySections.Set("hotel", currentTopic);
    validDirectorySections.Set("inn", currentTopic);
    validDirectorySections.Set("sleep", currentTopic);
    validDirectorySections.Set("hummum", currentTopic);

    currentTopic = "Law";
    validDirectorySections.Set("law", currentTopic);
    validDirectorySections.Set("society", currentTopic);
    validDirectorySections.Set("solicitor", currentTopic);

    currentTopic = "Train station";
    validDirectorySections.Set("train", currentTopic);
    validDirectorySections.Set("rail", currentTopic);
    validDirectorySections.Set("station", currentTopic);
    
    currentTopic = "Bank";
    validDirectorySections.Set("bank", currentTopic);
    validDirectorySections.Set("money", currentTopic);
    validDirectorySections.Set("cash", currentTopic);
    validDirectorySections.Set("Coutts", currentTopic);

    currentTopic = "";
    validSectionsArray = validDirectorySections.GetKeysAsArray();

    while(i < validDirectorySections.ItemCount && currentTopic == "")
    {
      if(textInput.IndexOf(validSectionsArray[i]) != -1)
      {
        currentTopic = validDirectorySections.Get(validSectionsArray[i]);
      }
      i++;
    }
    
    switch (currentTopic)
    {
      case "Telegram Office":
        addTravelDestination(TelegramOffice);
        player.Say("Here's one that is closeby");
        player.Say("Silly James's Telegram Offices");
        player.Say("Silly?");
        player.Say("How bad can it be?");
        break;
      case "British Museum":
        addTravelDestination(BritishMuseum);
        player.Say("The British Museum is in here");
        player.Say("A classic londonian destination");
        break;
      case "Hotel":
        addTravelDestination(LondonHotel);
        player.Say("Ah, here's my hotel: the Hummums in the Covent Garden");
        break;
      case "Law":
        addTravelDestination(LawSocietyOffices);
        player.Say("This directory is as filled with lawyers as the Law List");
        player.Say("The Law society is in here, but I clearly already know where that was");
        break;
      case "Train station":
        addTravelDestination(LondonTrainStation);
        player.Say("I found the Waterloo train station");
        player.Say("That is the station in which I arrived in London");
        break;
      case "Bank":
        player.Say("There are many banks in the directory");
        player.Say("For example, here's Coutts & Co");
        player.Say("I do not need to go to a bank, however");
        break;
      default:
        player.Say("I am not sure what I am looking for");
    }
  } 
}

function show_simpleTextBox(String thisTitle)
{
  lblSimpleTextbox.Text = thisTitle;
  tbSimpleTextbox.Text = "";
  lblSimpleTB_F4Memory.Visible = hasMemorizedThought();
  open_gui(gSimpleTextbox);
}

function handleCheckIn(String checkInName)
{
  Dictionary* validCheckIn = Dictionary.Create(eSorted);
  String validCheckInArray[];
  String currentTopic;
  int i = 0;
  
  if(checkInName == "")
  {
    player.Say("I don't know");
  } else
  {
    currentTopic = "Hawkins";
    validCheckIn.Set("Mr. Hawkins", currentTopic);
    validCheckIn.Set("Mr Hawkins", currentTopic);
    validCheckIn.Set("Hawkins", currentTopic);
    validCheckIn.Set("Boss", currentTopic);
    validCheckIn.Set("Peter", currentTopic);
    validCheckIn.Set("M Hawkins", currentTopic);

    currentTopic = "Harker";
    validCheckIn.Set("Jonathan", currentTopic);
    validCheckIn.Set("Harker", currentTopic);
    validCheckIn.Set("me", currentTopic);

    currentTopic = "Hughes";
    validCheckIn.Set("Hughes", currentTopic);
    validCheckIn.Set("Arthur", currentTopic);
    validCheckIn.Set("sleazebag", currentTopic);

    currentTopic = "Davis";
    validCheckIn.Set("Davis", currentTopic);
    validCheckIn.Set("Amelia", currentTopic);
    validCheckIn.Set("prostitute", currentTopic);
    
    currentTopic = "Ford";
    validCheckIn.Set("Ford", currentTopic);
    validCheckIn.Set("Parson Ford", currentTopic);
    validCheckIn.Set("Cornelius", currentTopic);
    validCheckIn.Set("Cornelius Ford", currentTopic);
    validCheckIn.Set("Parson Cornelius Ford", currentTopic);
    validCheckIn.Set("Parson C Ford", currentTopic);

    currentTopic = "";
    validCheckInArray = validCheckIn.GetKeysAsArray();

    while(i < validCheckIn.ItemCount && currentTopic == "")
    {
      if(checkInName.IndexOf(validCheckInArray[i]) != -1)
      {
        currentTopic = validCheckIn.Get(validCheckInArray[i]);
      }
      i++;
    }
    
    switch (currentTopic)
    {
      case "Harker":
        player.Say("Harker. Jonathan Harker");
        cConcierge.Say("Harker? I cannot find your name in the registry");
        cConcierge.Say("Could you have used a. . . different alias?");
        player.Say("Alias?");
        player.Say("Oh my lord! No! No alias!");
        player.Say("This is not that kind of reservation!");
        cConcierge.Say("No judgement here, sir");
        player.Say("Oh wait, my employer made the reservation");
        player.Say("It must be under his name");
        cConcierge.Say("And what would that name be?");
        show_simpleTextBox("Check-in name");
        break;
      case "Hawkins":
        player.Say("Hawkins. Peter Hawkins");
        if(player.HasInventory(iRoomKey))
        {
          cConcierge.Say("You are already checked in, Mr. Hawkins");
          dConcierge.Start();
        } else
        {
          cConcierge.Say("Here you go Mr. Hawkins, your room's key on the second floor");
          player.Say("My name is Harker, actually");
          player.Say("Peter Hawkins is my employer");
          cConcierge.Say("No worries, sir");
          cConcierge.Say("We will not tell your wife you are here, whatever name she asks for");
          player.Say("My w. . . oh no, no. This is not an alias");
          cConcierge.Say("No judgement here, sir");
          player.AddInventory(iRoomKey);
          giveScoreOnce("Hotel room key", 1);
          if(player.HasInventory(iTrunk))
          {
            cConcierge.Say("If you want to set your trunk on the luggage cart");
            cConcierge.Say("We will bring it up to your room in no time");
          }
          dConcierge.SetOptionState(2, eOptionOn);
          dConcierge.SetOptionState(3, eOptionOn);          
        }
        break;
      case "Hughes":
        player.Say("Hughes");
        if(player.HasInventory(iHughesKey))
        {
          cConcierge.Say("You are already checked in, Mr. Hughes");
          cConcierge.Say("Did you lose your key in the bath again?");
          player.Say("No. . . sorry for the bother");
        } else
        {
          cConcierge.Say("Hughes? You are already checked in, sir");
          cConcierge.Say("Is there a problem with your key or your room?");
          if(cHughes.GetProperty("PreviouslyTalkTo"))
          {
            player.Say("Yes. . . my key does not work");
            cConcierge.Say("Let me change that up for you");
            cConcierge.Say("Can you give me the faulty key, please?");
            player.Say("The key does not work. . . because I lost it");
            cConcierge.Say("You lost it");
            player.Say("Yes. I lost it in. . . the bath area. . .");
            cConcierge.Say("Oh");
            cConcierge.Say("No worries, then");
            cConcierge.Say("We'll scoop it out from somewhere");
            cConcierge.Say("Here is a duplicate of the key");
            player.AddInventory(iHughesKey);        
            giveScoreOnce("Hughes room key", 1);
          } else
          {
            player.Say("Sorry. . . No, everything is fine");
            cConcierge.Say("No judgement here, sir");
            dConcierge.Start();
          }
        }
        break;
      case "Davis":
        player.Say("Davis");
        cConcierge.Say("Ah");
        cConcierge.Say("Miss Davis is currently with another visitor");
        cConcierge.Say("Did she mention at what time you should come by?");
        player.Say("Nevermind that");
        cConcierge.Say("No judgement here, sir");
        dConcierge.Start();
        break;
      case "Ford":
        player.Say("Ford");
        cConcierge.Say("Ford? Like in. . . Parson Cornelius Ford?");
        player.Say("Yes?");
        cConcierge.Say("Is this some sort of twisted joke?");
        player.Say("No. . .");
        cConcierge.Say("Sir, whatever you have read in the papers is not true");
        cConcierge.Say("The Hummums is not haunted. There are no ghosts here");
        player.Say("Ghost?");
        cConcierge.Say("Now let us pretend this conversation never happened");
        dConcierge.Start();
        break;
      default:
        player.Say(String.Format("%s", checkInName));
        cConcierge.Say(String.Format("%s? I cannot find your name in the registry", checkInName));
        cConcierge.Say("Could you have used a. . . different alias?");
        player.Say("Alias?");
        player.Say("Oh my lord! No! No alias!");
        player.Say("This is not that kind of reservation!");
        cConcierge.Say("No judgement here, sir");
        dConcierge.Start();
        break;
    }
  }
}

function confirmSimpleTextbox()
{
  String textInput = tbSimpleTextbox.Text;
  
  close_gui(gSimpleTextbox);
  
  switch(lblSimpleTextbox.Text)
  {
    case "Seller's name":
      proposedSeller = textInput;
      CallRoomScript(3);
      break;
    case "Telegram recipient":
      handleTelegramRecipient(textInput);
      break;
    case "Directory":
      handleDirectory(textInput);
      break;
    case "Check-in name":
      handleCheckIn(textInput);
      break;
    default:
      break;
  }
}

function tbSimpleTextbox_OnActivate(GUIControl *control)
{
  confirmSimpleTextbox();
}

String getBookPage(String noteContent, String breakageCharacter, String reunitingCharacter,  Label* thisLbl, Label* pageNumberLbl, int thePage, Button* btnBack, Button* btnNext)
{
  Dictionary* eachPage = Dictionary.Create(eSorted);
  Dictionary* eachWord = Dictionary.Create(eSorted);
  String eachWord_strings[];
  String eachPage_strings[];
  String workingString = noteContent;
  String currentWord;
  bool fullLbl = false;
  int i = 0;
  btnBack.Visible = false;
  btnNext.Visible = false;
  
  //debugDisplay(String.Format("noteContent : %s", noteContent));
  
  if(GetTextHeight(noteContent, eFontNormal, thisLbl.Width) <= thisLbl.Height)
  {
    pageNumberLbl.Text = "";
    return noteContent;
  } else
  {
    eachWord.Clear();
    //Separate into words
    while(workingString.IndexOf(breakageCharacter) != -1)
    {
      currentWord = workingString.Truncate(workingString.IndexOf(breakageCharacter));
      eachWord.Set(String.Format("%05d", i), currentWord.Replace(breakageCharacter, "", eCaseInsensitive));
      i++;
      workingString = removeOneStringInstance(workingString, currentWord);
      
      if(workingString.StartsWith(breakageCharacter)){
        workingString = removeOneStringInstance(workingString, breakageCharacter);
      }
    }
    eachWord.Set(String.Format("%05d", i), workingString);
    
    eachWord_strings = eachWord.GetValuesAsArray();
    
    //Add words until lbl is full
    workingString = "";
    for(i = 0 ; i < eachWord.ItemCount ; i++)
    {
      if(GetTextHeight(String.Format("%s %s", workingString, eachWord_strings[i]), eFontNormal, thisLbl.Width) > thisLbl.Height)
      {
        eachPage.Set(String.Format("%05d", i), workingString);
        workingString = eachWord_strings[i];
      } else
      {
        workingString = workingString.Append(reunitingCharacter);
        workingString = workingString.Append(eachWord_strings[i]);
      }
    }
    eachPage.Set(String.Format("%05d", i), workingString);
    
    //find correct page content
    eachPage_strings = eachPage.GetValuesAsArray();
    if(thePage > eachPage.ItemCount)
    {
      workingString = "";
    } else 
    {
      workingString = eachPage_strings[thePage - 1];
      if(workingString.StartsWith(reunitingCharacter))
      {
        workingString = removeOneStringInstance(workingString, reunitingCharacter);
      }
    }
    
    //page number
    pageNumberLbl.Text = String.Format("Page %d/%d", thePage, eachPage.ItemCount);
    
    //show arrows
    if(thePage > 1)
    {
      btnBack.Visible = true;
    } else
    {
      btnBack.Visible = false;
    }
    
    if(eachPage.ItemCount > thePage)
    {
      btnNext.Visible = true;
    } else
    {
      btnNext.Visible = false;
    }
    
    return workingString;
  }
}

int findPageByExpressionInCurrentBook(String lookForExpression)
{
  int i = currentBookContentByPage.ItemCount - 1;
  String iDict;
  String pageText = "";
  bool foundIt = false;
  
  while(i > -1 && !foundIt)
  {
    iDict = String.Format("%09d", i);
    pageText = currentBookContentByPage.Get(iDict);
    if(pageText.IndexOf(lookForExpression) == -1)
    {
      i--;
    } else
    {
      foundIt = true;
    }
  }
  
  return i;
}

function setCurrentBookDict(String noteContent, String breakageCharacter, String reunitingCharacter,  Label* thisLbl)
{
  Dictionary* eachWord = Dictionary.Create(eSorted);
  String eachWord_strings[];
  String workingString = noteContent;
  String currentWord;
  bool fullLbl = false;
  int i = 0;
  int p = 0;
  currentBookContentByPage.Clear();
  int numberOfPages = 0;
    
  if(GetTextHeight(noteContent, eFontNormal, thisLbl.Width) <= thisLbl.Height)
  {
    currentBookContentByPage.Set(String.Format("%09d", p), noteContent);
  } else
  {
    eachWord.Clear();
    //Separate into words
    while(workingString.IndexOf(breakageCharacter) != -1)
    {
      if(workingString.StartsWith(" "))
      {
        workingString = removeOneStringInstance(workingString, " ");
      }
      currentWord = workingString.Truncate(workingString.IndexOf(breakageCharacter));
      if(currentWord.StartsWith(reunitingCharacter))
      {
        currentWord = removeOneStringInstance(currentWord, reunitingCharacter);
      }
      eachWord.Set(String.Format("%09d", i), currentWord.Replace(breakageCharacter, "", eCaseInsensitive));
      i++;
      workingString = removeOneStringInstance(workingString, currentWord);
      if(workingString.StartsWith(reunitingCharacter))
      {
        workingString = removeOneStringInstance(workingString, reunitingCharacter);
      } else if(workingString.StartsWith(" "))
      {
        workingString = removeOneStringInstance(workingString, " ");
      }
      
      if(workingString.StartsWith(breakageCharacter)){
        workingString = removeOneStringInstance(workingString, breakageCharacter);
      }
    }
    eachWord.Set(String.Format("%09d", i), workingString);
    
    eachWord_strings = eachWord.GetValuesAsArray();
    
    //Add words until lbl is full
    workingString = "";
    for(i = 0 ; i < eachWord.ItemCount ; i++)
    {
      if(GetTextHeight(String.Format("%s %s", workingString, eachWord_strings[i]), eFontNormal, thisLbl.Width) > thisLbl.Height)
      {
        currentBookContentByPage.Set(String.Format("%09d", p), workingString);
        p++;
        workingString = eachWord_strings[i];
      } else
      {
        workingString = workingString.Append(reunitingCharacter);
        workingString = workingString.Append(eachWord_strings[i]);
      }
    }
    currentBookContentByPage.Set(String.Format("%09d", p), workingString);
    p++;
  }
  
  numberOfPages = currentBookContentByPage.ItemCount;
  currentBook_pagesRead = new bool[numberOfPages];
  for(i = 0 ; i < numberOfPages ; i++)
  {
    currentBook_pagesRead[i] = false;
  }
}

bool isThisPageReadInCurrentBook(int thePage)
{
  return currentBook_pagesRead[thePage - 1];
}

function setBookPageContent(Label* thisLbl, Label* pageNumberLbl, int thePage, Button* btnBack, Button* btnNext)
{
  String workingString;
  String eachPage_strings[];
  eachPage_strings = currentBookContentByPage.GetValuesAsArray();
  
  if(thePage > currentBookContentByPage.ItemCount)
  {
    workingString = "";
  } else 
  {
    workingString = eachPage_strings[thePage - 1];
  }
  
  //page number
  pageNumberLbl.Text = String.Format("Page %d/%d", thePage, currentBookContentByPage.ItemCount);
  currentBook_pagesRead[thePage - 1] = true;
  
  //show arrows
  if(thePage > 1)
  {
    btnBack.Visible = true;
  } else
  {
    btnBack.Visible = false;
  }
  
  if(currentBookContentByPage.ItemCount > thePage)
  {
    btnNext.Visible = true;
  } else
  {
    btnNext.Visible = false;
  }
  
  thisLbl.Text = workingString;
}

String isItANewNoteTitle(String thatNoteTitle)
{
  String noteIndexes[];
  noteIndexes = notes_titles.GetKeysAsArray();
  String noteTitles[];
  noteTitles = notes_titles.GetValuesAsArray();
  String foundNoteIndex = getNoteIndex(thatNoteTitle);
  int i = 0;
  bool foundIt = false;
  
  if(foundNoteIndex != "-1")
  {
    if(notes_seen.Get(foundNoteIndex) == "false")
      {
        thatNoteTitle = String.Format("! %s", thatNoteTitle);
      }
  }
  
  return thatNoteTitle;
}

function removeNewNoteIndicatorInLB(int selectedNoteIndex)
{
  String selectedNoteTitle = lbNoteTitles.Items[selectedNoteIndex];
  
  if(selectedNoteTitle.StartsWith("!"))
  {
    selectedNoteTitle = selectedNoteTitle.Substring(2, selectedNoteTitle.Length);
    lbNoteTitles.RemoveItem(selectedNoteIndex);
    lbNoteTitles.InsertItemAt(selectedNoteIndex, selectedNoteTitle);
    lbNoteTitles.SelectedIndex = selectedNoteIndex;
  }
}

int getQuestLineVariant(int questIndex, int lineIndex)
{
  String variantNbAsString = quests[questNumber].Get(String.Format("%d", lineIndex));
  return variantNbAsString.AsInt;
}

function addDynamicQuestTextElement(int questIndex, String toReplaceString, String replaceByString)
{
  quests[questIndex].Set(toReplaceString, replaceByString);
}

String updateDynamicQuestText(Dictionary* questDict, String questText)
{
  int charIndexStart;
  int charIndexEnd;
  String replacedString;
  
  while(questText.IndexOf("<") != -1)
  {
    charIndexStart = questText.IndexOf("<");
    charIndexEnd = questText.IndexOf(">");
    replacedString = questText.Substring(charIndexStart + 1, (charIndexEnd - charIndexStart - 1));
    if(questDict.Contains(replacedString))
    {
      questText = questText.Replace(String.Format("<%s>", replacedString), questDict.Get(replacedString));
    } else
    {
      questText = questText.Replace(String.Format("<%s>", replacedString), "");
      debugDisplay(String.Format("Cannot find %s in quest dictionary"));
    }
  }
  
  return questText;
}

String buildQuestText(int questIndex)
{
  String questText = "";
  String variantIndex;
  String newLine;
  int i = 0;
  String i_String = String.Format("%d", i);
  
  //debugDisplay(String.Format("The i_String used : %s", i_String));//remove me
  //String themKeys[];//remove me
  //themKeys = quests[questIndex].GetKeysAsArray();//remove me
  //debugDisplay(String.Format("Quest #%d's item count : %d", questIndex, quests[questIndex].ItemCount));//remove me
  //debugDisplay(String.Format("themKeys(%d) : %s", 5, themKeys[5]));//remove me
  
  while(quests[questIndex].Contains(i_String))
  {
    variantIndex = quests[questIndex].Get(i_String);
    newLine = quests[questIndex].Get(String.Format("%s_%s", i_String, variantIndex));
    if(newLine != "")
    {
      if(questText == "")
      {
        questText = newLine;
      } else
      {
        questText = questText.Append(String.Format(" %s", newLine));
      }
      while(questText.EndsWith(" "))
      {
        questText = questText.Truncate(questText.Length -1);
      }
      if(!questText.EndsWith("."))
      {
        questText = questText.Append(".");
      }
    }
    
    //debugDisplay(String.Format("This is the iterative questText, at i=%d : %s", i, questText));//remove me
    
    i++;
    i_String = String.Format("%d", i);
  }
  
  //debugDisplay(String.Format("This is the compiled questText : %s", questText));//remove me
  
  questText = updateDynamicQuestText(quests[questIndex], questText);
  
  //debugDisplay(String.Format("This is the returned questText after the update dynamic QT : %s", questText));//remove me
  
  return questText;
}

function updateNoteForQuest(String noteIndex)
{
  String questIndex_String = notes_quest.Get(noteIndex);
  String questText = buildQuestText(questIndex_String.AsInt);
  
  //debugDisplay(String.Format("Received noteIndex : %s[questIndex_String: %s[questText: %s", noteIndex, questIndex_String, questText));//remove me
  //debugDisplay(String.Format("This is the quest text found : '%s'", questText));//remove me
  
  notes_message.Set(noteIndex, questText);
}

int getQuestIndex(String noteTitle)
{
  String thatNoteIndex = getNoteIndex(noteTitle);
  String thatQuestIndex = notes_quest.Get(thatNoteIndex);
  return thatQuestIndex.AsInt;
}

function setupQuestNote(int questIndex, Dictionary* msgDict)
{
  int lineCounter = 0;
  String lineCounter_String;
  
  String msgDict_keyArray[];
  msgDict_keyArray = msgDict.GetKeysAsArray();
  int i;
  
  for(i = 0 ; i < msgDict.ItemCount ; i++)
  {
    lineCounter_String = msgDict_keyArray[i].Truncate(msgDict_keyArray[i].IndexOf("_"));
    if(lineCounter_String.EndsWith("_"))
    {
      lineCounter_String = lineCounter_String.Truncate(lineCounter_String.Length - 1);
    }
    if(lineCounter < lineCounter_String.AsInt)
    {
      lineCounter++;
    }
    if(lineCounter < lineCounter_String.AsInt)
    {
      debugDisplay(String.Format("lineCounter %d has been skipped"));
      lineCounter = lineCounter_String.AsInt;
    }
    if(!quests[questIndex].Contains(String.Format("%d", lineCounter)))
    {
      quests[questIndex].Set(String.Format("%d", lineCounter), "0");
    }
    
    quests[questIndex].Set(msgDict_keyArray[i], msgDict.Get(msgDict_keyArray[i]));    
  }
}

function createQuests()
{
  Dictionary* thisQuest = Dictionary.Create(eSorted);
  
  //TUTORIEL : LEGAL PAPERS
  thisQuest.Clear();
  thisQuest.Set("0_0", "I need to bring the legal contracts to my employer, Mr. Hawkins, before 10 am.");
  thisQuest.Set("1_0", "I better get them from my secretary desk before I head to work.");
  thisQuest.Set("1_1", "The papers are all out of order. I better organise them. ");
  thisQuest.Set("1_2", "The papers are all in order. I have to sign these before I hand them in. I should have my writing instruments in my secretary. ");
  thisQuest.Set("1_3", "The papers are all in order, signed and ready to be handed in");
  thisQuest.Set("1_4", "The papers have been handed in");
  setupQuestNote(0, thisQuest);

  //SHAVING MINIGAME
  thisQuest.Clear();
  thisQuest.Set("0_0", "Damp skin makes for a better shave. Wash before, wash after");
  thisQuest.Set("0_1", "I'm clean-shaven and ready for work");
  setupQuestNote(1, thisQuest);

  //HAWKINS PROPERTIES SALE #1
  thisQuest.Clear();
  thisQuest.Set("0_0", "<Potential buyer's name> want a property in Exeter's City <sector>, aged between <age> and <age> years old");
  thisQuest.Set("1_0", "The <sector name> sellers are <seller's name>,<seller's name> et <seller's name>");
  thisQuest.Set("2_0", "(The sellers infos are added to this note)");
  thisQuest.Set("3_0", "(The sellers infos are added to this note)");
  thisQuest.Set("4_0", "(The sellers infos are added to this note)");
  setupQuestNote(2, thisQuest);

  //HAWKINS PROPERTIES SALE #2
  thisQuest.Clear();
  thisQuest.Set("0_0", "<Potential buyer's name> want a property in Exeter's City <sector>, aged between <age> and <age> years old");
  thisQuest.Set("1_0", "The <sector name> sellers are <seller's name>,<seller's name> et <seller's name>");
  thisQuest.Set("2_0", "(The sellers infos are added to this note)");
  thisQuest.Set("3_0", "(The sellers infos are added to this note)");
  thisQuest.Set("4_0", "(The sellers infos are added to this note)");
  setupQuestNote(3, thisQuest);

  //HAWKINS DRACULA'S PROPERTY
  thisQuest.Clear();
  thisQuest.Set("0_0", "<Potential buyer's name> want a property in Exeter's City <sector>, aged between <age> and <age> years old");
  thisQuest.Set("1_0", "The <sector name> sellers are <seller's name>,<seller's name> et <seller's name>");
  thisQuest.Set("2_0", "(The sellers infos are added to this note)");
  thisQuest.Set("3_0", "(The sellers infos are added to this note)");
  thisQuest.Set("4_0", "(The sellers infos are added to this note)");
  setupQuestNote(4, thisQuest);

  //HAWKINS SMALL FAVOR
  thisQuest.Clear();
  thisQuest.Set("0_0", "Mr. Hawkins gave me a list of tasks.");
  thisQuest.Set("1_0", "I have to go to Purfleet and take pictures of the Gladstone property.");
  thisQuest.Set("2_0", "I need pictures of the living room, kitchen, dining room and bedroom.");
  thisQuest.Set("3_0", "I can take the photo camera, on the table by the ladder at the office.");
  thisQuest.Set("4_0", "I have to be done 4PM tomorrow and send a Mr. Hawkins a telegram before 4:15PM.");
  thisQuest.Set("5_0", "I can use his reservation at the Hummums.");
  thisQuest.Set("6_0", "I will need to pack my trunk.");
  thisQuest.Set("0_0", "Mr. Hawkins gave me a list of tasks.");
  thisQuest.Set("1_1", "I could not make it to Purfleet, but I found a property at Carfax that looks perfect for Dracula.");
  thisQuest.Set("2_1", "I took all four pictures of the Carfax poperty.");
  thisQuest.Set("3_1", "I took the photo camera.");
  thisQuest.Set("4_1", "I have sent Mr. Hawkins a telegram.");
  thisQuest.Set("5_1", "I have a room at the Hummums.");
  thisQuest.Set("6_1", "I packed my trunk.");
  setupQuestNote(5, thisQuest);

  //MEET MINA FOR TEA
  thisQuest.Clear();
  thisQuest.Set("0_0", "Meet Mina at Station caf√© for tea at 11AM.");
  thisQuest.Set("0_1", "I met Mina at the caf√©. She gave me a ticket for the British Museum.");
  thisQuest.Set("1_0", "She also gave me a list of things to pack in my trunk");
  thisQuest.Set("2_0", "My razor");
  thisQuest.Set("3_0", "My shaving glass");
  thisQuest.Set("4_0", "A pen and ink");
  thisQuest.Set("5_0", "My cigars");
  thisQuest.Set("6_0", "Some matches");
  setupQuestNote(6, thisQuest);

  //BREAKING AND ENTERING (DINING ROOM)
  thisQuest.Clear();
  thisQuest.Set("0_0", "The window is obstructed by the curtain. I can still take a picture, but it won't be as clear. The window seems to be held by a layer of paint. I might be able to remove it with a sharp object.  ");
  thisQuest.Set("0_1", "I managed to remove the window of the dining room. The curtain is still in the way.");
  thisQuest.Set("0_2", "I removed the window and pulled the curtain. The view of the dining room is now clear. ");
  thisQuest.Set("0_3", "I took a picture of the dining room.");
  setupQuestNote(7, thisQuest);

  //KITCHEN NIGHTMARE (KITCHEN)
  thisQuest.Clear();
  thisQuest.Set("0_0", "I found a cellar's bulkhead. It is locked by some kind of paddlock.");
  thisQuest.Set("0_1", "I've unlocked the cellar's bulkhead with a key I found. There seem to be a broken door at the bottom. ");
  thisQuest.Set("0_2", "I can see the kitchen through the broken door leading to the cellar, but the door itself wont budge. ");
  thisQuest.Set("0_3", "I took a picture of the Kitchen room.");
  setupQuestNote(8, thisQuest);

  //THE MISSING "KEY"
  thisQuest.Clear();
  thisQuest.Set("0_0", "I found a key. My guts tell me that if there's a key, there must be a lock.");
  thisQuest.Set("0_0", "I found a use for the key. It unlocked the cellar's padlock. My guts were right.");
  setupQuestNote(9, thisQuest);

  //RAPUNZEL (BEDROOM)
  thisQuest.Clear();
  thisQuest.Set("0_0", "If i could find a way to reach these plants, I might be able to see the rooms on the second floor");
  thisQuest.Set("0_2", "The ladder I found allows me to reach the second floor.");
  thisQuest.Set("0_3", "I found the bedroom window on the second floor of the property.");
  thisQuest.Set("0_4", "I took a picture of the bedroom.");
  setupQuestNote(10, thisQuest);

  //LADDER QUEST
  thisQuest.Clear();
  thisQuest.Set("0_0", "I found a ladder in the pond my the Carfax property. It could be useful, but I can't reach it. Maybe I can find a way to get closer.");
  thisQuest.Set("0_1", "I put some planks in the pond to get closer to the ladder, but it is stil ljust out of reach. I just need something to pull it towards me.");
  thisQuest.Set("0_2", "I used the padlock's chain to reach the ladder and take it out of the pond. It might help me reach some things that are too high.");
  setupQuestNote(11, thisQuest);

  //COCHER : BUTTY
  thisQuest.Clear();
  thisQuest.Set("0_0", "I forgot the Carfax seller's name. The cab driver remembers and offered me to tell me the name in exchange of a butty.");
  thisQuest.Set("0_1", "I gave a butty to the cab driver. He told me the name of the seller was Wintringham.");
  setupQuestNote(12, thisQuest);
  
  String endHere = "";
}

function setNotebookDescription(String selectedNoteTitle,  int selectedNoteIndex)
{
  String thisNoteIndex;
  String thisNoteDescription;
    
  if(selectedNoteTitle.StartsWith("!"))
  {
    selectedNoteTitle = selectedNoteTitle.Substring(2, selectedNoteTitle.Length);
    removeNewNoteIndicatorInLB(selectedNoteIndex);
  }
  thisNoteIndex = getNoteIndex(selectedNoteTitle);
  if(notes_quest.Get(thisNoteIndex) != "Null")
  {
    //debugDisplay(String.Format("This note (%s) has a quest index (%s)", thisNoteIndex, notes_quest.Get(thisNoteIndex)));//remove me
    updateNoteForQuest(thisNoteIndex);
  }
  thisNoteDescription = notes_message.Get(thisNoteIndex);
  lblNoteDescription.Text = getBookPage(thisNoteDescription, " ", " ", lblNoteDescription, lblNote_pgNb, 1, btnNotebook_prev, btnNotebook_next); 
  hasRead(selectedNoteTitle);
}

function updateNotebook()
{
  lbNoteTitles.Clear();
  String currentNoteTitle;
  String notesIndexes[] = notes_titles.GetKeysAsArray();
  int i;
  
  for(i = 0 ; i < notes_titles.ItemCount ; i++)
  {
    currentNoteTitle = notes_titles.Get(notesIndexes[i]);
    currentNoteTitle = isItANewNoteTitle(currentNoteTitle);    
    lbNoteTitles.AddItem(currentNoteTitle);
  }
  
  lbNoteTitles.SelectedIndex = lbNoteTitles.ItemCount - 1;
  currentNoteTitle = lbNoteTitles.Items[lbNoteTitles.SelectedIndex];
  setNotebookDescription(currentNoteTitle, lbNoteTitles.SelectedIndex);
  btnDeleteNote.Enabled = (notes_titles.ItemCount > 1); // must have at least 2 entries to remove one.  
}

function btnConfirmYes_OnClick(GUIControl *control, MouseButton button)
{
  String noteToDelete_title = lbNoteTitles.Items[lbNoteTitles.SelectedIndex];
  String noteToDelete_index = getNoteIndex(noteToDelete_title);
  
  playConfirm();
  if(gNotebook.Visible) // delete note
  {
    notes_message.Remove(noteToDelete_index);
    notes_titles.Remove(noteToDelete_index);
    notes_seen.Remove(noteToDelete_index);
    lbNoteTitles.RemoveItem(lbNoteTitles.SelectedIndex);
    lbNoteTitles.SelectedIndex = lbNoteTitles.ItemCount - 1;
    setNotebookDescription(lbNoteTitles.Items[lbNoteTitles.SelectedIndex], lbNoteTitles.SelectedIndex);
    btnDeleteNote.Enabled = (notes_titles.ItemCount > 1); // must have at least 2 entries to remove one. 
  }
  close_gui(gConfirm);
}

function btnNoteBook_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  updateNotebook();
  open_gui(gNotebook);
}

function btnResume_notebook_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  close_gui(gNotebook);
  closeNotebookThoughts();
}

int parseCurrentPage(Label* thisLabel)
{
  String workString = thisLabel.Text;
  workString = workString.Substring(workString.IndexOf(" "), workString.Length - workString.IndexOf("/"));
  
  return workString.AsInt;
}

int parseLastPage(Label* thisLabel)
{
  String workString = thisLabel.Text;
  workString = workString.Substring(workString.IndexOf("/") + 1, workString.Length - workString.IndexOf("/") + 1);
  return workString.AsInt;
}

function btnNotebook_next_OnClick(GUIControl *control, MouseButton button)
{
  int targetPage = parseCurrentPage(lblNote_pgNb) + 1;
  String selectedNoteTitle = lbNoteTitles.Items[lbNoteTitles.SelectedIndex];
  String selectedNoteIndex = getNoteIndex(selectedNoteTitle);
  lblNoteDescription.Text = getBookPage(notes_message.Get(selectedNoteIndex), " ", " ", lblNoteDescription, lblNote_pgNb, targetPage, btnNotebook_prev, btnNotebook_next);
}

function btnNotebook_prev_OnClick(GUIControl *control, MouseButton button)
{
  int targetPage = parseCurrentPage(lblNote_pgNb) - 1;
  String selectedNoteTitle = lbNoteTitles.Items[lbNoteTitles.SelectedIndex];
  String selectedNoteIndex = getNoteIndex(selectedNoteTitle);
  lblNoteDescription.Text = getBookPage(notes_message.Get(selectedNoteIndex), " ", " ", lblNoteDescription, lblNote_pgNb, targetPage, btnNotebook_prev, btnNotebook_next);
}

function lbNoteTitles_OnSelectionChanged(GUIControl *control)
{
  String noteTitle = lbNoteTitles.Items[lbNoteTitles.SelectedIndex];
  setNotebookDescription(noteTitle, lbNoteTitles.SelectedIndex);
  //lblNoteDescription.Text = getBookPage(notes.Get(noteTitle), " ", " ", lblNoteDescription, lblNote_pgNb, 1, btnNotebook_prev, btnNotebook_next);
}

function writeBookPages(int leftPageNumber)
{
  setBookPageContent(LblBook_left, lblBook_pgNbLeft, leftPageNumber, btnBookPrev, btnBookNext);
  if(parseLastPage(lblBook_pgNbLeft) > leftPageNumber)
  {
    setBookPageContent(LblBook_right, lblBook_pgNbRight, leftPageNumber + 1, btnBookPrev, btnBookNext);
  } else
  {
    LblBook_right.Text = "";
    lblBook_pgNbRight.Text = "";
    btnBookNext.Visible = false;
  }
  
  if(leftPageNumber == 1)
  {
    btnBookPrev.Visible = false;
  } else
  {
    btnBookPrev.Visible = true;
  }
  if(parseLastPage(lblBook_pgNbLeft) == leftPageNumber + 1 || parseLastPage(lblBook_pgNbLeft) == leftPageNumber)
  {
    btnBookNext.Visible = false;
  } else
  {
    btnBookNext.Visible = true;
  }
}

function createBook(String bookTitle, String bookText, String separatorChar, String reunitorChar)
{
  books_description.Set(bookTitle, bookText);
  books_reunitor.Set(bookTitle, reunitorChar);
  books_separator.Set(bookTitle, separatorChar);
}

function createProcedureBook()
{
  String title = "Procedures";
  String content = "BOOK OF PROCEDURES.[HAWKINS, ESQ.[";
  content = content.Append("##########[SECTION 1: Client files for property sales.[When a client is selling a property, it is required to (1) pinpoint the property on a map for easy access, these pins allow a quick survey of available properties by city sectors and neighborhoods. The pins are tagged with the client's last name. (2) Create a client file, including the name, city, sector and property age (including year and current age). These files are organized alphabetically in file drawers. A ledger of the file distribution should always be updated and kept at hand near the file drawers[");
  content = content.Append("##########[SECTION 2: Conveyancing Document classification[When arranging a property sales dossier, the documents must be in the correct order. Simpler documents only have three sections: (1) Title page, (2) articles and (3) the signatures. More substantial documents must follow the following logic: (1) Title page, (2) Conditions, (3) Proof of ownership (Deed), (4) Proof of current state: Pictures of a list of four specific rooms (no more, no less): Bedroom, dining room, kitchen, and living room, and property survey (5) Annexes of previous paperwork, including sales and advertisements, tenants and leases, and labour book, and (6) Signatures, which must be signed for the document to be valid.[");
  content = content.Append("##########[SECTION 3: Under British law, we work as solicitors, not barristers. Barristers are associated under one of four Inn of Courts, whereas solicitors are working in private practices. Most of a solicitor's work is to provide legal advice and coordinate legal paperwork, including conveyancing and wills. Barristers' work more often involve high courts pleading.");
  createBook(title, content, " ", " ");
}

function createCredits()
{
  String title = "GAME CREDITS";
  String content = "GAME DIRECTION[Danny Godin¬∂[";
  content = content.Append("DEVELOPERS[Mathieu Gaudreau[Justin Marques[Alec Menard¬∂[");
  content = content.Append("SPECIAL THANKS[Jonathan Lessard¬∂[");
  content = content.Append(String.Format("GAME ENGINE[Adventure Game Studio %s¬∂[", System.Version));
  content = content.Append("Based on the story and characters of 'Dracula' by Bram Stoker, published in 1897¬∂[");//FIX ME
  content = content.Append("TrueType font display uses ALFont by Javier Gonzalez and the Freetype project. Distributed under the terms of the FreeType project license.¬∂[");
  content = content.Append("Copyright notice for Josefin, font by Santiago Orozco (link: https://www.fontspace.com/josefin-sans-font-f44035)¬∂[");
  content = content.Append("Copyright notice for Gothica, font by Wojciech Kalinowski (https://www.dafont.com/gothica-2.font)¬∂[");
  content = content.Append("OGG player is alogg by Javier Gonzalez, using the Ogg Vorbis decoder, which is available from http://www.xiph.org/ Copyright (c) 2002, Xiph.org Foundation¬∂[MP3 player is almp3, by Javier Gonzalez and the FreeAmp team. It uses the mpg123 MP3 decoder, and is distributed under the terms of the GNU Lesser General Public License version 2.1.¬∂[TITLES : 8BIT11 and 8BIT12, by FabienC@RustedMusicStudio (https://rustedstudio.itch.io/free-music-10-spooky-8bit-tracks)¬∂[LostInTought, by ansimuz (https://ansimuz.itch.io/mystery-music-collection-pack-2)¬∂[Sound effects (Cancel 1, Confirm 1, Select 1) by @JDWasabi (https://jdwasabi.itch.io/8-bit-16-bit-sound-effects-pack)¬∂");
  content = content.Append("A GAME PROJECT ASSOCIATED WITH 'GAME AS RESEARCH'[Founded by Canada's Social Sciences and Humanities Research Council[(c) 2023[");
  createBook(title, content, "¬∂", "[");
}

function createBible()
{
  String title = "Psalm 26";
  String content = "PSALM 26 of David[";
  content = content.Append("############");
  content = content.Append("(1) Judge me, O LORD; for I have walked in mine integrity: I have trusted also in the LORD; therefore I shall not slide.[");
  content = content.Append("(2) Examine me, O LORD, and prove me; try my reins and my heart.[");
  content = content.Append("(3) For thy lovingkindness is before mine eyes: and I have walked in thy truth.[");
  content = content.Append("(4) I have not sat with vain persons, neither will I go in with dissemblers.[");
  content = content.Append("(5) I have hated the congregation of evil doers; and will not sit with the wicked.[");
  content = content.Append("(6) I will wash mine hands in innocency: so will I compass thine altar, O LORD:[");
  content = content.Append("(7) That I may publish with the voice of thanksgiving, and tell of all thy wondrous works.[");
  content = content.Append("(8) LORD, I have loved the habitation of thy house, and the place where thine honour dwelleth.[");
  content = content.Append("(9) Gather not my soul with sinners, nor my life with bloody men:[");
  content = content.Append("(10) In whose hands is mischief, and their right hand is full of bribes.[");
  content = content.Append("(11) But as for me, I will walk in mine integrity: redeem me, and be merciful unto me.[");
  content = content.Append("(12) My foot standeth in an even place: in the congregations will I bless the LORD.[");
  createBook(title, content, " ", " ");
  
  title = "Matt24:1-29";
  content = "MATTHEW 24[";
  content = content.Append("The Destruction of the Temple and Signs of the End Times[");
  content = content.Append("############[");
  content = content.Append("(1) And Jesus went out, and departed from the temple: and his disciples came to him for to shew him the buildings of the temple.[");
  content = content.Append("(2) And Jesus said unto them, See ye not all these things? verily I say unto you, There shall not be left here one stone upon another, that shall not be thrown down[");
  content = content.Append("(3) And as he sat upon the mount of Olives, the disciples came unto him privately, saying, Tell us, when shall these things be? and what shall be the sign of thy coming, and of the end of the world?[");
  content = content.Append("(4) And Jesus answered and said unto them, Take heed that no man deceive you.[");
  content = content.Append("(5) For many shall come in my name, saying, I am Christ; and shall deceive many.[");
  content = content.Append("(6) And ye shall hear of wars and rumours of wars: see that ye be not troubled: for all these things must come to pass, but the end is not yet.[");
  content = content.Append("(7) For nation shall rise against nation, and kingdom against kingdom: and there shall be famines, and pestilences, and earthquakes, in divers places.[");
  content = content.Append("(8) All these are the beginning of sorrows.[");
  content = content.Append("(9) Then shall they deliver you up to be afflicted, and shall kill you: and ye shall be hated of all nations for my name's sake.[");
  content = content.Append("(10) And then shall many be offended, and shall betray one another, and shall hate one another.[");
  content = content.Append("(11) And many false prophets shall rise, and shall deceive many.[");
  content = content.Append("(12) And because iniquity shall abound, the love of many shall wax cold.[");
  content = content.Append("(13) But he that shall endure unto the end, the same shall be saved.[");
  content = content.Append("(14) And this gospel of the kingdom shall be preached in all the world for a witness unto all nations; and then shall the end come.[");
  content = content.Append("(15) When ye therefore shall see the abomination of desolation, spoken of by Daniel the prophet, stand in the holy place, (whoso readeth, let him understand)[");
  content = content.Append("(16) Then let them which be in Judaea flee into the mountains.[");
  content = content.Append("(17) Let him which is on the housetop not come down to take any thing out of his house[");
  content = content.Append("(18) Neither let him which is in the field return back to take his clothes.[");
  content = content.Append("(19) And woe unto them that are with child, and to them that give suck in those days![");
  content = content.Append("(20) But pray ye that your flight be not in the winter, neither on the sabbath day.[");
  content = content.Append("(21) For then shall be great tribulation, such as was not since the beginning of the world to this time, no, nor ever shall be.[");
  content = content.Append("(22) And except those days should be shortened, there should no flesh be saved: but for the elect's sake those days shall be shortened.[");
  content = content.Append("(23) Then if any man shall say unto you, Lo, here is Christ, or there; believe it not.[");
  content = content.Append("(24) For there shall arise false Christs, and false prophets, and shall shew great signs and wonders; insomuch that, if it were possible, they shall deceive the very elect.[");
  content = content.Append("(25) Behold, I have told you before.[");
  content = content.Append("(26) Wherefore if they shall say unto you, Behold, he is in the desert; go not forth: behold, he is in the secret chambers; believe it not.[");
  content = content.Append("(27) For as the lightning cometh out of the east, and shineth even unto the west; so shall also the coming of the Son of man be.[");
  content = content.Append("(28) For wheresoever the carcase is, there will the eagles be gathered together.[");
  content = content.Append("(29) Immediately after the tribulation of those days shall the sun be darkened, and the moon shall not give her light, and the stars shall fall from heaven, and the powers of the heavens shall be shaken.[");
  createBook(title, content, " ", " ");
  
  title = "Matt24:30-51";
  content = "MATTHEW 24[";
  content = content.Append("The Day and Hour Unknown[");
  content = content.Append("############[");
  content = content.Append("(30) And then shall appear the sign of the Son of man in heaven: and then shall all the tribes of the earth mourn, and they shall see the Son of man coming in the clouds of heaven with power and great glory.[");
  content = content.Append("(31) And he shall send his angels with a great sound of a trumpet, and they shall gather together his elect from the four winds, from one end of heaven to the other.[");
  content = content.Append("(32) Now learn a parable of the fig tree; When his branch is yet tender, and putteth forth leaves, ye know that summer is nigh.[");
  content = content.Append("(33) So likewise ye, when ye shall see all these things, know that it is near, even at the doors.[");
  content = content.Append("(34) Verily I say unto you, This generation shall not pass, till all these things be fulfilled.[");
  content = content.Append("(35) Heaven and earth shall pass away, but my words shall not pass away.[");
  content = content.Append("(36) But of that day and hour knoweth no man, no, not the angels of heaven, but my Father only.[");
  content = content.Append("(37) But as the days of Noe were, so shall also the coming of the Son of man be.[");
  content = content.Append("(38) For as in the days that were before the flood they were eating and drinking, marrying and giving in marriage, until the day that Noe entered into the ark,[");
  content = content.Append("(39) And knew not until the flood came, and took them all away; so shall also the coming of the Son of man be.[");
  content = content.Append("(40) Then shall two be in the field; the one shall be taken, and the other left.[");
  content = content.Append("(41) Two women shall be grinding at the mill; the one shall be taken, and the other left.[");
  content = content.Append("(42) Watch therefore: for ye know not what hour your Lord doth come.[");
  content = content.Append("(43) But know this, that if the goodman of the house had known in what watch the thief would come, he would have watched, and would not have suffered his house to be broken up.[");
  content = content.Append("(44) Therefore be ye also ready: for in such an hour as ye think not the Son of man cometh.[");
  content = content.Append("(45) Who then is a faithful and wise servant, whom his lord hath made ruler over his household, to give them meat at the proper time?[");
  content = content.Append("(46) Blessed is that servant, whom his lord when he cometh shall find so doing.[");
  content = content.Append("(47) Verily I say unto you, That he shall make him ruler over all his goods.[");
  content = content.Append("(48) But and if that evil servant shall say in his heart, My lord delayeth his coming;[");
  content = content.Append("(49) And shall begin to smite his fellowservants, and to eat and drink with the drunken;[");
  content = content.Append("(50) The lord of that servant shall come in a day when he looketh not for him, and in an hour that he is not aware of,[");
  content = content.Append("(51) And shall cut him asunder, and appoint him his portion with the hypocrites: there shall be weeping and gnashing of teeth.[");
  createBook(title, content, " ", " ");
}

function setCoachViews(int empty, int wHarker, int full)
{
  coachView_empty = empty;
  coachView_harker = wHarker;
  coachView_full = full;
}

function setCoachView(coachState cState)
{
  switch(cState)
  {
    case Empty:
      cCoach.ChangeView(coachView_empty);
      break;
    case HarkerInside:
      cCoach.ChangeView(coachView_harker);
      break;
    case Full:
      cCoach.ChangeView(coachView_full);
      break;
  }
  cCoach.Animate(cCoach.Loop, 5, eRepeat, eNoBlock, eForwards);
}

coachState getCoachState()
{
  int currentHorseView = cCoach.View;
  coachState currentCoachState;
  switch(currentHorseView)
  {
    case coachView_empty:
      currentCoachState = Empty;
      break;
    case coachView_harker:
      currentCoachState = HarkerInside;
      break;
    case coachView_full:
      currentCoachState = Full;
      break;
  }
  
  return currentCoachState;
}

horseState getHorseState()
{
  int currentHorseView = cCoach.View;
  horseState currentHorseState;
  
  switch(currentHorseView)
  {
    case 11:
      currentHorseState = NormalHorse;
      break;
    case 12:
      currentHorseState = NormalHorse;
      break;
    case 13:
      currentHorseState = NormalHorse;
      break;
    case 18:
      currentHorseState = HurtHorse;
      break;
    case 19:
      currentHorseState = HurtHorse;
      break;
    case 22:
      currentHorseState = HurtHorse;
      break;
    case 23:
      currentHorseState = BandagedHorse;
      break;
    case 24:
      currentHorseState = BandagedHorse;
      break;
    case 25:
      currentHorseState = BandagedHorse;
      break;    
  }
  
  return currentHorseState;
}

function setHorseViews(horseState horseHP)
{
  coachState currentCoachState = getCoachState();
  
  switch(horseHP)
  {
    case NormalHorse:
      setCoachViews(11, 12, 13);
      break;
    case HurtHorse:
      setCoachViews(22, 19, 18);
      break;
    case BandagedHorse:
      setCoachViews(23, 24, 25);
      break;
  }
  
  setCoachView(currentCoachState);
}

function travelInCoach(zone cabDestination)
{ 
  switch(cabDestination)
  {
    case Purfleet:
      player.Transparency = 100;
      cCoach.ChangeRoom(6, 201, 183, eDirectionLeft);
      cCabby.ChangeRoom(6, (201 - 68), (183 + 0), eDirectionRight);
      setHorseViews(HurtHorse);
      break;
    case LondonTrainStation:
      cCoach.ChangeRoom(5, 424, 167, eDirectionRight);
      cCabby.ChangeRoom(5, (424 + 5), (183 + 10), eDirectionRight);
      break;
    default:
      break;
  }
}

function takeACab(zone cabDestination)
{
  int coachX = cCoach.x;
  int coachY = cCoach.y;
  int coachTargetX = Game.Camera.X - cCoach.BlockingWidth;
  
  //Invite in
  cCabby.Walk(coachX + 15, coachY + 1, eBlock, eWalkableAreas);
  cCabby.FaceDirection(eDirectionDown, eBlock);
  cCabby.Say("Alright, mate");
  cCabby.Say("Get yourself snug in the buggy");
  
  //Harker enters
  player.Walk(coachX + 26, coachY + 1, eBlock, eWalkableAreas);
  player.FaceDirection(eDirectionUp);
  player.Transparency = 100;
  setCoachView(HarkerInside);  //cCoach.LockView(coachView_harker, eKeepMoving);
  
  //Cabby climbs in
  cCabby.Walk(coachX + 45, coachY + 1, eBlock, eWalkableAreas);
  cCabby.FaceDirection(eDirectionUp);
  cCabby.Transparency = 100;
  setCoachView(Full);  //cCoach.LockView(coachView_full, eKeepMoving);
  
  Game.Camera.AutoTracking = false;
  cCoach.Walk(coachTargetX, coachY, eNoBlock, eAnywhere);
  Wait(40);
  FadeOut(5);
  player.Transparency = 0;
  cCabby.Transparency = 0;
  setCoachView(Empty);  //cCoach.LockView(coachView_empty, eKeepMoving);
  travelInCoach(cabDestination);
  travel(cabDestination);
}

//RANDOM CHARACTERS

function resetCharacterView(Character* thisChar)
{
  
}

int getCharacterHairColor(characterColors targetColor)
{
  if(targetColor == CC_random || targetColor == CC_skin_ivory || targetColor == CC_skin_porcelain || targetColor == CC_skin_roseBeige)
  {
    int i = Random(5);
    switch(i)
    {
      case 0:
        targetColor = CC_hair_blond;
        break;
      case 1:
        targetColor = CC_hair_brown;
        break;
      case 2:
        targetColor = CC_hair_dark;
        break;
      case 3:
        targetColor = CC_hair_grey;
        break;
      case 4:
        targetColor = CC_hair_red;
        break;
      case 5:
        targetColor = CC_hair_white;
        break;
    }
  }
  
  if(targetColor == CC_skin_band || targetColor == CC_skin_dark || targetColor == CC_skin_siena || targetColor == CC_skin_warmIvory)
  {
    int i = Random(2);
    switch(i)
    {
      case 0:
        targetColor = CC_hair_white;
        break;
      case 1:
        targetColor = CC_hair_grey;
        break;
      case 2:
        targetColor = CC_hair_dark;
        break;
    }
  }
  
  switch(targetColor)
  {
    case CC_hair_blond:
      return 65159;
      break;
    case CC_hair_brown:
      return 33410;
      break;
    case CC_hair_dark:
      return 6272;
      break;
    case CC_hair_grey:
      return 48599;
      break;
    case CC_hair_red:
      return 53953;
      break;
    case CC_hair_white:
      return 63357;
      break;
  }
}

int[] getCharacterColorTones(characterColors targetColor)
{
  int paleToneShade[] = new int[3];
  switch(targetColor)
  {
    case CC_black:
      paleToneShade[0] = 12710;
      paleToneShade[1] = 4258;
      paleToneShade[2] = 32;
      break;
    case CC_white:
      paleToneShade[0] = 65535;
      paleToneShade[1] = 61277;
      paleToneShade[2] = 52825;
      break;
    case CC_grey:
      paleToneShade[0] = 44373;
      paleToneShade[1] = 35953;
      paleToneShade[2] = 27469;
      break;
    case CC_brown:
      paleToneShade[0] = 46121;
      paleToneShade[1] = 27269;
      paleToneShade[2] = 18851;
      break;
    case CC_green:
      paleToneShade[0] = 3394;
      paleToneShade[1] = 3073;
      paleToneShade[2] = 544;
      break;
    case CC_blue:
      paleToneShade[0] = 16958;
      paleToneShade[1] = 6397;
      paleToneShade[2] = 2167;
      break;
    case CC_red:
      paleToneShade[0] = 53248;
      paleToneShade[1] = 43008;
      paleToneShade[2] = 26624;
      break;
    case CC_yellow:
      paleToneShade[0] = 59201;
      paleToneShade[1] = 48641;
      paleToneShade[2] = 33824;
      break;
    case CC_purple:
      paleToneShade[0] = 51321;
      paleToneShade[1] = 41076;
      paleToneShade[2] = 26701;
      break;
    case CC_beige:
      paleToneShade[0] = 61075;
      paleToneShade[1] = 60942;
      paleToneShade[2] = 58663;
      break;
    case CC_orange:
      paleToneShade[0] = 64516;
      paleToneShade[1] = 64320;
      paleToneShade[2] = 47712;
      break;
    case CC_cyan:
      paleToneShade[0] = 1884;
      paleToneShade[1] = 1527;
      paleToneShade[2] = 1007;
      break;
    case CC_skin_porcelain:
      paleToneShade[0] = 65303;
      paleToneShade[1] = 65303;
      paleToneShade[2] = 65072;
      break;
    case CC_skin_ivory:
      paleToneShade[0] = 65076;
      paleToneShade[1] = 65076;
      paleToneShade[2] = 64847;
      break;
    case CC_skin_warmIvory:
      paleToneShade[0] = 65400;
      paleToneShade[1] = 65400;
      paleToneShade[2] = 65267;
      break;
    case CC_skin_roseBeige:
      paleToneShade[0] = 65008;
      paleToneShade[1] = 65008;
      paleToneShade[2] = 64616;
      break;
    case CC_skin_siena:
      paleToneShade[0] = 43914;
      paleToneShade[1] = 43914;
      paleToneShade[2] = 27011;
      break;
    case CC_skin_band:
      paleToneShade[0] = 39914;
      paleToneShade[1] = 39914;
      paleToneShade[2] = 25059;
      break;
    case CC_skin_dark:
      paleToneShade[0] = 33512;
      paleToneShade[1] = 33512;
      paleToneShade[2] = 12579;
      break;
  }
  
  return paleToneShade;
}

characterColors getCharacterRandomJacketColor()
{
  int i = Random(11);
  switch(i)
  {
    case 0:
      return CC_beige;
      break;
    case 1:
      return CC_black;
      break;
    case 2:
      return CC_blue;
      break;
    case 3:
      return CC_brown;
      break;
    case 4:
      return CC_cyan;
      break;
    case 5:
      return CC_green;
      break;
    case 6:
      return CC_grey;
      break;
    case 7:
      return CC_orange;
      break;
    case 8:
      return CC_purple;
      break;
    case 9:
      return CC_red;
      break;
    case 10:
      return CC_white;
      break;
    case 11:
      return CC_yellow;
      break;
  }
}

characterColors getCharacterRandomSkinColor()
{
  int i = Random(6);
  switch(i)
  {
    case 0:
      return CC_skin_band;
      break;
    case 1:
      return CC_skin_dark;
      break;
    case 2:
      return CC_skin_ivory;
      break;
    case 3:
      return CC_skin_porcelain;
      break;
    case 4:
      return CC_skin_roseBeige;
      break;
    case 5:
      return CC_skin_siena;
      break;
    case 6:
      return CC_skin_warmIvory;
      break;
  } 
}

Dictionary* changeColorDictionary(Dictionary* initialColorDict, bodyParts partToChange, characterColors targetColor)
{
  int listColors[] = new int[3];
  int thisColor;
  
  switch(partToChange)
  {
    case BP_coat:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("coatLight", String.Format("%d", listColors[0]));
      initialColorDict.Set("coat", String.Format("%d", listColors[1]));
      initialColorDict.Set("coatDark", String.Format("%d", listColors[2]));
      break;
    case BP_hair:
      initialColorDict.Set("hair", String.Format("%d", getCharacterHairColor(targetColor)));
      break;
    case BP_hair_mustache:
      thisColor = getCharacterHairColor(targetColor);
      initialColorDict.Set("hair", String.Format("%d", thisColor));
      initialColorDict.Set("mustache", String.Format("%d", thisColor));
      break;
    case BP_necktie:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("neckTie", String.Format("%d", listColors[2]));
      break;
    case BP_pants:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("pants", String.Format("%d", listColors[1]));
      initialColorDict.Set("pantsDark", String.Format("%d", listColors[2]));
      break;
    case BP_shoes:
      listColors = getCharacterColorTones(targetColor);
      initialColorDict.Set("shoe", String.Format("%d", listColors[1]));
      initialColorDict.Set("shoeDark", String.Format("%d", listColors[2]));
      break;      
  }
}

Dictionary* makeAColorDictionary(int hair, int mustache, int skin, int skinShadow, int coat, int coatLight, int coatDark, int neckTie, int underShirt, int pants, int pantsDark, int shoe, int shoeDark)
{
  Dictionary* colorDict = Dictionary.Create(eSorted);
  colorDict.Set("hair", String.Format("%d", hair));
  colorDict.Set("mustache", String.Format("%d", mustache));
  colorDict.Set("skin", String.Format("%d", skin));
  colorDict.Set("skinShadow", String.Format("%d", skinShadow));
  colorDict.Set("coat", String.Format("%d", coat));
  colorDict.Set("coatLight", String.Format("%d", coatLight));
  colorDict.Set("coatDark", String.Format("%d", coatDark));
  colorDict.Set("neckTie", String.Format("%d", neckTie));
  colorDict.Set("underShirt", String.Format("%d", underShirt));
  colorDict.Set("pants", String.Format("%d", pants));
  colorDict.Set("pantsDark", String.Format("%d", pantsDark));
  colorDict.Set("shoe", String.Format("%d", shoe));
  colorDict.Set("shoeDark", String.Format("%d", shoeDark));
  
  return colorDict;
}

Dictionary* makeDefaultColorDictionary()
{
  return makeAColorDictionary(25388, 27501, 58607, 58444, 512, 736, 256, 0, 65535, 4290, 32, 20800, 14528);
}

Dictionary* createASecondaryNPCDictionary(characterColors thisSkin, characterColors thisHair, int hasMustache, characterColors thisJacket, characterColors thisNecktie, characterColors thisUndershirt, characterColors thisPant, characterColors thisShoe)
{
  int finalHair;
  int finalSkin[];
  int finalMustache;
  int finalJacket[];
  int finalNecktie[];
  int finalUndershirt[];
  int finalPants[];
  int finalShoes[];
  
  // SKIN
  if(thisSkin == CC_random)
  {
    thisSkin = getCharacterRandomSkinColor();
  }
  finalSkin = getCharacterColorTones(thisSkin);
  
  // HAIR
  if(thisHair == CC_random)
  {
    thisHair = thisSkin;
  }
  finalHair = getCharacterHairColor(thisHair);
  
  // MUSTACHE
  if(hasMustache == -1)
  {
    hasMustache = Random(1);
  }
  if(hasMustache == 0)
  {
    finalMustache = finalSkin[1];
  } else
  {
    finalMustache = finalHair;
  }
  
  // JACKET
  if(thisJacket == CC_random)
  {
    thisJacket = getCharacterRandomJacketColor();
  }
  finalJacket = getCharacterColorTones(thisJacket);
  
  // NECKTIE
  if(thisNecktie == CC_random)
  {
    int i = Random(1);
    if(i == 0)
    {
      thisNecktie = thisJacket;
    } else
    {
      thisNecktie = CC_black;
    }
  }
  finalNecktie = getCharacterColorTones(thisNecktie);
  
  // UNDERSHIRT
  if(thisUndershirt == CC_random)
  {
    thisUndershirt = CC_white;
  }
  finalUndershirt = getCharacterColorTones(thisUndershirt);
  
  // PANTS
  if(thisPant == CC_random)
  {
    int i = Random(5);
    switch(i)
    {
      case 0:
        thisPant = thisJacket;
        break;
      case 1:
        thisPant = CC_beige;
        break;
      case 2:
        thisPant = CC_black;
        break;
      case 3:
        thisPant = CC_brown;
        break;
      case 4:
        thisPant = CC_grey;
        break;
      case 5:
        thisPant = CC_white;
        break; 
    }
  }
  finalPants = getCharacterColorTones(thisPant);
  
  // SHOES
  if(thisShoe == CC_random)
  {
    int i = Random(6);
    switch(i)
    {
      case 0:
        thisShoe = thisJacket;
        break;
      case 1:
        thisShoe = CC_beige;
        break;
      case 2:
        thisShoe = CC_black;
        break;
      case 3:
        thisShoe = CC_brown;
        break;
      case 4:
        thisShoe = CC_grey;
        break;
      case 5:
        thisShoe = CC_white;
        break;
      case 6:
        thisShoe = thisPant;
        break; 
    }
  }
  finalShoes = getCharacterColorTones(thisShoe);
  
  return makeAColorDictionary(finalHair, finalMustache, finalSkin[1], finalSkin[2], finalJacket[1], finalJacket[0], finalJacket[2], finalNecktie[2], finalUndershirt[0], finalPants[1], finalPants[2], finalShoes[1], finalShoes[2]);
}

Dictionary* createARandomSecondaryNPCDictionary()
{
  return createASecondaryNPCDictionary(CC_random, CC_random, -1, CC_random, CC_random, CC_random, CC_random, CC_random);
}

String getCharacterColorType(int colorCode, Dictionary* defaultColors, String printMessage,  int spriteNumber)
{
  String colorTypes[] = defaultColors.GetKeysAsArray();
  String colorCodeString = String.Format("%d", colorCode);
  int i = 0;
  String returnColorType = "";
  
  for(i = 0 ; i < defaultColors.ItemCount ; i++)
  {
    if(defaultColors.Get(colorTypes[i]) == colorCodeString)
    {
      returnColorType = colorTypes[i];
    }
  }  
  return returnColorType;
}

int getCharacterColorCode(String colorType,  Dictionary* newColors)
{
  colorType = newColors.Get(colorType);
  int colorCode = colorType.AsInt;
  return colorCode;
}

function changeCharacterColors(Character* thisChar, Dictionary* newColors)
{
  int char_View = thisChar.View;
  
  int loopCount;
  int frameCount;
  ViewFrame* thisFrame;
  bool thisFrame_Flipped;
  DrawingSurface* thisSurface;
  Dictionary* defaultColorList;
  
  int loopCounter;
  int frameCounter;
  int spriteCounter = thisChar.ID * 100;
  int spriteMaxSlot = spriteCounter + 30;
  int graphicSlot;
  int colorCode[];
  colorCode = new int[13];
  int surfaceWidth;
  int surfaceHeight;
  int surfaceX;
  int surfaceY;
  int surfaceXY_colorCode;
  String surfaceXY_colorType;
  
  loopCount = Game.GetLoopCountForView(thisChar.View);
  
  for(loopCounter = 0 ; loopCounter < loopCount ; loopCounter++)
  {
    frameCount = Game.GetFrameCountForLoop(thisChar.View, loopCounter);
    for(frameCounter = 0 ; frameCounter < frameCount ; frameCounter++)
    {
      thisFrame = Game.GetViewFrame(thisChar.View, loopCounter, frameCounter);
      oldCharViewSprites[spriteCounter] = thisFrame.Graphic;
      thisFrame_Flipped = thisFrame.Flipped;
      changedCharViewSprites[spriteCounter] = DynamicSprite.CreateFromExistingSprite(thisFrame.Graphic, true);
      spriteCounter++;
    }
  }
  
  spriteCounter = thisChar.ID * 100;
  
  thisSurface = changedCharViewSprites[spriteCounter].GetDrawingSurface();
  
  colorCode[0] = thisSurface.GetPixel(16, 0);//hair
  colorCode[1] = thisSurface.GetPixel(16, 7);//mustache
  colorCode[2] = thisSurface.GetPixel(16, 3);//skin
  colorCode[3] = thisSurface.GetPixel(15, 5);//skinShadow
  colorCode[4] = thisSurface.GetPixel(13, 15);//coat
  colorCode[5] = thisSurface.GetPixel(15, 15);//coatLight
  colorCode[6] = thisSurface.GetPixel(11, 11);//coatDark
  colorCode[7] = thisSurface.GetPixel(16, 13);//neckTie
  colorCode[8] = thisSurface.GetPixel(14, 10);//underShirt
  colorCode[9] = thisSurface.GetPixel(14, 25);//pants
  colorCode[10] = thisSurface.GetPixel(13, 29);//pantsDark
  colorCode[11] = thisSurface.GetPixel(14, 30);//shoe  
  colorCode[12] = thisSurface.GetPixel(13, 30);//shoeDark 
  
  defaultColorList = makeAColorDictionary(colorCode[0], colorCode[1], colorCode[2], colorCode[3], colorCode[4], colorCode[5], colorCode[6], colorCode[7],colorCode[8], colorCode[9], colorCode[10], colorCode[11], colorCode[12]); 
  
  for(spriteCounter = thisChar.ID * 100 ; spriteCounter < spriteMaxSlot ; spriteCounter++)
  {
    thisSurface = changedCharViewSprites[spriteCounter].GetDrawingSurface();
    surfaceHeight = thisSurface.Height;
    surfaceWidth = thisSurface.Width;
    
    //debugDisplay(String.Format("SpriteIndex = %d[Graphics number = %d[HxW = %d x %d", spriteCounter, changedCharViewSprites[spriteCounter].Graphic, surfaceHeight, surfaceWidth));
    
    for(surfaceX = 0 ; surfaceX < surfaceWidth ; surfaceX++)
    {
      for(surfaceY = 0 ; surfaceY < surfaceHeight ; surfaceY++)
      {
        surfaceXY_colorCode = thisSurface.GetPixel(surfaceX, surfaceY);
        if(surfaceXY_colorCode > -1)
        {
          surfaceXY_colorType = getCharacterColorType(surfaceXY_colorCode, defaultColorList, String.Format("At (%d, %d)", surfaceX, surfaceY), spriteCounter);
          if(surfaceXY_colorType != "")
          {
            thisSurface.DrawingColor = getCharacterColorCode(surfaceXY_colorType, newColors);
            thisSurface.DrawPixel(surfaceX, surfaceY);
          }
        }
      }
    }
  }
  
  spriteCounter = thisChar.ID * 100;
  
  for(loopCounter = 0 ; loopCounter < loopCount ; loopCounter++)
  {
    frameCount = Game.GetFrameCountForLoop(thisChar.View, loopCounter);
    for(frameCounter = 0 ; frameCounter < frameCount ; frameCounter++)
    {
      graphicSlot = changedCharViewSprites[spriteCounter].Graphic;
      spriteCounter++;
      thisFrame = Game.GetViewFrame(thisChar.View, loopCounter, frameCounter);
      thisFrame.Graphic = graphicSlot;
    }
  }      
}

function manageRandomCharacter(Character* secNPC, int spawnHotspotIndex, int targetHotspotIndex, CharacterDirection secNPCFacing, bool randomizeAppearance)
{
  if(randomizeAppearance)
  {
    changeCharacterColors(secNPC, createARandomSecondaryNPCDictionary());
  }  
  secNPC.ChangeRoom(player.Room, hotspot[spawnHotspotIndex].WalkToX, hotspot[spawnHotspotIndex].WalkToY, secNPCFacing);
  secNPC.PlaceOnWalkableArea();
  secNPC.Transparency = 0;
  secNPC.Walk(hotspot[targetHotspotIndex].WalkToX, hotspot[targetHotspotIndex].WalkToY, eNoBlock, eWalkableAreas);
  characterIndextoManage.Add(String.Format("%d", secNPC.ID));
}

//### CUTSCENES ###

function triggerCutscene(cutsceneIndex index)
{
  if(!skipAllCutscene)
  {
    switch(index)
    {
      case beginQuest:
        lastMealTime = translateTimeToMinutes(translateTimeToHHMMAM(8, 0, "AM")) + (currentDay * 24 * 60);
        lastSleepTime = translateTimeToMinutes(translateTimeToHHMMAM(8, 0, "AM")) + (currentDay * 24 * 60);
        adjustForDarkness = true;
        createAllTelegram();
        createFullExam();
        createProcedureBook();
        createBible();
        createQuests();
        linkNoteToQuestByTitle("Legal Papers", 0);
        musicInRoom(ALostInThought, 2);
        setBasicTimedEvents();
        object[10].Visible = false; // open bedroom door;
        player.Transparency = 50;
        cHarkersBeard.Transparency = 90;
        Wait(10);
        player.Transparency = 0;
        cHarkersBeard.Transparency = 85;
        player.Walk(54, 170, eBlock, eAnywhere);
        player.FaceDirection(eDirectionLeft, eBlock);
        Wait(5);
        object[10].Visible = true; // close bedroom door;
        Wait(5);
        player.FaceDirection(eDirectionRight, eBlock);
        player.Say("What a night. . .");
        player.Say("I must have worked on those contracts until 3 AM");
        player.Say("I hope Mr. Hawkins will be happy with them");
        player.Say("I guess I should hurry if I want to make it to work before 10 AM");
        player.PlaceOnWalkableArea();
        player.FaceDirection(eDirectionDown);
        break;
      case getToWork:
        cHawkins.Say("Ah! Harker!");
        cHarker.FaceCharacter(cHawkins);
        if(isItBeforeThisTime(10, 00, 00, false, 1))
        {
          cHawkins.Say("Good you are on time!");
          giveScoreOnce("atWorkOnSchedule", 1);
        } else {
          cHawkins.Say("%s![You are late, young man");
          giveScoreOnce("atWorkOnSchedule", -1);
        }
        if(cHarkersBeard.Transparency == 100)
        {
          giveScoreOnce("shavedHarker", 1);
        } else {
          cHawkins.Say("I would appreciate a clean shaven clerk");
          cHawkins.Say("You are not presentable");
          giveScoreOnce("shavedHarker", -1);
          cHawkins.Say("Anyway.");
        }
        cHawkins.Say("I trust you brought back the contracts from last night");
        cHawkins.Say("Come to my office");
        cHawkins.Walk(object[43].X, object[43].Y, eBlock, eWalkableAreas);
        sit(roomObjects, 43, cHawkins, 4, false);
        break;
      case arriveInLondon:
        player.Say(String.Format(whatTimeIsIt(true)));
        player.Say("Right on time");
        if(wasOnTrain())
        {
          if(isPlayerHungry())
          {
            player.Say("They served a delicious assortment of tea sandwiches on bord");
            hasEaten();
          } 
          if(isPlayerDrowsy())
          {
            player.Say("I managed to take a short nap and I feel energized");
            hasSlept();
          }
        }
        player.Say("I have Mr. Hawkins' reservation at the hotel in Covent Garden, the Hummums");
        addTravelDestination(LondonHotel);
        player.Say(String.Format("I need to find my way to Purfleet too, to that %s property", proposedSeller));
        setStoryBeat(HarkerinLondon);
        break;
      case arriveInPurfleet:
        createCarfaxSeller(); 
        hotspot[1].SetTextProperty("TextDescription", String.Format("This is a 'For Sale' sign. It says to contact a certain %s, I could send them a telegram. . .", carfaxSeller));
        cCoach.SetTextProperty("TextDescription", "Poor creature, she look hurt. She has a gash in the leg and clearly is in pain");
        setCoachView(HarkerInside);
        cCoach.Say("NEIGH!");
        Wait(40);
        cCabby.Say("Oh my. . .");
        Wait(20);
        player.PlaceOnWalkableArea();
        setCoachView(Empty);
        player.Transparency = 0;
        break;     
      default:
        debugDisplay(String.Format("Cutscene %d is supposed to start but it is not handled by the 'triggerCutscene' function", index));
        break;
    }
  }
  else
  {
    switch(index) // things to do if the cutscene is skipped
    {
      case beginQuest:
        setStoryBeat(startYourDay);
        setCurrentZone(JonathanApt);
        setupTravelDestinations();
        createProcedureBook();
        createBible();
        createQuests();
        linkNoteToQuestByTitle("Legal Papers", 0);
        lastMealTime = translateTimeToMinutes(translateTimeToHHMMAM(8, 0, "AM")) + (currentDay * 24 * 60);
        lastSleepTime = translateTimeToMinutes(translateTimeToHHMMAM(8, 0, "AM")) + (currentDay * 24 * 60);
        musicInRoom(ALostInThought, 2);
        setBasicTimedEvents();
        addTravelDestination(HawkinsOffices);
        player.x = 158;
        player.y = 169;
        cHarkersBeard.x = player.x;
        cHarkersBeard.y = player.y;
        player.Transparency = 0;
        cHarkersBeard.Transparency = 85;        
        break;
      default:
        break;
    }
  }
}

function setProposedArchiveBook(int optionNb)
{
  proposedArchiveBooks[optionNb] = true;
  if(player.Room != 17 && player.Room == cLibrarian.Room)
  {
    cLibrarian.Say("*whispering*[You can find this book in the archive room");
  }
}

bool getProposedArchiveBook(int optionNb)
{
  return proposedArchiveBooks[optionNb];
}

String findBookTextFromTitle(String bookTitle)
{
  if(books_description.Contains(bookTitle))
  {
    return books_description.Get(bookTitle);
  } else
  {
    debugDisplay(String.Format("%s is not in the book list", bookTitle));
  }
}

function show_book_gui(String bookTitle)
{
  String separator = books_separator.Get(bookTitle);
  String reunitor = books_reunitor.Get(bookTitle);
  
  setCurrentBookDict(findBookTextFromTitle(bookTitle), separator, reunitor, LblBook_left);
  writeBookPages(1);
  lblBookTitle.Text = bookTitle;
  open_gui(gBook);
}

function btnLedgerPrev_OnClick(GUIControl *control, MouseButton button)
{
  String bookTitle = lblBookTitle.Text;
  String separator = books_separator.Get(bookTitle);
  String reunitor = books_reunitor.Get(bookTitle);
  
  int leftPageNumber = parseCurrentPage(lblBook_pgNbLeft);
  if(leftPageNumber - 2 < 1)
  {
    writeBookPages(1);
  } else
  {
    writeBookPages(leftPageNumber - 2);
  }
}

function btnLedgerNext_OnClick(GUIControl *control, MouseButton button)
{
  String bookTitle = lblBookTitle.Text;
  String separator = books_separator.Get(bookTitle);
  String reunitor = books_reunitor.Get(bookTitle);
  
  int rightPageNumber = parseCurrentPage(lblBook_pgNbRight);
  writeBookPages(rightPageNumber + 1);
}

function highlightWord(String word, GUIControl *originalTextLabel, GUIControl *highlighterLbl, int startX,  int startY)
{
  highlighterLbl.Transparency = 100;
  highlighterLbl.Visible = true;
  highlighterLbl.ZOrder = originalTextLabel.ZOrder + 1;
  if(startX == 0)
  {
    highlighterLbl.X = startX + originalTextLabel.X;// + originalTextLabel.OwningGUI.X;
  } else {
    highlighterLbl.X = startX + originalTextLabel.X + GetTextWidth(" ", eFontNormal);
  }
  highlighterLbl.Y = startY + originalTextLabel.Y;// + originalTextLabel.OwningGUI.Y;
  highlighterLbl.AsLabel.Text = word;
  highlighterLbl.Width = GetTextWidth(word, eFontNormal) * 2;
  highlighterLbl.Height = GetTextHeight(word, eFontNormal, highlighterLbl.Width);
  highlighterLbl.Transparency = 0;
  memorize(word);
}

String findThatWord(GUIControl* labelName, Label* highlightLbl, int clickX, int clickY)
{
  Dictionary* eachWord = Dictionary.Create(eSorted);
  int counter = 0;
  
  String FullText = labelName.AsLabel.Text;
  int lblWidth = labelName.AsLabel.Width;
  
  int spaceIndex = 1000;
  int alineaIndex = 1000;
  int nextCut = 1000;
  String nextCutChar = "";
  
  String thatString = FullText;
  String returnWord;
  
  while(FullText.IndexOf(" ") != -1 || FullText.IndexOf("[") != -1)
  {
    nextCut = 1000;
    nextCutChar = "";
    
    spaceIndex = FullText.IndexOf(" ");
    if(spaceIndex == -1) {
      spaceIndex = 1000;
    } else if (spaceIndex < nextCut) {
      nextCut = spaceIndex;
      nextCutChar = " ";
    }
    alineaIndex = FullText.IndexOf("[");
    if(alineaIndex == -1) {
      alineaIndex = 1000;
    } else if (alineaIndex < nextCut) {
      nextCut = alineaIndex;
      nextCutChar = "[";
    }     
    
    thatString = FullText.Truncate(nextCut);
    thatString = thatString.Replace(" ", "", eCaseInsensitive);
    thatString = thatString.Replace("[", "", eCaseInsensitive);
    eachWord.Set(String.Format("%05d", counter), thatString);
    FullText = removeOneStringInstance(FullText, thatString.Append(nextCutChar));
    counter++;
  }
  eachWord.Set(String.Format("%05d", counter), FullText);
  
  String eachWordArray[] = eachWord.GetValuesAsArray();
  
  thatString = eachWordArray[0];
  int startX = 0;
  int endX = GetTextWidth(thatString, eFontNormal);
  int startY = 0;
  int endY = GetTextHeight(thatString, eFontNormal, lblWidth);
  int newY = GetTextHeight(thatString, eFontNormal, lblWidth);
  int i = 0;
  
  while((i < eachWord.ItemCount - 1) &&
        ((clickX < startX ||
         clickX > endX) ||
        (clickY < startY ||
         clickY > endY)))
  {
    i++;
    thatString = thatString.Append(" ");
    thatString = thatString.Append(eachWordArray[i]);
    newY = GetTextHeight(thatString, eFontNormal, lblWidth);
    if(newY != endY)
    {
      startX = 0;
      endX = GetTextWidth(eachWordArray[i], eFontNormal);
      startY = endY;
      endY = newY;
    } else {
      startX = endX;
      endX = endX + GetTextWidth(eachWordArray[i], eFontNormal) + GetTextWidth(" ", eFontNormal);
    }    
  }
  
  if(i < eachWord.ItemCount) {
    returnWord = eachWordArray[i];
    if(labelName == lblNoteDescription)
    {
      highlightWord(eachWordArray[i], labelName, highlightLbl, startX, startY);
    }
  } else {
    returnWord = "";
  }
  
  return returnWord;
}

function clickALabel(GUI* thisParentGUI, Label* clickedLabel, Label* highlightLabel)
{
  playSelect();
  int clickX = mouse.x - thisParentGUI.X - clickedLabel.X;
  int clickY = mouse.y - thisParentGUI.Y - clickedLabel.Y;
  
  if(mouse.x > thisParentGUI.X + clickedLabel.X && 
     mouse.x < thisParentGUI.X + clickedLabel.X + clickedLabel.Width &&
     mouse.y > thisParentGUI.Y + clickedLabel.Y &&
     mouse.y < thisParentGUI.Y + clickedLabel.Y + clickedLabel.Height)
  {
    findThatWord(clickedLabel, highlightLabel, clickX, clickY);
  }
}

function btnNoteDescription_OnClick(GUIControl *control, MouseButton button)
{
  clickALabel(gNotebook, lblNoteDescription, lblNoteDescriptionHighlight);
}

function btnSimpeTextboxNotebook_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  open_gui(gNotebook);
}

int whatHourAfterThisPeriod(int nb, String timeType, int currentH, int currentM)
{
  switch(timeType) {
    case "Hours":
      currentH = currentH + nb;
      break;
    case "Minutes":
      currentM = currentM + nb;
      while(currentM >= 60)
      {
        currentM = currentM - 60;
        currentH++;
      }
      break;
    default:
      break;
  }
  while(currentH >= 24)
  {
    currentH = currentH - 24;
  }
  return currentH;
}

int minutesUntilTime(int targetH, String targetAMPM)
{
  int currentH = getCurrentHour();
  int currentM = getCurrentMinutes();
  String currentAMPM = getAMPM();
  
  if(targetAMPM == "PM" && targetH != 12) 
  {
    targetH = targetH + 12;
  }
  
  if(currentAMPM == "PM" && currentH != 12) 
  {
    currentH = currentH + 12;
  }
  
  if(targetH <= currentH)
  {
    targetH = targetH + 24;
  }
  
  targetH = targetH * 60;
  
  currentH = currentH * 60;
  currentH = currentH + currentM;
  
  return targetH - currentH;
}

function btnToggleForUntil_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  String currentBtnText = btnToggleForUntil.Text;
  int showHour = getCurrentHour();
  int showMinutes = getCurrentMinutes();
  String showAMPM = getAMPM();
  int textBoxContent;
  
  if(currentBtnText.EndsWith("for", eCaseInsensitive)) {
    btnToggleForUntil.Text = btnToggleForUntil.Text.Replace("for", "until", eCaseInsensitive);
    btnToggleMinHrs.Text = showAMPM;
  } else {
    btnToggleForUntil.Text = btnToggleForUntil.Text.Replace("until", "for", eCaseInsensitive);
    btnToggleMinHrs.Text = "Minutes";
  }
}

function btnToggleMinHrs_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  String ForUntilBtnText = btnToggleForUntil.Text;
  String MinHrBtnText = btnToggleMinHrs.Text;
  
  if(ForUntilBtnText.EndsWith("for", eCaseInsensitive)) {
    if(MinHrBtnText == "Minutes")
    {
      btnToggleMinHrs.Text = "Hours";
    } else  {
      btnToggleMinHrs.Text = "Minutes";
    }
  } else {
    if(MinHrBtnText == "AM")
    {
      btnToggleMinHrs.Text = "PM";
    } else  {
      btnToggleMinHrs.Text = "AM";
    }
  }
    
}

function applyWait(bool doTheFade)
{
  String ForUntilBtnText = btnToggleForUntil.Text;
  String MinHrBtnText = btnToggleMinHrs.Text;
  int minutesToAdd;
  bool sleeping = false;
  bool standing = (player.GetProperty("sitting") == -1);
  
  if(ForUntilBtnText.EndsWith("for"))
  {
    minutesToAdd = tbWaitAmount.Text.AsInt;
    if(MinHrBtnText == "Hours")
    {
      minutesToAdd = minutesToAdd * 60;
    }    
  } else {
    minutesToAdd = minutesUntilTime(tbWaitAmount.Text.AsInt, btnToggleMinHrs.Text);
  }
  
  if(minutesToAdd > 0 && lblWaitUI.Text.IndexOf("sleep") != -1)
  {
    sleeping = true;
  }
  
  
  
  hide_wait_gui();
  
  playerSitsInClosestChair(false,  100.0);
  
  if(doTheFade)
  {
    FadeOut(3);
    addTime(0, minutesToAdd, 0, 0);
    Wait(40);
    if(minutesToAdd > 1)
    {
      emptySayBackground();
      removeRandomChars(true);
    }
    FadeIn(3);
    player.Say(String.Format("Well, it is %s, now", whatTimeIsIt(true)));
  } else
  {
    addTime(0, minutesToAdd, 0, 0);
    if(minutesToAdd > 1)
    {
      emptySayBackground();
      removeRandomChars(true);
    }
    Display("Time passes");
    Display(String.Format("It is now %s", whatTimeIsIt(false)));
  }
  
  if(standing && player.GetProperty("sitting") != -1)
  {
    standUp(player, 1);
  }
  
  if(sleeping)
  {
    hasSlept();
  }
}

function btnConfirmWait_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  applyWait(Room.GetProperty("FadeForWait"));
}

function btnCancelWait_OnClick(GUIControl *control, MouseButton button)
{
  playCancel();
  hide_wait_gui();
}

function btnClassifyBackToInventory_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  close_gui(gClassify);
  show_inventory_window();
}

function updateDictionaryOrder(Dictionary* thisDict, ListBox* thisLB)
{
  Dictionary* tempDict = Dictionary.Create(eNonSorted);
  String thisDictKeys[];
  int i;
  thisDictKeys = thisDict.GetKeysAsArray();
  
  for(i = 0 ; i < thisDict.ItemCount ; i++)
  {
    tempDict.Set(thisDictKeys[i], thisDict.Get(thisDictKeys[i]));
  }
  
  thisDict.Clear();
  
  for(i = 0 ; i < thisLB.ItemCount ; i++)
  {
    thisDict.Set(thisLB.Items[i], tempDict.Get(thisLB.Items[i]));
  }
}

function changeListBoxOrder(ListBox* thisLB, bool UP, int currentIndex)
{
   String itemName;
   int indexMove = 1;
   if(UP)
   {
     indexMove = -1;     
   }
   
   if(UP && currentIndex > 0 || !UP && currentIndex < thisLB.ItemCount - 1) {
     itemName = thisLB.Items[currentIndex];
     thisLB.RemoveItem(currentIndex);
     thisLB.InsertItemAt(currentIndex + indexMove, itemName);
     thisLB.SelectedIndex = currentIndex + indexMove;
   }
}

function updateClassifyListOrder(bool UP)
{
  String parentItemName = lblClassifyTitle.Text;
  InventoryItem* parentItem = inventory[findInvItemIndexByName(parentItemName)];
  Dictionary* thisParentItemDictionary_desc = getDictionariesForParentItems(parentItem, subitemDescription);
  Dictionary* thisParentItemDictionary_notes = getDictionariesForParentItems(parentItem, subitemNote);
  
  int currentSelection = lbClassifiable.SelectedIndex;
  changeListBoxOrder(lbClassifiable, UP, currentSelection);
  
  updateDictionaryOrder(thisParentItemDictionary_desc, lbClassifiable);
  updateDictionaryOrder(thisParentItemDictionary_notes, lbClassifiable);
}

function btnClassifyUP_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  updateClassifyListOrder(true);
}

function btnClassifyDOWN_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  updateClassifyListOrder(false); 
}

function btnClassifyFILEIT_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  String parentItemName = lblClassifyTitle.Text;
  Dictionary* solution = getClassifySolutionDict(parentItemName);
  InventoryItem* parentItem = inventory[findInvItemIndexByName(parentItemName)];
  ValidateFileIt(lbClassifiable, solution, parentItem, parentItem.GetTextProperty("invContext_classifiedName"), 2);
}


function btnSimpleTBConfirm_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  confirmSimpleTextbox();
}

function btnStartGame_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  FadeOut(6);
  close_gui(gSplash);
  createCredits();
  Wait(10);
  open_gui(gStartHelp);
  FadeIn(6);
}

function btnGameOver_quit_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  close_gui(gGameOver);
  open_gui(gExitGame);
}

function btnGameOver_restart_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  close_gui(gGameOver);
  open_gui(gRestart);
}

function btnGameOver_restore_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  close_gui(gGameOver);
  show_restore_game_dialog();
}

function lbTrainDepartures_OnSelectionChanged(GUIControl *control)
{
  playSelect();
  adjustTicketDescription(lbTrainDepartures.Items[lbTrainDepartures.SelectedIndex]);
}

function btnTrainTicketCancel_OnClick(GUIControl *control, MouseButton button)
{
  playCancel();
  close_gui(gTrainTickets);
}

function btnBuyTicket_OnClick(GUIControl *control, MouseButton button)
{
  playConfirm();
  String destination = lblTrainTicket_title.Text.Substring(lblTrainTicket_title.Text.IndexOf(" to ") + 4, lblTrainTicket_title.Text.Length - (lblTrainTicket_title.Text.IndexOf(" to ") + 4));
  String time = lbTrainDepartures.Items[lbTrainDepartures.SelectedIndex];
  close_gui(gTrainTickets);
  player.Say(String.Format("A ticket to %s on the %s train, please", destination, time));
  iTicketLondon.SetTextProperty("TextDescription", String.Format("My %s ticket to London", time));
  trainDepartureTime = time;
  player.AddInventory(iTicketLondon);  
}

function btnSubitem_inventory_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  close_gui(gSubitems);
  show_inventory_window();
}

bool hasSeenDraculaLetter()
{
  return seenDraculaLetter;
}

function hasSeenSubitem(InventoryItem* thisParentItem, String subitemName)
{
  bool invWindowOpened;
  
  switch(thisParentItem)
  {
    case iTelegrams:
      if(lblSubitemDescription.Text.IndexOf("You need to go to Count Dracula's castle") != -1)
      {
        if(Game.DoOnceOnly("THE assignment"))
        {
          gSubitems.Visible = false;
          invWindowOpened = gInventory.Visible;
          if(invWindowOpened)
          {
            gInventory.Visible = false;
          }
          player.Say("Oh my! Mr. Hawkins is giving me the sale deal. . .");
          gSubitems.Visible = true;
          gInventory.Visible = invWindowOpened;
          modifyCloudiness(15);
          setTelegramInclusionByIndex("Mina", 5, true);
          setTelegramInclusionByIndex("Hawkins", 4, true);
          dLawSocietyReceptionist.SetOptionState(2,eOptionOn);
          seenDraculaLetter = true;
        }
      } else if(lblSubitemDescription.Text.IndexOf("stop a few days in Munich") != -1)
      {
        //for next game maybe? :)
      } else if(lblSubitemDescription.Text.IndexOf("Made detailed sale dossier available for you at Law Society reception") != -1)
      {
        dLawSocietyReceptionist.SetOptionState(11, eOptionOn);
      } else if(lblSubitemDescription.Text.IndexOf("Edith Nash") != -1)
      {
        if(Game.DoOnceOnly("found Edith Nash letter"))
        {
          dTelegram.SetOptionState(3, eOptionOn);
        }
      }
      break;
    default:
      break;
  }
}

function showSubitemDescription(InventoryItem* thisParentItem, Label* thisDescLabel, String subitemName,  int page,  Label* thisLblPageNb, Button* thisPrevBtn, Button* thisNextBtn)
{
  Dictionary* thisParentItemDictionary_desc = getDictionariesForParentItems(thisParentItem, subitemDescription);
  Dictionary* thisParentItemDictionary_note = getDictionariesForParentItems(thisParentItem, subitemNote);
  String descDisplayed;
  if(thisParentItemDictionary_desc.Contains(subitemName))
  {
    descDisplayed = thisParentItemDictionary_desc.Get(subitemName);
    descDisplayed = descDisplayed.Append("[");
    descDisplayed = descDisplayed.Append(thisParentItemDictionary_note.Get(subitemName));
  } else
  {
    debugDisplay(String.Format("Failed to fetch %s in parent item %s", subitemName, thisParentItem.Name));
  }
  
  thisDescLabel.Text = getBookPage(descDisplayed, " ", " ", thisDescLabel, thisLblPageNb, page, thisPrevBtn, thisNextBtn);
  hasSeenSubitem(thisParentItem, subitemName);
}

function changeSubitemDescriptionPage(bool prevORnext, ListBox* thisListBox,  Label* thisTitleLabel,  Label* thisItemDescription, Label* thisPageNumberLbl, Button* thisBtnPrev, Button* thisBtnNext)
{
  String parentItemName = thisTitleLabel.Text;
  InventoryItem* thisParentItem = inventory[findInvItemIndexByName(parentItemName)];
  String subitemName = thisListBox.Items[thisListBox.SelectedIndex];
  int displayedPage = parseCurrentPage(thisPageNumberLbl);
  if(prevORnext)
  {
    displayedPage--;
  } else
  {
    displayedPage++;
  }
  showSubitemDescription(thisParentItem, thisItemDescription, subitemName, displayedPage, thisPageNumberLbl, thisBtnPrev, thisBtnNext);
}

function lbClassifiable_OnSelectionChanged(GUIControl *control)
{
  playSelect();
  String parentItemName = lblClassifyTitle.Text;
  String subitemName = lbClassifiable.Items[lbClassifiable.SelectedIndex];
  InventoryItem* parentItem = inventory[findInvItemIndexByName(parentItemName)];
  
  Dictionary* thisParentItemDictionary_desc = getDictionariesForParentItems(parentItem, subitemDescription);
  Dictionary* thisParentItemDictionary_note = getDictionariesForParentItems(parentItem, subitemNote);
  String descDisplayed = thisParentItemDictionary_desc.Get(lbClassifiable.Items[lbClassifiable.SelectedIndex]);
  descDisplayed = descDisplayed.Append("[");
  descDisplayed = descDisplayed.Append(thisParentItemDictionary_note.Get(lbClassifiable.Items[lbClassifiable.SelectedIndex]));
  lblClassifySelectedItemName.Text = subitemName.UpperCase();
  showSubitemDescription(parentItem, lblClassifyDescription, subitemName, 1, lblClassify_pageNb, btnClassify_prevPage, btnClassify_nextPage);
}

function fillSubItemLB(ListBox* lbToFill, Label* lblThisSubitemDescription,  InventoryItem* thisParentItem, Label* thisLblPageNb, Button* thisBtnPrev, Button* thisBtnNext)
{
  int i;
  String descDisplay;
  Dictionary* Dict_desc = getDictionariesForParentItems(thisParentItem, subitemDescription);
  String dictKeys[] = Dict_desc.GetKeysAsArray();
  
  lbToFill.Clear();
  
  for(i = 0 ; i < Dict_desc.ItemCount ; i++) {
    lbToFill.AddItem(dictKeys[i]);
  }
  
  lbToFill.SelectedIndex = 0;
  showSubitemDescription(thisParentItem, lblThisSubitemDescription, lbToFill.Items[0], 1, thisLblPageNb, thisBtnPrev, thisBtnNext); 
}

function lbSubtiems_OnSelectionChanged(GUIControl *control)
{
  playSelect();
  String parentItemName = lblSubitem_titles.Text;
  InventoryItem* thisParentItem = inventory[findInvItemIndexByName(parentItemName)];
  showSubitemDescription(thisParentItem, lblSubitemDescription,  lbSubtiems.Items[lbSubtiems.SelectedIndex], 1, lblSubitem_pageNb, btnSubitemDescription_prev, btnSubitemDescription_next);  
}

function btnClassify_nextPage_OnClick(GUIControl *control, MouseButton button)
{
  changeSubitemDescriptionPage(false, lbClassifiable, lblClassifyTitle, lblClassifyDescription, lblClassify_pageNb, btnClassify_prevPage, btnClassify_nextPage);
}

function btnClassify_prevPage_OnClick(GUIControl *control, MouseButton button)
{
  changeSubitemDescriptionPage(true, lbClassifiable, lblClassifyTitle, lblClassifyDescription, lblClassify_pageNb, btnClassify_prevPage, btnClassify_nextPage);
}

function show_exam_gui()
{
  btnExamProcedures.Enabled = player.HasInventory(iProcedures);
  btnExamProcedures.Visible = player.HasInventory(iProcedures);
  
  open_gui(gExam);
}

bool globalHighjackIndexElementVerb(String stringIndex, String stringElement, String verb)
{
  bool skipRoomInteraction = false;
  int index = stringIndex.AsInt;
  elementType eT = stringToET(stringElement);
  
  if(eT == allInventoryItems && index == 35 && (verb == "read" || verb == "look"))//Diary
  {
    show_book_gui("Diary");
    skipRoomInteraction = true;
  } else if(eT == allInventoryItems && index == 34 && (verb == "read" || verb == "look"))//Procedures
  {
    show_book_gui("Procedures");
    skipRoomInteraction = true;
  } else if(eT == allInventoryItems && index == 12 && (verb == "read" || verb == "look"))//Exam
  {
    show_exam_gui();
    skipRoomInteraction = true;
  }
  
  return skipRoomInteraction;
}

function openSubinventoryGUI(String parentItemName)
{
  InventoryItem* parentItem = inventory[findInvItemIndexByName(parentItemName)];
  Dictionary* subitemDescDict_desc = getDictionariesForParentItems(parentItem, subitemDescription);
  Dictionary* subitemDescDict_note = getDictionariesForParentItems(parentItem, subitemNote);
  String invContext = parentItem.GetTextProperty("InvContext");
  
  switch(invContext)
  {
    case "Classify":
      fillSubItemLB(lbClassifiable, lblClassifyDescription,  parentItem, lblClassify_pageNb, btnClassify_prevPage, btnClassify_nextPage);
      lblClassifyTitle.Text = "Items";
      lblClassifyTitle.Text = lblClassifyTitle.Text.Replace("Items", parentItemName, eCaseInsensitive);
      lblClassifySelectedItemName.Text = lbClassifiable.Items[lbClassifiable.SelectedIndex].UpperCase();
      btnClassifyProcedures.Enabled = player.HasInventory(iProcedures);
      btnClassifyProcedures.Visible = player.HasInventory(iProcedures);
      open_gui(gClassify);
      break;
    case "Contains":
      fillSubItemLB(lbSubtiems, lblSubitemDescription,  parentItem, lblSubitem_pageNb, btnSubitemDescription_prev, btnSubitemDescription_next);
      lblSubitem_titles.Text = "Items";
      lblSubitem_titles.Text = lblSubitem_titles.Text.Replace("Items", parentItemName, eCaseInsensitive);
      open_gui(gSubitems);
      break;
    default:
      debugDisplay(String.Format("Unhandled invContext type : %s", invContext));
      break;
  }
}

function btnInvContext_OnClick(GUIControl *control, MouseButton button)
{
  playSelect();
  String parentItemName = lbInventory.Items[lbInventory.SelectedIndex];
  close_gui(gInventory);
  openSubinventoryGUI(parentItemName);
}

bool interact(String indexElementVerbHandled[]) // reacts appropriately based on the index,  element and verb passed (reactions detailed in this function's switch)
{
  int index = indexElementVerbHandled[0].AsInt;
  elementType eT = stringToET(indexElementVerbHandled[1]);
  String verb = indexElementVerbHandled[2];
  String lookDescription;
  int alternateSpriteNumber;
  int walkableAreaNumber;
  bool handledInteraction = true;
  
  Set* readContent;
  String readContentToDisplay[];
  int i;
  
  switch (verb)
  {
    case "look":
      switch (eT)
      {
        case roomObjects:
          if(object[index].Visible || object[index].GetProperty("InteractableWhenInvisible"))
          {
            lookDescription = object[index].GetTextProperty("TextDescription");
            if(object[index].GetProperty("tellsTime"))
            {
              lookDescription = addTimeToDescription(lookDescription);
            }
            player.FaceObject(object[index], eBlock);
            player.Say(lookDescription);
          } else {
            player.Say("I'm not sure what I'm looking at. . .");
          }
          break;
        case roomHotspots:
          lookDescription = hotspot[index].GetTextProperty("TextDescription");
          if(hotspot[index].GetProperty("tellsTime"))
            {
              lookDescription = addTimeToDescription(lookDescription);
            }
          player.FaceLocation(hotspot[index].WalkToX, hotspot[index].WalkToY, eBlock);
          player.Say(lookDescription);
          break;
        case allCharacters:
          if(character[index].Transparency < 100){
            lookDescription = character[index].GetTextProperty("TextDescription");
            player.FaceCharacter(character[index], eBlock);
            player.Say(lookDescription);
          } else {
            player.Say("I'm not sure what I'm looking at. . .");
          }
          break;
        case allInventoryItems:
          lookDescription = inventory[index].GetTextProperty("TextDescription");
          player.FaceDirection(eDirectionDown, eBlock);
          if(inventory[index].GetProperty("tellsTime"))
            {
              lookDescription = addTimeToDescription(lookDescription);
            }
          player.Say(lookDescription);
          break;
        default:
          player.Say("I'm not sure what I'm looking at. . .");
          break;
      }
      break;
    case "open":
      switch(eT)
      {
        case roomObjects:
          alternateSpriteNumber = object[index].GetProperty("Open_SpriteNumber");
          walkableAreaNumber = object[index].GetProperty("WalkableArea_opened");
          if(alternateSpriteNumber == -1)
          {
            player.Think("I cannot open this");
          } else if(isCharacterNearObject(object[index], reachDistance,  player))
          {
            if(alternateSpriteNumber == -2) {
              if(!object[index].Visible)
              {
                player.Think("It is already opened");
              } else {
                object[index].Visible = false;
              }
            } else if(object[index].Graphic == alternateSpriteNumber)
            {
              if(object[index].Visible)
              {
                player.Think("It is already opened");
              } else {
                object[index].Visible = true;
              }
            } else {
              object[index].Graphic = alternateSpriteNumber;
            }
            if(walkableAreaNumber != -1)
            {
              RestoreWalkableArea(walkableAreaNumber);
            }
          } else {
            player.Think("I can't reach from here");
          }
          break;
        case allInventoryItems:
          alternateSpriteNumber = inventory[index].GetProperty("Open_SpriteNumber");
          if(alternateSpriteNumber == -1)
          {
            player.Think("I cannot open this");
          } else if(inventory[index].Graphic == alternateSpriteNumber) 
          {
            player.Think("It is already opened");
          } else {
            inventory[index].Graphic = alternateSpriteNumber;
          }
          break;
        default:
          player.Think("I cannot open this");
          break;
      }
      break;
    case "close":
      switch(eT)
      {
        case roomObjects:
          alternateSpriteNumber = object[index].GetProperty("Close_SpriteNumber");
          walkableAreaNumber = object[index].GetProperty("WalkableArea_opened");
          if(alternateSpriteNumber == -1)
          {
            player.Think("I cannot close this");
          } else if(isCharacterNearObject(object[index], reachDistance,  player))
          {
            if(alternateSpriteNumber == -2) 
            {
              if(!object[index].Visible)
              {
                player.Think("It is already closed");
              } else {
                object[index].Visible = false;
              }
            } else if(object[index].Graphic == alternateSpriteNumber)
            {
              if(object[index].Visible)
              {
                player.Think("It is already closed");
              } else {
                object[index].Visible = false;
              }
            } else {
              object[index].Graphic = alternateSpriteNumber;
            }
            if(walkableAreaNumber != -1)
            {
              RemoveWalkableArea(walkableAreaNumber);
            } 
          } else {
            player.Think("I can't reach from here");
          }
          break;
        case allInventoryItems:
          alternateSpriteNumber = inventory[index].GetProperty("Close_SpriteNumber");
          if(alternateSpriteNumber == -1)
          {
            player.Think("I cannot close this");
          } else if(inventory[index].Graphic == alternateSpriteNumber) 
          {
            player.Think("It is already closed");
          } else {
            inventory[index].Graphic = alternateSpriteNumber;
          }
          break;
        default:
          player.Think("I cannot close this");
          break;
      }
      break;
    case "approach":
      if(!showHints){
        player.Think("I can walk there on my own");
      } else {
        switch(eT)
        {
          case roomObjects:
            player.Walk(object[index].X, object[index].Y, eNoBlock, eWalkableAreas);
            break;
          case roomHotspots:
            player.Walk(hotspot[index].WalkToX, hotspot[index].WalkToY, eNoBlock, eWalkableAreas);
            break;
          case allCharacters:
            player.Walk(character[index].x, character[index].y, eNoBlock, eWalkableAreas);
            break;
          default:
            player.Think("I am not not where to go");
            break;
        }
      }
      break;
    case "sit":
      sit(eT, index, player, 2,  false);
      break;
    case "take":
      if(eT == roomObjects)
      {
        if(object[index].GetProperty("takable") != -1)
        {
          if(isCharacterNearObject(object[index], reachDistance, player))
          {
            player.Think("This can be useful");
            player.AddInventory(inventory[object[index].GetProperty("takable")]);
            object[index].Visible = false;
            removeFromInteractableElements(object[index].Name);
            giveScoreOnce(inventory[object[index].GetProperty("takable")].Name, 1);
          } else {
            player.Think("I need to go a little closer");
          }
        } else {
          player.Think("I am too far away");
        }
      }
      break;
    case "talk":
      switch (eT)
      {
        case allCharacters:
          if(character[index].Room != player.Room)
          {
            player.Think("I am not sure whom to speak to");
          } else
          {
            if (character[index].GetProperty("dialogIndex") == -1)
            {
              player.FaceCharacter(character[index], eBlock);
              player.Think("I do not know what I should say.");
            } else 
            {
              if (character[index].GetProperty("dialogMaxDistance") == -1)
              {
                player.Say("I would rather not talk to them");
              } else if (!isCharacterNearCharacter(character[index], IntToFloat(character[index].GetProperty("dialogMaxDistance")), player))
              {
                player.FaceCharacter(character[index], eBlock);
                player.Think(String.Format("I need to get closer to %s", character[index].Name));
              } else 
              {
                if (character[index].GetProperty("dialogWhileSitting") != -1 && (player.GetProperty("sitting") != character[index].GetProperty("dialogWhileSitting")))
                {
                  player.FaceCharacter(character[index], eBlock);
                  player.Think(String.Format("Politeness dictates that I should sit in the %s before speaking to %s", object[character[index].GetProperty("dialogWhileSitting")].Name.LowerCase(), character[index].Name));
                } else
                {
                  if(player.GetProperty("sitting") == -1)
                  {
                    if(character[index].GetProperty("sitting") == -1)
                    {
                      character[index].StopMoving();
                      character[index].FaceDirection(eDirectionDown);
                    }
                    player.Walk(character[index].x, character[index].y + 15, eBlock, eWalkableAreas);
                    player.FaceDirection(eDirectionUp);
                  }
                  dialog[character[index].GetProperty("dialogIndex")].Start();
                }
              }
            }
          }
          break;
        default:
          player.Think("I am not sure whom to speak to");
          break;
      }
      break;
    case "read":
      if(eT == allInventoryItems && inventory[index].GetTextProperty("ReadDisplay") != "Null")
      {
        readThis(inventory[index].GetTextProperty("ReadDisplay"), "¬∂");
      } else {
        player.Think("I cannot read this");
      }
      break;
    case "organize":
      if(eT != allInventoryItems || inventory[index].GetTextProperty("invContext") != "Classify")
      {
        player.Think("I cannot classify this");
      } else{
        switch(inventory[index].Name)
        {
          case "Legal papers":
            openSubinventoryGUI("Legal papers");
            break;
          case "Carfax Papers":
            openSubinventoryGUI("Carfax Papers");
            break;
          default:
            debugDisplay(String.Format("%s is not a defined fileFamily", inventory[index].Name));
            break;
        }
      }
      break;
    case "photograph":
      switch(eT)
      {
        case roomObjects:
          takeAPicture(object[index].Name, object[index].GetTextProperty("TextDescription"), 0);
          break;
        case roomHotspots:
          takeAPicture(hotspot[index].Name, hotspot[index].GetTextProperty("TextDescription"), 0);
          break;
        case allCharacters:
          takeAPicture(character[index].Name, character[index].GetTextProperty("TextDescription"), 0);
          break;
        case allInventoryItems:
          takeAPicture(inventory[index].Name, object[index].GetTextProperty("TextDescription"), 0);
          break;
        default:
          player.Think("I am not sure what to photograph");
          break;
      }
      break;
    default:
      handledInteraction = false;
      break;
  }
  return handledInteraction;
}

bool globalHighjackCMD(String cmd)
{
  bool returnToNormalParsing = true;
  if(cmd.StartsWith("smoke", eCaseInsensitive) || (cmd.StartsWith("light") && cmd.IndexOf("cigar") != -1)) {             // SMOKE KEYWORDS
    returnToNormalParsing = false;
    if(player.HasInventory(iCigars))
    {
      if(player.HasInventory(iMatches))
      {
        player.Think("I can take a few minutes for a cigar");
        FadeOut(5);
        if(player.GetProperty("sitting") == 4 && player.Room == 1) // sitting in sofa
        {
          giveScoreOnce("smoke confortably", 1);
        }
        addTime(0, 5+Random(10), 0, 0);
        FadeIn(5);
        player.Think("Ah, that was satisfying");
      } else{
        player.Think("I need matches to light the cigar");
      }
    } else
    {
      if(player.Room == 1)
      {
        player.Think("I have some cigars by the padded chair. . .");
      } else
      {
        player.Think("I have some cigars at home. . .");
      }
    }
  } else if(cmd.StartsWith("shave", eCaseInsensitive))                                                                  // SHAVE KEYWORD 
  {
    returnToNormalParsing = false;
    if(player.HasInventory(iRazor))
    {
      useInteraction("use razor on myself");
    } else {
      player.Think("I need to find my razor to shave");
    }
  } else if ((cmd.IndexOf("Translate") != -1 || cmd.IndexOf("decode") != -1) &&                                         // TRANSLATE MORSE CODE
             (cmd.IndexOf("code") != -1 || cmd.IndexOf("telegram")))
  {
    returnToNormalParsing = false;
    if(player.Room == 8)
    {
      if(getMorseClues(2) || isNoteTaken("Intercepted code"))//noted or read
      {
        CallRoomScript(2);
      } else if(getMorseClues(0))//heard it
      {
        player.Say("I should have taken note of it");
      }
    } else
    {
      if(getMorseClues(2) || isNoteTaken("Intercepted code"))//noted of read
      {
        if(getMorseClues(3))
        {
          player.Say("I noticed a morse code poster at the telegram office");
          player.Say("I reckon I can use it to translate the code");
        } else 
        {
          player.Say("The message is in morse");
          player.Say("I cannot read morse without some kind of translation key");
        }
      } else if(getMorseClues(0))//heard it
      {
        player.Say("I should have taken note of it");
      } else
      {
        player.Say("I am not sure what to do");
      }
    }
  } else if (cmd.IndexOf("look ") != -1 && cmd.IndexOf(" room") != -1)                                                  // LOOK ROOM                                                    
  {
    returnToNormalParsing = false;
    player.Say(Room.GetTextProperty("TextDescription"));
  } else if ((cmd.StartsWith("Put") || cmd.StartsWith("File") || cmd.StartsWith("Use") || cmd.StartsWith("Transfer") || cmd.StartsWith("Insert") || cmd.StartsWith("Move")) &&                                 //MOVE PHOTOS TO DOSSIER
             (cmd.IndexOf("Carfax") != -1 || cmd.IndexOf("Photo") != -1 || cmd.IndexOf("Picture") != -1) &&
             (cmd.IndexOf("Sale") != -1 || cmd.IndexOf("Dossier") != -1 || cmd.IndexOf("Contract") != -1))              // PUT CARFAX PHOTOS IN DOSSIER
  {
    returnToNormalParsing = false;
    if(player.HasInventory(iSalesDossier))
    {
      if(cmd.IndexOf("Photos") != -1 || cmd.IndexOf("Pictures") != -1)
      {
        if(playerHasHowManyCarfaxPictureByState(false) == 4 && playerHasHowManySubitems(iPhotos) == 4)//player ONLY has the right Carfax photos
        {
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Dining", true);
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Living", true);
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Kitchen", true);
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Bedroom", true);
          player.Say("I put the four pictures in the sales dossier");
        } else
        {
          player.Say("Not all my photos belong in the sale dossier");
          player.Say("I should insert them individually");
        }
      } else if(cmd.IndexOf("Dining") != -1)
      {
        if(playerHasSubitem("Carfax's Dining", iPhotos))
        {
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Dining", true);
          player.Say("I put the dining room picture in the sales dossier");
        } else
        {
          player.Say("I do not have a picture of the dining room");
        }
      } else if(cmd.IndexOf("Living") != -1)
      {
        if(playerHasSubitem("Carfax's Living", iPhotos))
        {
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Living", true);
          player.Say("I put the living room picture in the sales dossier");
        } else
        {
          player.Say("I do not have a picture of the living room");
        }
      } else if(cmd.IndexOf("Kitchen") != -1)
      {
        if(playerHasSubitem("Carfax's Kitchen", iPhotos))
        {
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Kitchen", true);
          player.Say("I put the kitchen picture in the sales dossier");
        } else
        {
          player.Say("I do not have a picture of the kitchen");
        }
      } else if(cmd.IndexOf("Bedroom") != -1)
      {
        if(playerHasSubitem("Carfax's Bedroom", iPhotos))
        {
          transfertSubitemFromOneParentToAnother(iPhotos, iSalesDossier, "Carfax's Bedroom", true);
          player.Say("I put the bedroom picture in the sales dossier");
        } else
        {
          player.Say("I do not have a picture of the bedroom");
        }
      } else
      {
        player.Say("I do not think this goes in the sales dossier");
      }
    } else
    {
      player.Say("I am not sure what to do");
    }
  }
  return returnToNormalParsing;
}

function debugTeleport(String cmd)
{                                                                                                                      //DEBUG
  if(cmd.IndexOf("Purfleet") != -1){                                          //GO TO PURFLEET
    player.ChangeRoom(6, 116, 187);
    setCurrentZone(Purfleet);
    player.AddInventory(iNotebook);
    player.AddInventory(iCamera);
    player.AddInventory(iRazor);
    btnNoteBook.Visible = true;
    proposedSeller = "Gladstone";
  } else if (cmd.IndexOf("LS") != -1)                                         //GO TO LAW SOCIETY
  {
    player.ChangeRoom(10, arrival_x[10], arrival_y[10], eDirectionUp);
    setCurrentZone(LawSocietyOffices);
    addTravelDestination(LondonHotel);
    addTravelDestination(LawSocietyOffices);
    addTravelDestination(TelegramOffice);
    player.AddInventory(iNotebook);
    player.AddInventory(iPenInk);
    player.AddInventory(iCamera);
    addSubitem(iFilm, "Carfax's Kitchen", "Picture of the Kitchen", "From Carfax");
    addSubitem(iFilm, "Carfax's Living", "Picture of the Living", "From Carfax");
    addSubitem(iFilm, "Carfax's Dining", "Picture of the Dining Room", "From Carfax");
    addSubitem(iFilm, "Carfax's Bedroom", "Picture of the Bedroom", "From Carfax");
    playerHasAllCarfaxPictures();
    dLawSocietyReceptionist.SetOptionState(9, eOptionOn);
    dPhotoPro.SetOptionState(7, eOptionOn);
    btnNoteBook.Visible = true;
    proposedSeller = "Gladstone";
    createCarfaxSeller();
  } else if (cmd.IndexOf("Waterloo") != -1)                                     //GO TO WATERLOO
  {
    player.ChangeRoom(5, arrival_x[5], arrival_y[5]);
    setCurrentZone(LondonTrainStation);
    addTravelDestination(LondonHotel);
      
    player.AddInventory(iNotebook);
    player.AddInventory(iRazor);
    player.AddInventory(iCamera);
    player.AddInventory(iPenInk);
    setTelegramInclusionByIndex("Mina", 2, true);//tell her of departure over telegram
    btnNoteBook.Visible = true;
    proposedSeller = "Gladstone";
    if(cmd.IndexOf("end") != -1)
    {
      player.AddInventory(iExam);
      addSubitem(iSalesDossier,"Property survey","A fairly recent survey of the land dimensions an borders","This survey was updated less than 3 years ago");
      addSubitem(iSalesDossier,"Property deed","The official title of ownership of the land","It was acquired 167 years ago");
      addSubitem(iSalesDossier,"Tenants and Leases","An old list of people who rented to property","I was rented than 200 years ago");
      addSubitem(iSalesDossier,"Labour book","A list of the prior owner's employees, who were hired to maintain the house","");
      addSubitem(iSalesDossier,"Signatures","The signature page, to sign by the assigned solicitor representative and by the client.","I should sign this page as the solicitor representative");
      addSubitem(iSalesDossier,"Sales and advertisement","A collection of flyer advertising the sale of the house by the prior owners","");
      addSubitem(iSalesDossier,"Conditions","A form for me to fill about the conditions of the sale","Those concern the actual sale (biddings, payment of a deposit and signing of a contract), the quantum of interest sold, the title of property, the completion of the purchase, misdescription of particulars, forfeiture of the deposit and resale of the property");
      addSubitem(iSalesDossier,"Title page","The introductory page of the dossier","");
      addSubitem(iPhotos, "Carfax's Kitchen",  "", "");
      addSubitem(iPhotos, "Carfax's Dining",  "", "");
      addSubitem(iPhotos, "Carfax's Living",  "", "");
      addSubitem(iPhotos, "Carfax's Bedroom",  "", "");
    }
  } else if (cmd.IndexOf("carfaxPics") != -1)                                         //GET 4 PICTURES
  {
    player.AddInventory(iCamera);
    addSubitem(iFilm, "Carfax's Kitchen", "Picture of the Kitchen", "From Carfax");
    addSubitem(iFilm, "Carfax's Living", "Picture of the Living", "From Carfax");
    addSubitem(iFilm, "Carfax's Dining", "Picture of the Dining Room", "From Carfax");
    addSubitem(iFilm, "Carfax's Bedroom", "Picture of the Bedroom", "From Carfax");
    playerHasAllCarfaxPictures();
    dLawSocietyReceptionist.SetOptionState(9, eOptionOn);
    dPhotoPro.SetOptionState(7, eOptionOn);
  } else if (cmd.IndexOf("photos") != -1)                                         //GO TO PHOTOS
  {
    player.ChangeRoom(10, arrival_x[10], arrival_y[10], eDirectionUp);
    setCurrentZone(LawSocietyOffices);
    addTravelDestination(LondonHotel);
    player.AddInventory(iNotebook);
    player.AddInventory(iCamera);
    player.AddInventory(iPenInk);
    btnNoteBook.Visible = true;
    proposedSeller = "Gladstone";
    addSubitem(iFilm, "Carfax's Kitchen",  "", "");
    addSubitem(iFilm, "Carfax's Dining",  "", "");
    addSubitem(iFilm, "Carfax's Living",  "", "");
    addSubitem(iFilm, "Carfax's Bedroom",  "", "");
    playerHasAllCarfaxPictures();
    addTravelDestination(LawSocietyOffices);
  } else if (cmd.IndexOf("BritishM") != -1)                                       //GO TO BRITISH MUSEUM
  {
    player.ChangeRoom(9, arrival_x[9], arrival_y[9]);
    setCurrentZone(BritishMuseum);
    addTravelDestination(BritishMuseum);
    addTravelDestination(LondonTrainStation);
    addTravelDestination(LondonHotel);
    player.AddInventory(iNotebook);
    player.AddInventory(iCamera);
    player.AddInventory(iPenInk);
    player.AddInventory(iProcedures);
    player.AddInventory(iBritishMuseumTicket);
    player.AddInventory(iExam);
    addSubitem(iSalesDossier,"Property survey","A fairly recent survey of the land dimensions an borders","This survey was updated less than 3 years ago");
    addSubitem(iSalesDossier,"Property deed","The official title of ownership of the land","It was acquired 167 years ago");
    addSubitem(iSalesDossier,"Tenants and Leases","An old list of people who rented to property","I was rented than 200 years ago");
    addSubitem(iSalesDossier,"Labour book","A list of the prior owner's employees, who were hired to maintain the house","");
    addSubitem(iSalesDossier,"Signatures","The signature page, to sign by the assigned solicitor representative and by the client.","I should sign this page as the solicitor representative");
    addSubitem(iSalesDossier,"Sales and advertisement","A collection of flyer advertising the sale of the house by the prior owners","");
    addSubitem(iSalesDossier,"Conditions","A form for me to fill about the conditions of the sale","Those concern the actual sale (biddings, payment of a deposit and signing of a contract), the quantum of interest sold, the title of property, the completion of the purchase, misdescription of particulars, forfeiture of the deposit and resale of the property");
    addSubitem(iSalesDossier,"Title page","The introductory page of the dossier","");
    addSubitem(iPhotos, "Carfax's Kitchen",  "", "");
    addSubitem(iPhotos, "Carfax's Dining",  "", "");
    addSubitem(iPhotos, "Carfax's Living",  "", "");
    addSubitem(iPhotos, "Carfax's Bedroom",  "", "");
    playerHasAllCarfaxPictures();
    seenDraculaLetter = true;
    btnNoteBook.Visible = true;
    createCarfaxSeller();
    proposedSeller = "Gladstone";
  } else if (cmd.IndexOf("endGame") != -1)                                       //GO TO WATERLOO AT END OF GAME
  {
    player.ChangeRoom(5, arrival_x[5], arrival_y[5]);
    setCurrentZone(LondonTrainStation);
    addTravelDestination(BritishMuseum);
    addTravelDestination(LondonTrainStation);
    addTravelDestination(LondonHotel);
    player.AddInventory(iNotebook);
    player.AddInventory(iCamera);
    player.AddInventory(iPenInk);
    player.AddInventory(iProcedures);
    player.AddInventory(iDiploma);
    addSubitem(iSalesDossier,"Title page","The introductory page of the dossier","");
    addSubitem(iSalesDossier,"Conditions","A form for me to fill about the conditions of the sale","Those concern the actual sale (biddings, payment of a deposit and signing of a contract), the quantum of interest sold, the title of property, the completion of the purchase, misdescription of particulars, forfeiture of the deposit and resale of the property");
    addSubitem(iSalesDossier,"Property deed","The official title of ownership of the land","It was acquired 167 years ago");
    addSubitem(iSalesDossier, "Carfax's Bedroom",  "", "");
    addSubitem(iSalesDossier, "Carfax's Dining",  "", "");
    addSubitem(iSalesDossier, "Carfax's Kitchen",  "", "");
    addSubitem(iSalesDossier, "Carfax's Living",  "", "");
    addSubitem(iSalesDossier,"Property survey","A fairly recent survey of the land dimensions an borders","This survey was updated less than 3 years ago");
    addSubitem(iSalesDossier,"Sales and advertisement","A collection of flyer advertising the sale of the house by the prior owners","");
    addSubitem(iSalesDossier,"Tenants and Leases","An old list of people who rented to property","I was rented than 200 years ago");
    addSubitem(iSalesDossier,"Labour book","A list of the prior owner's employees, who were hired to maintain the house","");
    addSubitem(iSalesDossier,"Signatures","The signature page, to sign by the assigned solicitor representative and by the client.","I should sign this page as the solicitor representative");
    playerHasAllCarfaxPictures();
    seenDraculaLetter = true;
    btnNoteBook.Visible = true;
    createCarfaxSeller();
    proposedSeller = "Gladstone";
  } else if (cmd.IndexOf("Telegram") != -1)//GO TO TELEGRAM SHOP
  {
    player.ChangeRoom(8, arrival_x[8], arrival_y[8]);
    setCurrentZone(TelegramOffice);
    addTravelDestination(LondonTrainStation);
    addTravelDestination(LondonHotel);
    player.AddInventory(iNotebook);
    player.AddInventory(iCamera);
    player.AddInventory(iPenInk);
    setTelegramInclusionByIndex("Hawkins", 2, true);
    setTelegramInclusionByIndex("Hawkins", 3, true);
    setTelegramInclusionByIndex("Hawkins", 4, true);
    btnNoteBook.Visible = true;
    if(isThisTimeBeforeThisTime(whatTimeIsIt(false), translateTimeToHHMMAM(9, 1, "AM")))
    {
      addTime(0, translateTimeToMinutes(translateTimeToHHMMAM(9, 1, "AM")) - translateTimeToMinutes(whatTimeIsIt(false)), 0, 0);
    }
    takeAPicture("Selfie", "This is a picture of myself", 0);
    proposedSeller = "Gladstone";
  } else if(cmd.IndexOf("skipToDracula") != -1)
  {
    if(player.Room != 2)
    {
      debugDisplay("This only works in room 2 (Hawkins' Office)");
    } else
    {
      createHawkinsPropertyFile("Gladstone", "London", "East", 999);
      CallRoomScript(5);
    }                
  } else if (cmd.IndexOf("packyourthings") != -1)
  {
    CurrentStoryBeat = packYourThings;
    debugDisplay("Story beat set to packYourThings");
  } else if (cmd.IndexOf("getnotebook") != -1)
  {
    player.AddInventory(iNotebook);
    btnNoteBook.Visible = true;
    notableSay(player, "Long string", "DEBUT This is a very long string of text, This is a very long string of text. This is a very long string of text, This is a very long string of text. This is a very long string of text, This is a very long string of text. This is a very long string of text, This is a very long string of text. This is a very long string of text, This is a very long string of text. This is a very long string of text, This is a very long string of text. FIN boo", 0); 
  }              
  for(int i = 0 ; i < Game.InventoryItemCount ; i++)
  {
    if(cmd.IndexOf(inventory[i].Name) != -1 && !player.HasInventory(inventory[i]))
    {
      player.AddInventory(inventory[i]);
    } 
  } 
  if(cmd.IndexOf("HawkinsKit") != -1) 
  {
    player.AddInventory(iLegalPapers);
    player.AddInventory(iNotebook);
    player.ChangeRoom(2);
  }
}

CharacterDirection getDirection(this Character*)
{
  switch(this.Loop)
  {
    case 0:
      return eDirectionDown;
      break;
    case 1:
      return eDirectionLeft;
      break;
    case 2:
      return eDirectionRight;
      break;
    case 3:
      return eDirectionUp;
      break;
    default:
      debugDisplay(String.Format("We do not use loop #%d", this.Loop));
      break;      
  }
}

function playerTalkToClosestCharacter()
{
  int closestCharacter = -1;
  float closestDistance = -1.0;
  float maxTalkDistance;
  float currentDistance;
  int i;
  
  for(i = 0 ; i < Game.CharacterCount ; i++)
  {
    if(character[i] != player && character[i] != cHarkersBeard && character[i].Room == player.Room && character[i].Transparency < 100 && character[i].GetProperty("dialogMaxDistance") != -1)
    {
      maxTalkDistance = IntToFloat(character[i].GetProperty("dialogMaxDistance"));
      if(isCharacterNearCharacter(character[i], maxTalkDistance, player))
      {
        currentDistance = calculateDistanceFromCharacter(character[i].x, character[i].y, player);
        if(closestDistance == -1.0 || currentDistance < closestDistance)
        {
          closestDistance = currentDistance;
          closestCharacter = i;
        }
      }
    }
  }
  
  if(closestCharacter == -1)
  {
    for(i = 0 ; i < Game.CharacterCount ; i++)
    {
      if(character[i] != player && character[i] != cHarkersBeard && character[i].Room == player.Room && character[i].Transparency < 100 && character[i].GetProperty("dialogMaxDistance") != -1)
      {
        currentDistance = calculateDistanceFromCharacter(character[i].x, character[i].y, player);
        if(closestDistance == -1.0 || currentDistance < closestDistance)
        {
          closestDistance = currentDistance;
          closestCharacter = i;
        }
      }
    }
    if(closestCharacter != -1)
    {
      player.FaceCharacter(character[closestCharacter], eBlock);
      player.Say("I am too far from them");
    } else
    {
      player.Say("I do not know whom to talk to");
    }
  } else 
  {
    tbParser.Text = String.Format("Talk %s", character[closestCharacter].Name);
    CallRoomScript(1);
  }
}

String[] roomSpecificParse(String cmd) // function that is called by the room to handle the parsing of the command
{
  String elementName;
  String indexElement[] = new String[2];
  String indexElementVerbHandled[] = new String[4];
  
  indexElementVerbHandled[0] = "Null";
  indexElementVerbHandled[1] = "Null";
  indexElementVerbHandled[2] = "Skip";
  indexElementVerbHandled[3] = "true";
  
  if(globalHighjackCMD(cmd))
  {
    if(cmd.StartsWith("debug"))
    {
      if(debugTools)
      {
        debugTeleport(cmd);
      } else
      {
        CharacterDirection currentDirection = player.getDirection();
        player.Say("Debug?");
        player.FaceDirection(eDirectionDown);
        Wait(30);
        player.Say("Are you trying to cheat, mate?");
        player.Say("Not cool");
        player.FaceDirection(currentDirection);
      }
    } else
    {
      if(cmd.IndexOf("spot ") != -1) {                                                                                          // SPOT KEYWORD
        cmd = cmd.Replace("spot ", "", eCaseInsensitive);
        cmd = cmd.Replace("all ", "", eCaseInsensitive);
        cmd = cmd.Replace("any ", "", eCaseInsensitive);
        findElementContaining(cmd);
      } else if(cmd.LowerCase() == "stand" || cmd.IndexOf("stand ") != -1) {                                                    // STAND KEYWORD
        standUp(player, 1);
      } else if(cmd.LowerCase() == "sit" || cmd.LowerCase() == "sit ") {                                                        // SIT KEYWORD (by itself)
        playerSitsInClosestChair(true, -1.0);
      } else if(cmd.LowerCase() == "talk" || cmd.LowerCase() == "talk ") {                                                      // TALK KEYWORD (by itself)
        playerTalkToClosestCharacter();
      } else if(cmdStartsWithUSEsynonym(cmd) != "Null") {                                                                       // USE KEYWORDS
        useInteraction(cmd);
      } else if(cmd.StartsWith("wait", eCaseInsensitive)) {                                                                     // WAIT KEYWORDS
        show_wait_GUI("wait");    
      }  else if (cmd.StartsWith("Note ", eCaseInsensitive) || cmd.LowerCase() == "note" || cmd.LowerCase() == "take note") {   // NOTE KEYWORD
        takeNote();
      } else if (cmd.IndexOf("What time is it") != -1)                                                                          // WHAT TIME IS IT?
      {
        if(player.HasInventory(iWatch))
        {
          player.Think(String.Format("It is %s", whatTimeIsIt(true)));
        } else {
          player.Think("I do not have my watch. . . I do not know what time it is. . .");
        }
      } else if (cmd.StartsWith("Eat") || cmd.StartsWith("Consume"))                                                            // EAT KEYWORD
      {
        cmd.Replace("Eat ", "", eCaseInsensitive);
        cmd.Replace("Consume ", "", eCaseInsensitive);
        eatFood(cmd);
      } else if (cmd.StartsWith("Sign "))                                                                                       // SIGN KEYWORD
      { 
        signDocument(cmd);
      } else
      {
        indexElement = findElementIndexByName(cmd);
        indexElementVerbHandled[0] = indexElement[0];
        indexElementVerbHandled[1] = indexElement[1];
        if(indexElement[1] != "Null") {
          indexElementVerbHandled[2] = findVerbInDictionary(cmd);
        } else {
          indexElementVerbHandled[2] = "Null";
        }
      }
    }
  }
  
  if(globalHighjackIndexElementVerb(indexElementVerbHandled[0], indexElementVerbHandled[1], indexElementVerbHandled[2]))
  {
    indexElementVerbHandled[2] = "Skip";
  }
  
  return indexElementVerbHandled;
}

function btnCloseLedger_OnClick(GUIControl *control, MouseButton button)
{
  close_gui(gBook);
}

function btnCloseExam_OnClick(GUIControl *control, MouseButton button)
{
  exam_SubmittedAnswers.Set(lblExam_question.Text, tbExam_Answer.Text);
  if(areAllExamQuestionsAnswered())
  {
    dLawSocietyReceptionist.SetOptionState(13, eOptionOn);
  }
  close_gui(gExam);
}

function btnExam_prev_OnClick(GUIControl *control, MouseButton button)
{
  modifyExamQuestion(false);
}

function btnExam_next_OnClick(GUIControl *control, MouseButton button)
{
  modifyExamQuestion(true);
}

function btnCredits_OnClick(GUIControl *control, MouseButton button)
{
  show_book_gui("GAME CREDITS");
}

function BtnMultClickSpeed_OnClick(GUIControl *control, MouseButton button)
{
  if(BtnMultClickSpeed.Text == "3-Click Blink")
  {
    BtnMultClickSpeed.Text = "2-Click Run";
  } else
  {
    BtnMultClickSpeed.Text = "3-Click Blink";
  }
}

function btnSubitemDescription_prev_OnClick(GUIControl *control, MouseButton button)
{
  changeSubitemDescriptionPage(true, lbSubtiems, lblSubitem_titles, lblSubitemDescription, lblSubitem_pageNb, btnSubitemDescription_prev, btnSubitemDescription_next);
}

function btnSubitemDescription_next_OnClick(GUIControl *control, MouseButton button)
{
  changeSubitemDescriptionPage(false, lbSubtiems, lblSubitem_titles, lblSubitemDescription, lblSubitem_pageNb, btnSubitemDescription_prev, btnSubitemDescription_next);
}

function tbMorseTranslation_OnActivate(GUIControl *control)
{
  
}

function btnMorseCancel_OnClick(GUIControl *control, MouseButton button)
{
  close_gui(gMorseTranslation);
  player.Say("I'll come back to this later");
  modifyNote("Intercepted code", lblCodedMessage.Text);
}

function btnMorseSubmit_OnClick(GUIControl *control, MouseButton button)
{
  close_gui(gMorseTranslation);
  player.Say("'Deliver directly to R. Parton. Yes, I will marry you. Love. Agnes'");
  player.Say("Oh my. What did I step into");
  player.AddInventory(iInterceptedtelegram);
  modifyNote("Intercepted code", lblCodedMessage.Text);
}


function iExam_Interact()
{
  show_exam_gui();
}

function btnProcedures_OnClick(GUIControl *control, MouseButton button)
{
  show_book_gui("Procedures");
}

function btnExamProcedures_OnClick(GUIControl *control, MouseButton button)
{
   show_book_gui("Procedures");
}

function btnQuickWait_OnClick(GUIControl *control, MouseButton button)
{
  show_wait_GUI("Wait");
}

function btnExam_Notebook_OnClick(GUIControl *control, MouseButton button)
{
  open_gui(gNotebook);
}

function fillMyHintListAlphabetically(ListBox* thisLB, Dictionary* thisDict, String listChangeOptionName, bool KeysOrValues)
{
  Dictionary* thisList = Dictionary.Create(eSorted);
  String stringList[];
  if(KeysOrValues)
  {
    stringList = thisDict.GetKeysAsArray();
  } else
  {
    stringList = thisDict.GetValuesAsArray();
  }
  
  int i;
  
  for(i = 0 ; i < thisDict.ItemCount ; i++)
  {
    if(stringList[i].IndexOf("*") != -1)
    {
      stringList[i] = stringList[i].Replace("*", "", eCaseInsensitive);
    }
    thisList.Set(String.Format("%09d", i), stringList[i]);
  }
  
  if(listChangeOptionName != "")
  {
    thisList.Set(String.Format("%09d", i), listChangeOptionName);
  }  
  
  stringList = thisList.GetValuesAsArray();
  thisLB.Clear();
  
  for(i = 0 ; i < thisList.ItemCount ; i++)
  {
    thisLB.AddItem(stringList[i]);
  }  
}

function fillParserVerbList()
{
  if(!lbParserVerbList.Visible)
  {
    fillMyHintListAlphabetically(lbParserVerbList, verbDescriptionDictionary, "", true);
    lbParserVerbList.Visible = true;
  } else
  {
    lbParserVerbList.Visible = false;
  }
  btnLBBG_verbs.Visible = lbParserVerbList.Visible;
}

Dictionary* getRoomObjectDictionary()
{
  Dictionary* returnDict = Dictionary.Create(eSorted);
  String dictKeys[] = interactableObjectsPerRoom[player.Room].GetKeysAsArray();
  int i;
  for(i = 0 ; i < interactableObjectsPerRoom[player.Room].ItemCount ; i++)
  {
    if(interactableObjectsPerRoom[player.Room].Get(dictKeys[i]) == "true")
    {
      returnDict.Set(dictKeys[i], "Found");
    }
  }
  return returnDict;
}

Dictionary* getInventoryItemList()
{
  Dictionary* returnDict = Dictionary.Create(eSorted);
  int i;
  int index = 0;
  for(i = 0 ; i < Game.InventoryItemCount ; i++)
  {
    if(player.HasInventory(inventory[i]))
    {
      returnDict.Set(String.Format("%09d", index),  inventory[i].Name.LowerCase());
      index++;
    }
  }
  return returnDict;
}

Dictionary* getSubItemList(String thisParentItemName)
{
  Dictionary* returnDict = Dictionary.Create(eSorted);
  InventoryItem* thisParentInvItem = inventory[findInvItemIndexByName(thisParentItemName)];
  Dictionary* keySet = getDictionariesForParentItems(thisParentInvItem, subitemDescription);
  
  String subitemNameArray[];
  subitemNameArray = keySet.GetKeysAsArray();
  
  int i;
  int index = 1;
  
  returnDict.Set(String.Format("%09d", 0), thisParentItemName);
  
  for(i = 0 ; i < keySet.ItemCount ; i++)
  {
    if(playerHasSubitem(subitemNameArray[i], thisParentInvItem))
    {
      returnDict.Set(String.Format("%09d", index), subitemNameArray[i].LowerCase());
      index++;
    }
  }
  return returnDict;
}

function fillParserObjectList(ListBox* thisLB, Button* thisTriggerBtn, Button* thisLBBG)
{
  if(!thisLB.Visible)
  {
    Dictionary* invDict = getInventoryItemList();
    Dictionary* objDict = getRoomObjectDictionary();
    String altMessage = "";
    if(thisTriggerBtn.Text == "Objects")
    {
      if(invDict.ItemCount > 0)
      {
        altMessage = "> INVENTORY";
      }
      fillMyHintListAlphabetically(thisLB, objDict, altMessage, true);
    } else
    {
      if(objDict.ItemCount > 0)
      {
        altMessage = "> OBJECTS";
      }
      fillMyHintListAlphabetically(thisLB, invDict, altMessage, false);
    }
    thisLB.Visible = true;
  } else
  {
    thisLB.Visible = false;
  }
  thisLBBG.Visible = thisLB.Visible;
}

function fillSubitemList()
{
  fillMyHintListAlphabetically(lbParserUseOnList, getRoomObjectDictionary(), "< BACK", true);
  lbParserUseOnList.Visible = true;
}

function btnParserInsertVerb_OnClick(GUIControl *control, MouseButton button)
{
  fillParserVerbList();
}

function btnParserInsertObject_OnClick(GUIControl *control, MouseButton button)
{
  fillParserObjectList(lbParserObjectList, btnParserInsertObject, btnLBBG_objects);
}

function evaluateUseOnVisibility()
{
  if(lastInsertedVerb == "use" && isLastInsertedObjectAnInvItem)
  {
    btnParseUseOn.Visible = true;
  } else
  {
    String currentCMD = tbParser.Text;
    if(currentCMD.EndsWith(lastInsertedUseOnName) && lastInsertedUseOnName != "")
    {
      tbParser.Text = currentCMD.Truncate(currentCMD.IndexOf(lastInsertedUseOnName) - 1);
      lastInsertedUseOnName = "";
    }    
    btnParseUseOn.Visible = false;
    lbParserUseOnList.Visible = false;
    btnLBBG_useOn.Visible = false;
  }
}

function lbParserVerbList_OnSelectionChanged(GUIControl *control)
{
  String currentCMDV = tbParser.Text;
  String space = " ";
  if(currentCMDV.StartsWith(lastInsertedVerb))
  {
    currentCMDV = currentCMDV.Substring(lastInsertedVerb.Length, currentCMDV.Length);
  }
  lastInsertedVerb = lbParserVerbList.Items[lbParserVerbList.SelectedIndex];
  if(!currentCMDV.StartsWith(" "))
  {
    currentCMDV = space.Append(currentCMDV);
  }
  currentCMDV = lastInsertedVerb.Append(currentCMDV);
  tbParser.Text = currentCMDV;
  evaluateUseOnVisibility();
}

function writeTheObjectInParserCMD()
{
  String currentCMD = tbParser.Text;
  bool isThereAUseOnObject = false;
  
  if(lastInsertedUseOnName != "" && currentCMD.EndsWith(lastInsertedUseOnName))                               //use on active
  {
    isThereAUseOnObject = true;
    int startChar;
    int startUseOn = currentCMD.IndexOf(lastInsertedUseOnName);
    String replaceMe = "";
    for(startChar = currentCMD.IndexOf(lastInsertedObjectName) ; startChar < startUseOn - 1 ; startChar++)
    {
      currentCMD = currentCMD.ReplaceCharAt(startChar, '#');
      replaceMe = replaceMe.Append("#");
    }
    
    lastInsertedObjectName = lbParserObjectList.Items[lbParserObjectList.SelectedIndex];
    currentCMD = currentCMD.Replace(replaceMe, lastInsertedObjectName);
  } else if(lastInsertedObjectName != "" && currentCMD.EndsWith(lastInsertedObjectName))                    //object inserted
  {
    currentCMD = currentCMD.Truncate(currentCMD.IndexOf(lastInsertedObjectName));
    lastInsertedUseOnName = "";
    lastInsertedObjectName = lbParserObjectList.Items[lbParserObjectList.SelectedIndex];
  
    if(!currentCMD.EndsWith(" "))
    {
      currentCMD = currentCMD.Append(" ");
    }
    
    currentCMD = currentCMD.Append(lastInsertedObjectName);
  } else                                                                                                    //nothing
  {
    lastInsertedObjectName = lbParserObjectList.Items[lbParserObjectList.SelectedIndex];
  
    if(!currentCMD.EndsWith(" "))
    {
      currentCMD = currentCMD.Append(" ");
    }
    
    currentCMD = currentCMD.Append(lastInsertedObjectName);
  }
  
  if(btnParserInsertObject.Text == "Objects")
  {
    isLastInsertedObjectAnInvItem = false;
    if(isThereAUseOnObject)
    {
      currentCMD.Truncate(currentCMD.Length - lastInsertedUseOnName.Length);
    }
  } else
  {
    isLastInsertedObjectAnInvItem = true;
  }
  
  if(currentCMD.EndsWith(" "))
  {
    debugDisplay(currentCMD);
    currentCMD = currentCMD.Truncate(currentCMD.Length - 2);
    debugDisplay(currentCMD);
  }
  
  tbParser.Text = currentCMD;
  evaluateUseOnVisibility();
}

function writeTheUseOnObjectInParserCMD()
{
  String currentCMD = tbParser.Text;
  
  if(currentCMD.EndsWith(lastInsertedUseOnName))
  {
    currentCMD = currentCMD.Truncate(currentCMD.Length - lastInsertedUseOnName.Length);
  }
  
  lastInsertedUseOnName = String.Format("on %s", lbParserUseOnList.Items[lbParserUseOnList.SelectedIndex]);
  
  if(!currentCMD.EndsWith(" "))
  {
    currentCMD = currentCMD.Append(" ");
  }
  
  currentCMD = currentCMD.Append(lastInsertedUseOnName);
  tbParser.Text = currentCMD;
}

function lbParserObjectList_OnSelectionChanged(GUIControl *control)
{
  String cmd = tbParser.Text;
  String selItemName = lbParserObjectList.Items[lbParserObjectList.SelectedIndex];
  
  if(selItemName == "> INVENTORY" || selItemName == "< BACK")
  {
    Dictionary* objDict = getRoomObjectDictionary();
    String roomObjectsMessage = "";
    if(objDict.ItemCount > 0)
    {
      roomObjectsMessage = "> OBJECTS";
    }
    fillMyHintListAlphabetically(lbParserObjectList, getInventoryItemList(), roomObjectsMessage, false);
    btnParserInsertObject.Text = "Inventory";
  } else if(selItemName == "> OBJECTS")
  {
    Dictionary* invDict = getInventoryItemList();
    String invMessage = "";
    if(invDict.ItemCount > 0)
    {
      invMessage = "> INVENTORY";
    }
    fillMyHintListAlphabetically(lbParserObjectList, getRoomObjectDictionary(), invMessage, true);
    btnParserInsertObject.Text = "Objects";
  } else
  {
    if(btnParserInsertObject.Text == "Inventory")
    {
      InventoryItem* thisItem = inventory[findInvItemIndexByName(selItemName)];
      if(thisItem.GetTextProperty("InvContext") != "Null")
      {
        String invMessage = "< BACK";
        fillMyHintListAlphabetically(lbParserObjectList, getSubItemList(selItemName), invMessage, false);
        btnParserInsertObject.Text = selItemName;
      } else
      {
        writeTheObjectInParserCMD();
      }
    } else
    {
      writeTheObjectInParserCMD();
    }
  }
}

function btnParseUseOn_OnClick(GUIControl *control, MouseButton button)
{
  fillParserObjectList(lbParserUseOnList, btnParseUseOn, btnLBBG_useOn);
}

function addToVerbDictionary(String verb)
{
  switch(verb)
  {
    case "photograph":
      verbDictionary.Set("photograph", "photograph");
      verbDictionary.Set("take picture", "photograph");
      verbDictionary.Set("take a picture", "photograph");
      verbDictionary.Set("take photo", "photograph");
      verbDictionary.Set("take a photo", "photograph");
      verbDescriptionDictionary.Set("photograph", "Take the picture of something.[Only usable when you have a camera.[[EXAMPLE: Photograph kitchen");
      break;
    case "note":
      verbDictionary.Set("note", "note");
      verbDescriptionDictionary.Set("note", "Have Jonathan write down his notable information.[Only works when Jonathan has a notebook[[EXAMPLE: Note");
      break;
    default: 
      debugDisplay(String.Format("%s is not a managed verb for the verb dictionary", verb));
      break;
  }
}

function lbParserUseOnList_OnSelectionChanged(GUIControl *control)
{
  String cmd = tbParser.Text;
  String selItemName = lbParserUseOnList.Items[lbParserUseOnList.SelectedIndex];
  
  if(selItemName == "> INVENTORY" || selItemName == "< BACK")
  {
    Dictionary* objDict = getRoomObjectDictionary();
    String roomObjectsMessage = "";
    if(objDict.ItemCount > 0)
    {
      roomObjectsMessage = "> OBJECTS";
    }
    fillMyHintListAlphabetically(lbParserUseOnList, getInventoryItemList(), roomObjectsMessage, false);
    btnParseUseOn.Text = "Inventory";
  } else if(selItemName == "> OBJECTS")
  {
    Dictionary* invDict = getInventoryItemList();
    String invMessage = "";
    if(invDict.ItemCount > 0)
    {
      invMessage = "> INVENTORY";
    }
    fillMyHintListAlphabetically(lbParserUseOnList, getRoomObjectDictionary(), invMessage, true);
    btnParseUseOn.Text = "Objects";
  } else
  {
    if(btnParseUseOn.Text == "Inventory")
    {
      InventoryItem* thisItem = inventory[findInvItemIndexByName(selItemName)];
      if(thisItem.GetTextProperty("InvContext") != "Null")
      {
        String invMessage = "< BACK";
        fillMyHintListAlphabetically(lbParserUseOnList, getSubItemList(selItemName), invMessage, false);
        btnParseUseOn.Text = selItemName;
      } else
      {
        writeTheUseOnObjectInParserCMD();
      }
    } else
    {
      writeTheUseOnObjectInParserCMD();
    }
  }
}
