// TO DO ! 
// Add a place to shave ! (A Visible = false mirror + a hotspot named hShavingArea)

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if((cmd.IndexOf("meal") != -1 || cmd.IndexOf("food") != -1 || cmd.IndexOf("repas") != -1 || cmd.IndexOf("service") != -1 || cmd.IndexOf("nourriture")) 
      && (cmd.IndexOf("eat") != -1 || cmd.IndexOf("consume") != -1)
      && (oMeal.Visible))
  {
    if(!isPlayerHungry())
    {
      player.Say("I am actually not that hungry. . .");
      player.Say("I'll just send this back");
      FadeOut(4);
      oMeal.Visible = false;
      oMeal.Clickable = false;
      FadeIn(4);
    } else
    {
      if(player.getSeatIndex() != 13)
      {
        player.Say("I should sit down first");
      } else
      {
        dConcierge.SetOptionState(3, eOptionOn);
        FadeOut(4);
        oMeal.Visible = false;
        oMeal.Clickable = false;
        hasEaten();
        FadeIn(4);
        player.Say("Delicious");
      }      
    }
    sendBackToNormalParsing = false;  
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //do nothing
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}

function region1_WalksOnto()
{
  dHotelRoom.Start();
}

function room_AfterFadeIn()
{
  musicInRoom(aDeambulation, 1);
}

function room_Load()
{
  if(dConcierge.GetOptionState(3) == eOptionOff)
  {
    oMeal.Visible = true;
    oMeal.Clickable = true;
  } else
  {
    oMeal.Visible = false;
    oMeal.Clickable = false;
  }
  
  if(!player.HasInventory(iTrunk) && iTrunk.GetTextProperty("TextDescription") == "My trunk. The clothes have been shuffled badly in the train ride to London")
  {
    oTrunk.Visible = true;
    oTrunk.Clickable = true;
  } else
  {
    oTrunk.Visible = false;
    oTrunk.Clickable = false;
  }
}

function room_Leave()
{
  oMeal.Visible = false;
  oMeal.Clickable = false;
  dConcierge.SetOptionState(3, eOptionOn);    
}

function oBed_Interact()
{
  if(!isPlayerDrowsy())
  {
    player.Say("I don't need to sleep yet");
  } else
  {
    player.Walk(188, 130, eBlock, eWalkableAreas);
    show_wait_GUI("sleep");
  }
}
