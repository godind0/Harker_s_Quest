// room script file
int nbOfPropertiesBeforeDracula = 2;
String currentRequester;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  Set* sellerList;
  int nbNegatives = getNbNegative();
  String nbNegativesMsg = "I have ### negative@ left";
  sellerList = getHawkinsSellerList();
  String sellerName;
  Object* properDrawer;
  
  if(findVerbInDictionary(cmd) == "take" && cmd.IndexOf("camera") != -1 && !player.HasInventory(iCamera)) // take camera
  {
    if(getStoryBeat() < packYourThings) {
      cHawkins.Say("Don't touch the camera, it is for office use only");
      cHawkins.Say("Get back to work");      
    } else
    {
      player.Think("This will be useful");
      player.AddInventory(iCamera);
      oCamera.Visible = false;
      switch(nbNegatives)
      {
        case 0:
          nbNegativesMsg = nbNegativesMsg.Replace("###", "no", eCaseInsensitive);
          nbNegativesMsg = nbNegativesMsg.Replace("@", "s", eCaseInsensitive);
          break;
        case 1:
          nbNegativesMsg = nbNegativesMsg.Replace("###", "1", eCaseInsensitive);
          nbNegativesMsg = nbNegativesMsg.Replace("@", "", eCaseInsensitive);
          break;
        default:
          nbNegativesMsg = nbNegativesMsg.Replace("###", String.Format("%d", nbNegatives), eCaseInsensitive);
          nbNegativesMsg = nbNegativesMsg.Replace("@", "s", eCaseInsensitive);
          break;
      }
      iCamera.SetTextProperty("TextDescription", String.Format("This is the office's photo camera. State of the art technology![%s", nbNegativesMsg));
      giveScoreOnce("GetCamera", 1);
      Display("You can now take pictures of anything in your surroundings by writing the verb 'Photograph' followed by the name of your subject");
      Display("Careful to not spend all your negatives!");
      addToVerbDictionary("photograph");
    }
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 50 && verb == "take")//take camera
  {
    if(getStoryBeat() < packYourThings) {
      cHawkins.Say("Don't touch the camera, it is for office use only");
      cHawkins.Say("Get back to work");      
    } else
    {
      player.Think("This will be useful");
      object[51].Visible = false;
      player.AddInventory(iCamera);
      giveScoreOnce("GetCamera", 1);
    }
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  
}

int getConveyancingQuestNumber()
{
  int thisQuestNumber;
  switch(nbOfPropertiesBeforeDracula)
  {
    case 0: // Dracula
      thisQuestNumber = 4;
      break;
    case 1:
      thisQuestNumber = 3;
      break;
    case 2:
      thisQuestNumber = 2;
      break;
    default:
      break;
  }
  
  return thisQuestNumber;
}

function setupConveyancingSolvedQuest(String sellerName)
{
  int thisConvQNb = getConveyancingQuestNumber();
  String thisSellerName = getProposedSeller();
  int propAge = getPropertyAge(thisSellerName);
  
  addDynamicQuestTextElement(thisConvQNb, "SellerProperty age", String.Format("%d", propAge));
  addDynamicQuestTextElement(thisConvQNb, "Seller name", thisSellerName);
  
  modifyQuestNoteLineVariant(thisConvQNb, 1, 2);
}

function sittingClientAssignment(String clientName)
{
  if(clientName == "Random")
  {
    clientName = getPropertyRequesterName();    
  }  
  String requestMessage = getPropertyRequestMessage(clientName);
  
  cHawkins.Say("I have a new assignment for you");
  cRandomMan1.sit(roomObjects, 46, 40, false, 399.0);
  cHawkins.Say(String.Format("Meet Mr. %s", clientName));
  cRandomMan1.Say("How do you do?");
  player.Say(String.Format("It is a pleasure, Mr %s[I am Jonathan Harker", clientName));
  notableSay(cHawkins, String.Format("(B) %s", clientName),  requestMessage, 1, getConveyancingQuestNumber()-2);
}

function giveAssignment(String clientName)
{
  if(clientName == "Random")
  {
    clientName = getPropertyRequesterName();    
  }  
  String requestMessage = getPropertyRequestMessage(clientName);
  
  cHawkins.Say("I have a new assignment for you");
  cHawkins.Say("We have a client interested in a new property");
  cHawkins.Say(String.Format("A certain %s", clientName));
  notableSay(cHawkins, String.Format("(B) %s", clientName),  requestMessage, 1, 1);
  if(clientName != "Dracula")
  {
    cHawkins.Say("Did you get that? You should note that!");
  }
  currentRequester = clientName;
}

function aboutThatRequest()
{
  if(isItBeforeThisTime(4,0,0,true,1))//Before 4PM
  {
    if(nbOfPropertiesBeforeDracula > 1)
    {
      giveAssignment("Random");
    } else if(nbOfPropertiesBeforeDracula == 1)
    {
      sittingClientAssignment("Random");
    } else
    {
      giveAssignment("Dracula");
      oLightning.Visible = true;
      modifyCloudiness(30);
      Wait(10);
      oLightning.Visible = false;
      cHawkins.Say("The weather just took a turn it seems. . .");
      cHawkins.Say("No matter. . .");
    }
  } else {
    cHawkins.Say("That is all for today, Harker");
    cHawkins.Say("Dismissed");
    gameIsOver("Jonathan took too long to do his job and missed his date with destiny!");
  }
}

int minutesLeftForPhotos(String targetTime, int additionalDays)
{
  int nowInMinutes = translateTimeToMinutes(whatTimeIsIt(false)) + (currentDay * 24 * 60);
  int targetTimeInMinutes = translateTimeToMinutes(targetTime);
  targetTimeInMinutes = targetTimeInMinutes + (additionalDays * 24 * 60);
  
  return targetTimeInMinutes - nowInMinutes;
}

function on_call(int indexOC)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  String clientName;
  String suggestedCode;
  String requestMessage;
  
  switch(indexOC)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();  
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];             
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }  
      }
      break;
    case 2://New assignment
      cHawkins.Say(String.Format("On today's agenda, we have to match %d potential buyers with our sellers", nbOfPropertiesBeforeDracula + 1));
      aboutThatRequest();
      break;
    case 3://validate
      clientName = getProposedSeller();
      if(validatePropertyProposition(currentRequester,  clientName))
      {
        cHawkins.Say("Great suggestion!");
        giveScoreOnce(clientName, 2);
        setupConveyancingSolvedQuest(clientName);
        if(currentRequester == "Dracula")
        {
          cHawkins.Say("Purfleet is not proper London, but close enough");
          cHawkins.Say("This is remarkable work!");
          cHawkins.Say("I'll tell you what: How about you finish this file");
          cHawkins.Say("This client is an important referral from London");
          cHawkins.Say("He wants pictures of the property and a personnal visit to his estate in Transylvania");
          cHawkins.Say("My joints are killing me, so I should not travel too much");
          cHawkins.Say(String.Format("You go to London, well Purfleet, to that %s property",  clientName));
          cHawkins.Say("Take the pictures!");
          notableSay(cHawkins, "Required pictures", "We need photos of the living room, the kitchen, the dining room and the bedroom, by 4PM tomorrow", 1);
          cHawkins.Say("Bring the photo camera, it is on the table, near the ladder.");
          cHawkins.Say("Hopefully, I will be better tomorrow and can pick them up on my way to the mainland");
          cHawkins.Say("I had a reservation for tonight at the Hummums, in Covent-garden. Use it");
          cHawkins.Say("Remember: You need to be done with all of this tomorrow at 4:00PM");
          cHawkins.Say("And I want a telegram before I take the 4:15PM train");
          addTimedEventInXMinutes(minutesLeftForPhotos(translateTimeToHHMMAM(4, 15, "PM"), 1), "Max time for photos & telegram");
          dTrainTicketClerk.SetOptionState(1, eOptionOn);
          addTravelDestination(ExeterTrainStation);
          setStoryBeat(packYourThings);
          cHawkins.Say("Go pack your trunk, Harker, you're headed to London tonight!");
        } else
        {
          if(nbOfPropertiesBeforeDracula > 1)
          {
            cHawkins.Say("I'll send them the details!");
            if(getQuestLineVariant(2, 2) == 1)//Jonathan saw the next client
            {
              modifyQuestNoteLineVariant(2, 2, 0);
              cRandomMan1.ChangeRoom(24, 86, 145, eDirectionRight);
            } else {
              cRandomMan1.makeSecCharAppearance(2, -1, eDirectionRight, true);
            }
            cRandomMan1.sit(roomObjects, 7, 40, false, 399.9);
          } else if(nbOfPropertiesBeforeDracula == 1)
          {
            player.Say("We have a property I think you might like");
            player.Say(String.Format("It is in %s %s, like you asked", getPropertyRequestCity(currentRequester), getPropertyRequestSector(currentRequester)));
            player.Say("It was built in %d, hence it is %d years old, which is within your range", 1893 - getPropertyAge(getProposedSeller()), getPropertyAge(getProposedSeller()));
            cRandomMan1.Say("That sounds like a terrific place![Thank you so much, gentlemen!");
            cHawkins.Say("I'll messenger you the details");
            cRandomMan1.Say("Terrific[G'day!");
            cHawkins.Say("G'day!");
            player.Say("G'day!");
            cRandomMan1.standUp(41);
            cRandomMan1.Walk(hEntrance.WalkToX, hEntrance.WalkToY, eNoBlock, eWalkableAreas);
          }
          nbOfPropertiesBeforeDracula--;
          aboutThatRequest();
        }
      } else
      {
        cHawkins.Say("Wait, that does not work at all!");
        cHawkins.Say("Stop wasting time, Harker!");
        GiveScore(-1);
      }
      break;
    case 4://repeat
      requestMessage = getPropertyRequestMessage(currentRequester);
      cHawkins.Say(String.Format("The client's name is %s", currentRequester));
      notableSay(cHawkins, String.Format("(B) %s", currentRequester),  requestMessage, 1);
      cHawkins.Say("Note it down!");
      GiveScore(-1);
      break;
    case 5://skip trial research
      nbOfPropertiesBeforeDracula = 0;
      break;
    default:
      break;      
  }
}
function room_FirstLoad()
{
  if(getSkipCutscene())
  {
    nbOfPropertiesBeforeDracula = 0;
  }
  cHawkins.sit(roomObjects, 4, 4, true);
}

function room_RepExec()
{
  if(nbOfPropertiesBeforeDracula == 0)
  {
    if(cRandomMan1.Room == 2 && cRandomMan1.Transparency == 0)
    {
      if(!cRandomMan1.Moving)
      {
        cRandomMan1.Transparency = 100;
      }
    }
  }
}

function region1_WalksOnto()
{
  player.ChangeRoom(2, 235, 145, eDirectionLeft);
}

function region2_WalksOnto()
{
  player.ChangeRoom(23, 265, 156, eDirectionUp);
}
