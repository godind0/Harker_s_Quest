// room script file

//TO DO:
// Harker's room (Ghost?)
// >> Room service
// >> Sleep in bed
// >> Trunk
// Bath
// Discussion with concierge (checkin,  telegrams)
// Enter / Exit

bool checkedIn = false;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //do nothing
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
    case 2://check in successful
      checkedIn = true;
      break;
  }
}


function region1_WalksOnto()
{
  dHotelRoom.Start(); 
}

function region2_WalksOnto()
{
  player.ChangeRoom(19, 203, 158, eDirectionDown);
}

function room_Load()
{
  oFountain.SetView(33);
  oFountain.Animate(0, 3, eRepeat, eNoBlock, eForwards);
}

function region1_WalksOff()
{
  //do nothing
}

function region2_WalksOff()
{
  
}

function region3_WalksOff()
{
  
}

function region4_WalksOff()
{
  
}

function room_LeaveBottom()
{
  dTravel.Start();
}

function room_AfterFadeIn()
{
  musicInRoom(aDeambulation, 1);
  if(playerHasAnySubitem(iHotelPackages))
  {
    cConcierge.sayBackgroundBacklog("Mr. Harker! Welcome back");
    cConcierge.sayBackgroundBacklog("You have deliveries at reception");
    cConcierge.sayBackgroundBacklog("You can come see me when you want them");
  }
}

function oLuggageCart_UseInv()
{
  elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 5)//trunk
  {
    if(player.HasInventory(iRoomKey))
    {
      player.LoseInventory(iTrunk);
      oTrunkOnCart.Visible = true;
      player.Say("It feels good to put that heavy thing down!");
      iTrunk.SetTextProperty("TextDescription", "My trunk. The clothes have been shuffled badly in the train ride to London");
      giveScoreOnce("Put trunk down", 1);
    } else
    {
      cConcierge.Say("You need to check in with me before we can send your trunk upstairs, sir");
      player.Say("Right. Sorry");
    }
  }
}
