// room script file
bool dontReEnter;


bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //do nothing
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //do nothing
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}


function region1_WalksOnto()
{
    if(!dontReEnter) {
      player.ChangeRoom(1, 184, 146, eDirectionDown);
      player.PlaceOnWalkableArea();
    }
}

function region2_WalksOnto()
{
    if(!dontReEnter) {
      player.ChangeRoom(2, 157, 193, eDirectionUp);
      player.PlaceOnWalkableArea();
    }
}

function room_Load()
{
  dontReEnter = true;
  enterMap();
  /*int i;
  gMapIndications.Visible = true;
  for(i = 0 ; i < Room.ObjectCount ; i++)
  {
    gMapIndications.Controls[i].AsLabel.Text = object[i].Name;
    gMapIndications.Controls[i].AsLabel.Visible = true;
    gMapIndications.Controls[i].AsLabel.X = object[i].X - gMapIndications.Controls[i].AsLabel.Width;
    gMapIndications.Controls[i].AsLabel.Y = object[i].Y;
    gMapIndications.Controls[i].AsLabel.TextAlignment = eAlignRight;
  }*/
}

function region1_WalksOff()
{
  dontReEnter = false;
}

function region2_WalksOff()
{
  dontReEnter = false;
}

function region3_WalksOff()
{
  dontReEnter = false;
}

function region4_WalksOff()
{
  dontReEnter = false;
}

function room_Leave()
{
  exitMap();
}
