// room script file
//TO DO
//TO TEST: remettre la chaine sur le bulkhead devrait redonner des points (et redonner la clé)
//TO TEST: Le bulkhead ouvert,  la porte mène à la cuisine. Photo (commentaire que la cuisine est au sous-sol,  avec les quarters employes)
//TO TEST: Dining door clue

bool onPlank = false;
bool insideBulkhead = false;

function unlockCellarAndTakeChain()
{
  if(isCharacterNearObject(oCellarLock, 40.0, player))
  {
    player.Walk(80, 165, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionUp);
    player.Say("The key fits!");
    oCellarDoor.SetProperty("Close_SpriteNumber", 426);
    oCellarDoor.SetProperty("Open_SpriteNumber", 241);
    oCellarDoor.SetProperty("WalkableArea_opened", 3);
    player.Say("I might as well keep this chain for the moment, it can be useful");
    oCellarLock.Visible = false;
    player.AddInventory(iChain);
    giveScoreOnce(iChain.Name, 1);
  } else
  {
    player.Say("I need to be closer to try that");
  }
}

function bringLadderCloser()
{
  if(onPlank && player.x > 90)
  {
    if(oLadder.GetProperty("Takable") == -1)
    {
      player.Walk(99, 199, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionRight);
      player.Say("Here goes nothing");
      Display("SLUSH!");
      oLadder.Move(104, 205, 3, eBlock, eAnywhere);
      giveScoreOnce("accessible ladder", 1);
      player.Say("Wow, I cannot believe that worked!");
      oLadder.SetProperty("Takable", 28);
    } else
    {
      player.Say("The ladder is close enough to be picked up!");
    }
  } else
  {
    player.Say("I need to get closer to the ladder");
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if ((cmd.StartsWith("look", eCaseInsensitive) || cmd.StartsWith("examine", eCaseInsensitive) || cmd.StartsWith("observe", eCaseInsensitive)) && (cmd.IndexOf("Mansion") != -1 || cmd.IndexOf("House") != -1 || cmd.IndexOf("Carfax") != -1))
  {
    player.Say("This is Carfax, no doubt a corruption of the old Quatre Face, as the house is four-sided, agreeing with the cardinal points of the compass");
    player.Say("The land must be in all some twenty acres, quite surrounded by a solid stone wall I crossed without difficulty");
    player.Say("The house is very large and of all periods back, I should say, to mediæval times");
    player.Say("There are many trees on the land, which make it in places gloomy");
    player.Say("One part is of stone immensely thick, with a few windows. It looks like part of a keep");
    player.Say("I also noticed a pond and an old chapel or church, while advancing towards the house");
    player.Say("The pond is deep, and dark-looking, evidently fed by some springs, as the water seems clear and flows away in a fair-sized stream");    
    player.Say("The house has been added to, but in a very straggling way, and I can only guess at the amount of ground it covers, which must be very great");
    player.FaceDirection(eDirectionLeft);
    Wait(20);
    player.FaceDirection(eDirectionRight);
    player.Say("There are but few houses close at hand, one being a very large house only recently added to and formed into a private sanitarium");
    player.Say("It is not, however, visible from the grounds");
    giveScoreOnce("Observe Carfax", 3);
    sendBackToNormalParsing = false;
  } else if (isThisOpened(oCellarDoor) && insideBulkhead && 
            (cmd.IndexOf("door") != -1 || cmd.IndexOf("inside") != -1 || cmd.IndexOf("kitchen") != -1) &&
            (cmd.IndexOf("look") != -1 || cmd.IndexOf("peek") != -1 || cmd.IndexOf("snoop") != -1))
  {
    sendBackToNormalParsing = false;
    player.FaceDirection(eDirectionUp);
    player.Say("Through the broken door, I can see an old kitchen");
    player.Say("It bears witness to the age of the property, probably built when the kitchen was in the servants' quarters");
    player.Say("It is in horrible shape, probably overrun by critters");
  } else if (isThisOpened(oCellarDoor) && insideBulkhead && 
            (cmd.IndexOf("door") != -1 || cmd.IndexOf("inside") != -1 || cmd.IndexOf("kitchen") != -1) &&
            (cmd.IndexOf("photograph") != -1 || cmd.IndexOf("take picture") != -1 || cmd.IndexOf("take a picture") != -1))
  {
    sendBackToNormalParsing = false;
    player.FaceDirection(eDirectionUp);
    takeAPicture("Carfax's Kitchen", "A picture of the property's basement kitchen", 3);
  } else if (isThisOpened(oCellarDoor) && insideBulkhead && 
            (cmd.IndexOf("door") != -1 || cmd.IndexOf("inside") != -1 || cmd.IndexOf("kitchen") != -1) &&
            (cmd.IndexOf("open") != -1 || cmd.IndexOf("break") != -1 || cmd.IndexOf("use") != -1 || cmd.IndexOf("touch") != -1))
  {
    sendBackToNormalParsing = false;
    player.FaceDirection(eDirectionUp);
    player.Say("Oh I am not touching that door");
  } else if(cmd.IndexOf("unlock") != -1 && player.HasInventory(iPadlockKey) && oCellarLock.Visible)
  {
    if(isCharacterNearObject(oCellarLock, 30.0, player))
    {
      unlockCellarAndTakeChain();
    } else
    {
      player.Say("I am not close enough");
    }
    sendBackToNormalParsing = false;
  } else if((cmd.IndexOf("use") != -1 || cmd.IndexOf("tangle") != -1 || cmd.IndexOf("bring") != -1 || cmd.IndexOf("whip") != -1) &&
             player.HasInventory(iChain) && oLadder.Visible &&
             cmd.IndexOf("ladder") != -1 && cmd.IndexOf("chain") != -1)
  {
    sendBackToNormalParsing = false;
    bringLadderCloser();
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 0 && verb == "close" && insideBulkhead)//exit bulkhead BEFORE closing
  {
    player.Walk(78, 166, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionUp);
    sendBackToNormalParsing = true;
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 4 && verb == "take" && player.HasInventory(iLadder))//after picking the ladder up
  {
    player.Say("That ladder is much shorter than I was expecting");
    player.Say("It'll be easier to carry around, I guess");
  } else if (eT == roomObjects && index == 0 && !isThisOpened(oCellarDoor) && !player.HasInventory(iChain))
  {
    player.Say("The wood panels are locked together by a chain which is secured by a padlock");
    player.Say("Someone etched something in the wood, near where the padlock hangs");
    player.Say("I reckon it says 'Dining Door'");
    player.Say("There is no way this is the door to the dining room");
    player.Say("Not sure what that could mean");
  } else if(eT == roomObjects && index == 4 && oLadder.Visible)
  {
    if(onPlank)
    {
      player.Say("I still cannot reach the ladder from here");
      player.Say("The pond gets deeper the further from the side it is");
      player.Say("I do not think I can makeshift a longer bridge");
      player.Say("Maybe I could use something to bring it closer?");
    } else if(oPlankPosed.Visible)
    {
      player.Say("Maybe if I walk on my makeshift bridge. . .");
    } else
    {
      player.Say("Maybe I can make a makeshift brige to get closer?");
    }
  } 
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
    break; 
  }
}

function lockTheCellarBackUp()
{
  if(isCharacterNearObject(oCellarDoor, 40.0, player) && player.HasInventory(iChain))
  {
    player.Say("I should lock this up");
    oCellarDoor.SetProperty("Open_SpriteNumber", -1);
    oCellarDoor.SetProperty("Close_SpriteNumber", -1);
    oCellarDoor.SetProperty("WalkableArea_opened", -1);
    if(isThisOpened(oCellarDoor))
    {
      oCellarDoor.Graphic = 426;
    }
    oCellarLock.Visible = true;
    player.LoseInventory(iChain);
  } else {
    player.Say("I am too far away");
  }
}

function putDownPlank()
{
  if(isCharacterNearHotspot(hPond, 40.0, player))
  {
    player.Walk(hPond.WalkToX, hPond.WalkToY, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionRight);
    player.Say("*sigh*");
    player.Say("That is going to be unpleasant");
    Display("SPLASH!");
    player.LoseInventory(iPlank);
    oPlankPosed.Visible = true;
    RestoreWalkableArea(2);
    giveScoreOnce("plank bridge", 1);
    player.Say("Bl. . . he. . .");
    player.Say("A good part of the plank got submerged");
    player.Say("And I am a bit damper, but I have a little bridge");
    player.StopMoving();
    player.SetWalkSpeed(3, 3);
    player.Walk(99, 199, eBlock, eWalkableAreas);
    player.Say("And. . . the ladder is still too far for me to grab it");
    player.Say("Splendid. . .");
    onPlank = true;
  }
}

function oCellarLock_UseInv()
{
  elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 38)//key
  {
    unlockCellarAndTakeChain(); 
  }
}

function oCellarDoor_opened_UseInv()
{
  elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 37)//chain
  {
    lockTheCellarBackUp(); 
  }
}

function hPond_UseInv()
{
  elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 27)//plank
  {
    putDownPlank(); 
  }
}

function region1_WalksOnto()
{
  player.StopMoving();
  player.SetWalkSpeed(3, 3);
  onPlank = true;
}

function region1_WalksOff()
{
  player.StopMoving();
  player.SetWalkSpeed(5, 5);
  onPlank = false;
}

function oLadder_UseInv()
{
  /*elementType usedET = getETOfElementUsed();
  int usedIndex = getIndexOfElementUsed();
  
  if(usedET == allInventoryItems && usedIndex == 37)//chain
  {
    bringLadderCloser(); 
  }*/
}

function region1_Standing()
{
  onPlank = true;
}

function room_LeaveLeft()
{
  player.ChangeRoom(16, 290, 165, eDirectionLeft);
}

function region2_WalksOnto()
{
  insideBulkhead = true;
}

function region2_WalksOff()
{
  insideBulkhead = false;
}

function room_AfterFadeIn()
{
  if(isThisOpened(oCellarDoor))
  {
    RestoreWalkableArea(3);
  } else
  {
    RemoveWalkableArea(3);
  }
  
  if(oPlankPosed.Visible)
  {
    RestoreWalkableArea(2);
  } else
  {
    RemoveWalkableArea(2);
  }
}
