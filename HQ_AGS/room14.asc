// room script file
//TO DO : Way to sharpen razor and bool to break it (shave with broken razor = death
function unhingedGate()
{
  if(player.HasInventory(iRazor))
  {
    player.Say("Maybe I can use my razor to remove the rusty hinges. . .");
    player.Walk(32, 139, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionUp);
    oFenceDoor.SetProperty("Close_SpriteNumber", 210);
    oFenceDoor.SetProperty("Open_SpriteNumber", -2);
    oFenceDoor.Visible = false;
    player.Say("Success!");//Razor must be resharpened?
  } else
  {
    player.Say("I'd need a blade or slim object to remove those rusty hinges");
  }
}

function addHingesToGatesAltNames()
{
  String altNames = oFenceDoor.GetTextProperty("alternateNames");
  altNames = altNames.Append(", hinge, penture, charniere");
  oFenceDoor.SetTextProperty("alternateNames", altNames);
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //Unlock door
  if((cmd.StartsWith("Knock", eCaseInsensitive) || cmd.StartsWith("Use", eCaseInsensitive)) && (cmd.IndexOf("Door") != -1))
  {
    sendBackToNormalParsing = false;
    if(isCharacterNearHotspot(hFrontDoor, 20.0, player))
    {
      player.Walk(hFrontDoor.WalkToX, hFrontDoor.WalkToY, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp, eBlock);
      Display("Knock, knock");
      Wait(80);
      player.Walk(player.x, player.y + 30, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp);
      player.Say("Hello?");
      Wait(80);
      player.FaceDirection(eDirectionRight);
      Wait(50);
      player.FaceDirection(eDirectionLeft);
      Wait(40);
      player.FaceDirection(eDirectionUp);
      player.Think("There is no one here");
      giveScoreOnce("Verify if someone is home", 1);
    } else if(isCharacterNearObject(oFenceDoor, 20.0, player))
    {
      player.Say("This is a fence door. . . Knocking on it is silly");
    } else
    {
      player.Say("I am too far from the door");
    }
    //Look house
  } else if ((cmd.StartsWith("look", eCaseInsensitive) || cmd.StartsWith("examine", eCaseInsensitive) || cmd.StartsWith("observe", eCaseInsensitive)) && (cmd.IndexOf("Mansion") != -1 || cmd.IndexOf("House") != -1 || cmd.IndexOf("Carfax") != -1))
  {
    player.Say("This is Carfax, no doubt a corruption of the old Quatre Face, as the house is four-sided, agreeing with the cardinal points of the compass");
    player.Say("The land must be in all some twenty acres, quite surrounded by a solid stone wall I crossed without difficulty");
    player.Say("The house is very large and of all periods back, I should say, to medi√¶val times");
    player.Say("There are many trees on the land, which make it in places gloomy");
    player.Say("One part is of stone immensely thick, with a few windows. It looks like part of a keep");
    player.Say("I also noticed a pond and an old chapel or church, while advancing towards the house");
    player.Say("The pond is deep, and dark-looking, evidently fed by some springs, as the water seems clear and flows away in a fair-sized stream");    
    player.Say("The house has been added to, but in a very straggling way, and I can only guess at the amount of ground it covers, which must be very great");
    player.FaceDirection(eDirectionLeft);
    Wait(20);
    player.FaceDirection(eDirectionRight);
    player.Say("There are but few houses close at hand, one being a very large house only recently added to and formed into a private sanitarium");
    player.Say("It is not, however, visible from the grounds");
    giveScoreOnce("Observe Carfax", 3);
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  
  if(eT == roomHotspots && index == 1 && verb == "photograph")//dining
  {
    takeAPicture("Carfax's Dining", "This is the property's dining room", 1);
    sendBackToNormalParsing = false;
  } else if(eT == roomHotspots && index == 2 && verb == "photograph")//study
  {
    takeAPicture("Carfax's Study", "This is the property's study", 1);
    sendBackToNormalParsing = false;
  } else if(eT == roomHotspots && index == 3)//door
  {
    player.Say("That door is in bad shape, I'd better leave it alone");
    sendBackToNormalParsing = false;
  } else if(eT == roomHotspots && (index == 1 || index == 2) && verb == "open") // either windows
  {
    sendBackToNormalParsing = false;
    if(isCharacterNearHotspot(hWindowDiningRoom, 40.0, player) || isCharacterNearHotspot(hWindowStudy, 40.0, player))
    {
      player.Think("That window is locked from the inside");
    } else
    {
      player.Think("I'm too far away");
    }
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomHotspots && index == 1 && verb == "look")//dining
  {
    notableSay(player, "Bible verse", "There is an inscription above the door. It reads: MATT 24:45", 1);
    player.Say("That is a Bible verse from Matthew's Gospel, I believe");
    if(!dBible.HasOptionBeenChosen(3))
    {
      dBible.SetOptionState(3, eOptionOn);
    }
  } else if(eT == roomObjects && index == 0 && verb == "open")//fence gate
  {
    if(oFenceDoor.GetProperty("Open_SpriteNumber") != -2)
    {
      player.Say("The hinges are rusted in place");
      addHingesToGatesAltNames();
      if(player.HasInventory(iRazor))
      {
        player.Say("Maybe I can remove the hinges?");
        player.Say("I would need to use a very thin and very solid tool");
      } else
      {
        player.Walk(37, 170, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionLeft);
        player.Say("There a path leading around the fence, maybe there is another gate?"); 
      }
    }
  } else if(eT == roomObjects && index == 0 && verb == "look")//fence gate
  {
    addHingesToGatesAltNames();
  }
  //insert highjacking formulas here (and set the bool to false)
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
  }
}

function room_AfterFadeIn()
{
  musicInRoom(aDeambulation, 1);
  
}

function room_Load()
{
  if(player.x == 36 && player.y == 152)//door should be opened
  {
      oFenceDoor.Visible = false;
  }
}

function oFenceDoor_UseInv()
{
  int Usedindex = getIndexOfElementUsed();
  elementType UsedET = getETOfElementUsed();
  
  if(UsedET == allInventoryItems && Usedindex == 3)//r
  {
    unhingedGate();
  }
}

function region1_WalksOnto()
{
  if(!oFenceDoor.Visible)
  {
    player.ChangeRoom(15, 280, 210, eDirectionLeft);
  }
}

function region1_Standing()
{
  if(!oFenceDoor.Visible)
  {
    player.ChangeRoom(15, 280, 210, eDirectionLeft);
  }
}

function room_LeaveLeft()
{
  player.ChangeRoom(15, 280, 295, eDirectionLeft);
}

function region2_WalksOnto()
{
  player.ChangeRoom(16, 25, 167, eDirectionRight);
}

function room_LeaveBottom()
{
  player.ChangeRoom(6, 110, 180, eDirectionDown);
}
