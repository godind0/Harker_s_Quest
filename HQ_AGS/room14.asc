// room script file
bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if((cmd.StartsWith("Knock", eCaseInsensitive) || cmd.StartsWith("Use", eCaseInsensitive)) && (cmd.IndexOf("Door") != -1))
  {
    sendBackToNormalParsing = false;
    if(isCharacterNearHotspot(hFrontDoor, 20.0, player))
    {
      player.Walk(hFrontDoor.WalkToX, hFrontDoor.WalkToY, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp, eBlock);
      Display("Knock, knock");
      Wait(80);
      player.Walk(player.x, player.y + 30, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp);
      player.Say("Hello?");
      Wait(80);
      player.FaceDirection(eDirectionRight);
      Wait(50);
      player.FaceDirection(eDirectionLeft);
      Wait(40);
      player.FaceDirection(eDirectionUp);
      player.Think("There is no one here");
      giveScoreOnce("Verify if someone is home", 1);
    } else
    {
      player.Say("I am too far from the door");
    }
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomHotspots && index == 1 && verb == "photograph")//dining
  {
    takeAPicture("Carfax's Dining", "This is the property's dining room", 1);
    sendBackToNormalParsing = false;
  } else if(eT == roomHotspots && index == 2 && verb == "photograph")//living
  {
    takeAPicture("Carfax's Living", "This is the property's living room", 1);
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here (and set the bool to false)
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}
function room_AfterFadeIn()
{
  musicInRoom(aDeambulation);
  
}

function room_Load()
{
  if(player.x == 18 && player.y == 171)//door should be opened
  {
      oFenceDoor.Visible = false;
  }
}

function oFenceDoor_UseInv()
{
  int Usedindex = getIndexOfElementUsed();
  elementType UsedET = getETOfElementUsed();
  
  if(UsedET == allInventoryItems && Usedindex == 32)//knife
  {
    player.Say("Maybe I can use Mina's knife to remove the hinges...");
    oFenceDoor.SetProperty("Close_SprinteNumber", 210);
    oFenceDoor.SetProperty("Open_SprinteNumber", -2);
    player.Say("Success! Thank you my love!");
  }
}

function region1_WalksOnto()
{
  if(!oFenceDoor.Visible)
  {
    player.ChangeRoom(15, 282, 107, eDirectionLeft);
  }
}

function region1_Standing()
{
  if(!oFenceDoor.Visible)
  {
    player.ChangeRoom(15, 282, 107, eDirectionLeft);
  }
}

function room_LeaveLeft()
{
  player.ChangeRoom(15, 293, 196, eDirectionLeft);
}
