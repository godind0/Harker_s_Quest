// room script file
bool operatorOut = false;
int operatorOutDay;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
    /*if(cmd.IndexOf("debug morse") != -1)
    {
      notableSay(player, "Intercepted code", "—•• • •—•• •• •••— • •—• / —•• •• •—• • —•—• — •—•• —•—— / — ——— / •—• / •——• •— •—• — ——— —• / —•—— • ••• / •• / •—— •• •—•• •—•• / —— •— •—• •—• —•—— / —•—— ——— ••— / •—•• ——— •••— • / •— ——• —• • •••", 0);
      takeNote();
      open_gui(gMorseTranslation);
    }*/
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 1 && (verb == "look" || verb == "read"))//morse poster
  {
    player.Say("I would be able to translate a telegram code with the help of this poster");
    foundMorseClue(3);
  }
  //insert highjacking formulas here (and set the bool to false)
}

function telegramReceptionistLeaves()
{
  RestoreWalkableArea(2);
  cTelegramOperator.PlaceOnWalkableArea();
  cTelegramOperator.Walk(55, 138, eNoBlock, eWalkableAreas);
  cTelegramOperator.SetProperty("dialogIndex", -1);
  operatorOut = true;
  operatorOutDay = currentDay;
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
    case 2:
      player.FaceObject(oMorsePoster, eBlock);
      Wait(5);
      player.Walk(oMorsePoster.X, oMorsePoster.Y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp);
      open_gui(gMorseTranslation);
      break;
    case 3:
      telegramReceptionistLeaves();
      break;
  }
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(TelegramOffice));
  
  if(state != "opened")
  {
    if(state.StartsWith("Close"))
    {
      if(cTelegramOperator.Transparency == 100)
      {
        cTelegramOperator.FaceDirection(eDirectionDown);
        cTelegramOperator.Transparency = 0;
        giveScoreOnce("Kept an eye on the place", 1);
        player.FaceCharacter(cTelegramOperator);
        cTelegramOperator.Say("What a relaxing day!");
        cTelegramOperator.FaceCharacter(player);
        cTelegramOperator.Say("Oh good you're still here!");
        player.Say("Of course. . .");
        cTelegramOperator.Say("It's 'adjacenting' time!");
      } else
      {
        cTelegramOperator.Say("Oh boy! It's 'adjacenting' time!");
        player.FaceCharacter(cTelegramOperator);
      }
      if(Game.DoOnceOnly("AdjentingTime"))
      {
        player.Say("What time?");
        cTelegramOperator.Say("Adjacenting! Get it?");
        player.Say(". . .");
        cTelegramOperator.Say("Adjacent is a synonym of close. . .");
        player.Say("So 'adjacenting' is a synonym of 'closing'");
        cTelegramOperator.Say("And 'adjacenting time' is a synonym of 'closing time'!");
        player.Say("Clever");
        cTelegramOperator.Say("Isn't it, heh? I'm just being silly");
      } else
      {
        player.Say("Right, closing time");
      }
      Wait(15);
      cTelegramOperator.Say("You're going to have to leave, however");
      player.Say("Oh, of course");
      player.SayBackground("Good evening!");
      player.Walk(56, 141, eBlock, eWalkableAreas);
      cTelegramOperator.Walk(183, 134, eNoBlock, eWalkableAreas);
      dTravel.Start();
    }
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
  
}

function room_LeaveTop()
{
  
}

function room_RepExec()
{
  manageClosingTime();
  if(operatorOut && !cTelegramOperator.Moving && cTelegramOperator.Transparency < 100)
  {
    if(cTelegramOperator.x < 69)
    {
      cTelegramOperator.FaceDirection(eDirectionUp);
      cTelegramOperator.Transparency = 100;
      addTimedEventInXMinutes(2, "Imminent telegram");
    }
  }
}

function room_Load()
{
  if(!operatorOut || (operatorOut && currentDay != operatorOutDay))
  {
    cTelegramOperator.x = 183;
    cTelegramOperator.y = 134;
    cTelegramOperator.FaceDirection(eDirectionDown);
    cTelegramOperator.Transparency = 0;
    RemoveWalkableArea(2);
    operatorOut = false;
    cTelegramOperator.SetProperty("dialogIndex", 10);
  }
}

function region1_WalksOnto()
{
  dTravel.Start();
}

function room_FirstLoad()
{
  operatorOut = false;
  operatorOutDay = currentDay;
}
