// room script file
bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  //insert highjacking formulas here (and set the bool to false)
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}

function manageClosingTime()
{
  String state = isThisPlaceOpened(getCommerceType(TelegramOffice));
  
  if(state != "opened")
  {
    if(state.StartsWith("Close"))
    {
      cTelegramOperator.Say("Oh boy! It's 'adjacenting' time!");
      player.FaceCharacter(cTelegramOperator);
      player.Say("What time?");
      cTelegramOperator.Say("Adjacenting! Get it?");
      player.Say("...");
      cTelegramOperator.Say("Adjacent is a synonym of close...");
      player.Say("So 'adjacenting' is a synonym of 'closing'");
      cTelegramOperator.Say("And 'adjacenting time' is a synonym of 'closing time'!");
      player.Say("Clever");
      cTelegramOperator.Say("Isn't it, heh? I'm just being silly");
      Wait(15);
      cTelegramOperator.Say("You're going to have to leave, however");
      player.Say("Oh, right");
      player.SayBackground("Good evening!");
      player.Walk(56, 141, eBlock, eWalkableAreas);
      dTravel.Start();
    }
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought);
}

function room_LeaveTop()
{
  dTravel.Start();
}

function room_RepExec()
{
  manageClosingTime();
}
