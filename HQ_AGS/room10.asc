// room script file
//##### TO DO #####
// Create exam
// Request exam
//   Add to telegrams (Mina, 3)
// Test exam + succeed
//   Add to telegrams (Mina, 4 + Hawkins, 3)
//   Remove telegram for the arrangement if done (Mina, 3)



bool receptionistGoingLeft = false;
String givenLastName;
String givenEmployer;
bool knowAboutPhoto;
int roomX = 10;//Left = - ; Right = +
int roomY = 10;//South = + ; North = -
int targetTime;
bool triggerEdges = true;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 1 && (verb == "look" || verb == "read"))//menu
  {
    dMenu.SetOptionState(8, eOptionOn);
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
    case 2:
      givenLastName = "Murray";
      break;
    case 3:
      givenLastName = "Harker";
      break;
    case 4:
      givenLastName = "Parker";
      break;
    case 5:
      givenEmployer = "Parton";
      break;
    case 6:
      givenEmployer = "Mason";
      break;
    case 7:
      givenEmployer = "Hawkins";
      break;
    case 8:
      cReceptionist.Say(String.Format("Mr. %s, from %s, Esq.", givenLastName, givenEmployer));
      if(givenLastName == "Harker" && givenEmployer == "Hawkins")
      {
        cReceptionist.Say("Here you are");
        cReceptionist.Say("Congratulation, Mr. Harker, you have achieved all the requirement to take the examination!");
        player.Say("Splendid!");
        cReceptionist.Say("Of course, sir");
        cReceptionist.Say("The exam as two parts:");
        cReceptionist.Say("The first includes questions on local sollicitors' procedures");
        cReceptionist.Say("The second is to demonstrate your knowledge of European politics and cultures");
        cReceptionist.Say("For this second part, you must choose a European region of your liking");
        player.Say("Oh... hum..");
        Wait(40);
        cReceptionist.Say("Would you rather come back another time, sir?");
        player.Say("No! I'll.. I'll take Transylviania");
        Wait(40);
        cReceptionist.Say("What an... original choice");
        player.Say("I'm sure it is...");
        cReceptionist.Say("You are in luck, sir");
        cReceptionist.Say("The British Museum is curating an exhibit on that specific region as we speak");
        player.Say("Is that so?");
        cReceptionist.Say("Indeed, sir");
        addTravelDestination(BritishMuseum);
        cReceptionist.Say("On behalf of the The Society of Attorneys, Solicitors, Proctors and others not being Barristers, practising in the Courts of Law and Equity of the United Kingdom,");
        cReceptionist.Say("*draws in a deep breath*");
        cReceptionist.Say("I offer you this exam book in which to consign your answers");
        player.AddInventory(iExam);
        giveScoreOnce("The exam is on", 1);
        player.Say("Terrific! I cannot wait to go through it!");
        setTelegramInclusionByIndex("Mina", 3, true);
      } else
      {
        cReceptionist.Say(String.Format("I am deeply sorry, Mr. %s, your name is not on my list", givenLastName));
      }
      break;
    case 9:
      knowAboutPhoto = (dLawSocietyReceptionist.GetOptionState(9) == eOptionOn);
      break;
    case 10:
      if(knowAboutPhoto)
      {
        dLawSocietyReceptionist.SetOptionState(9, eOptionOn);
      }
      break;
    case 11:
      targetTime = translateTimeToMinutes(whatTimeIsIt(false));
      targetTime = targetTime + (120 + Random(60));
      CallRoomScript(12);
      break;
    case 12:
      notableSay(cPhotoPro, "Photos printed",  String.Format("Your pictures will be printed at %s", translateMinutesToHHMMAM(targetTime)), 0);
      cPhotoPro.Say("Come back then");
      dPhotoPro.SetOptionState(13, eOptionOn);
      break;
    case 13:
      if(isThisTimeBeforeThisTime(translateMinutesToHHMMAM(targetTime), whatTimeIsIt(false)))
      {
        cPhotoPro.Say("Yes");
        player.Say("...");
        player.Say(String.Format("It is %s, now", whatTimeIsIt(true)));
        cPhotoPro.Say("It is");
        player.Say(String.Format("You said they would be printed at %s", translateMinutesToHHMMAM(targetTime)));
        cPhotoPro.Say("They are printed");
        player.Say("Can I have them?");
        cPhotoPro.Say("There they are");
        tranfertAllSubitemFromOneParentToAnother(iFilm, iPhotos);
        changeAllSubItemNoteInParent(iPhotos, "This photo is printed and ready to use");
        player.AddInventory(iPhotos);
        cPhotoPro.LoseInventory(iFilm);
        targetTime = -1;
        if(playerHasAllCarfaxPictures())
        {
          dPhotoPro.SetOptionState(13, eOptionOff);
          player.Say("I got all photos, I need to send a telegram to Mr. Hawkins");
        }
      } else
      {
        CallRoomScript(12);
      }
    case 14:
      FadeOut(5);
      FadeIn(5);
      cReceptionist.Say("Mr. Harker, your results are in");
      cReceptionist.Say(String.Format("You got a grade of %d/%d", howManyCorrectExamAnswers(), howManyExamAnswers());
      if(howManyCorrectExamAnswers() == howManyExamAnswers())
      {
        cReceptionist.Say("On behalf of the The Society of Attorneys, Solicitors, Proctors and others not being Barristers, practising in the Courts of Law and Equity of the United Kingdom,");
        cReceptionist.Say("I grant you to your new title of sollicitor");
        cHarker.Say("Thank you so much!");
        setTelegramInclusionByIndex("Mina", 3, false);
        setTelegramInclusionByIndex("Mina", 4, true);
        setTelegramInclusionByIndex("Hawkins", 3, true);
        player.LoseInventory(iExam);
        player.AddInventory(iDiploma);
        player.SetTextProperty("TextDescription", "It is me: Jonathan Harker, Esq.");
        giveScoreOnce("Sollicitor!!!!", 10);
      } else
      {
        cReceptionist.Say("Sadly, it is unsufficient to obtain your diploma, sir");
        cReceptionist.Say("Here is your exam booklet back, you can try again");
      }
      break;
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought);
}

function avoidance(int receptionistSpeed)
{
  int avoidX = player.x;
  
  int leftMax = 78;
  int rightMax = 137;
  
  int distLeftSq = (avoidX - leftMax) * (avoidX - leftMax);
  int distRightSq = (avoidX - rightMax) * (avoidX - rightMax);
  
  if(receptionistSpeed != cReceptionist.WalkSpeedX)
  {
    cReceptionist.StopMoving();
    cReceptionist.SetWalkSpeed(receptionistSpeed, receptionistSpeed);
  }
  
  if(distLeftSq > distRightSq)
  {
    if(!cReceptionist.Moving || !receptionistGoingLeft)
    {
      cReceptionist.Walk(leftMax, cReceptionist.y, eNoBlock, eAnywhere);
      receptionistGoingLeft = true;
    }
  } else
  {
    if(!cReceptionist.Moving || receptionistGoingLeft)
    {
      cReceptionist.Walk(rightMax, cReceptionist.y, eNoBlock, eAnywhere);
      receptionistGoingLeft = false;
    }
  }
}

function room_RepExec()
{
  if(isCharacterNearCharacter(player, 40.0, cReceptionist))
  {
    avoidance(5);
  } else if(isCharacterNearCharacter(player, 80.0, cReceptionist))
  {
    avoidance(3);
  } else if(isCharacterNearCharacter(player, 150.0, cReceptionist))
  {
    avoidance(1);
  } else if (!isCharacterNearCharacter(player, 200.0, cReceptionist))
  {
    cReceptionist.StopMoving();
  } else
  {
    cReceptionist.Walk(108, cReceptionist.y, eNoBlock, eAnywhere);
  }
}

function enterReception()
{
  SetBackgroundFrame(0);
  RemoveWalkableArea(1);
  cReceptionist.x = 108;
  cReceptionist.y = 120;
  cReceptionist.Transparency = 0;
}

function enterPhotoDesk()
{
  SetBackgroundFrame(0);
  RemoveWalkableArea(1);
  cPhotoPro.x = 108;
  cPhotoPro.y = 120;
  cPhotoPro.Transparency = 0;
}

function enterCantine()
{
  SetBackgroundFrame(1);
  RemoveWalkableArea(1);
  oMenu.Visible = true;
  oCantine.Visible = true;
}

function room_Load()
{
  enterReception();
  cPhotoPro.Transparency = 100;
}

function memoryOfTheWay(String mazeDirection)
{
  String memorizedWay;
  if(lblCurrentThought.Transparency < 100)
  {
    memorizedWay = getMemorisedThought();
    memorizedWay = memorizedWay.Append(", ");
    memorizedWay = memorizedWay.Append(mazeDirection);
    memorize(memorizedWay);
  } else
  {
    memorize(mazeDirection);
  }
}

function changeLawSocietyRoom(String mazeDirection)
{
  triggerEdges = false;
  FadeOut(5);
  SetBackgroundFrame(1);
  RestoreWalkableArea(1);
  memoryOfTheWay(mazeDirection);
  cReceptionist.Transparency = 100;
  cPhotoPro.Transparency = 100;
  oMenu.Visible = false;
  oCantine.Visible = false;
  switch(mazeDirection)
  {
    case "South":
      roomY++;
      player.x = 267;
      player.y = 146;
      break;
    case "West":
      roomX--;
      player.x = 267;
      player.y = 153;
      break;
    case "East":
      roomX++;
      player.x = 38;
      player.y = 153;
      break;
    case "North":
      roomY--;
      player.x = 267;
      player.y = 159;
      break;
  }
  if(roomX == 10 && roomY == 7){
    enterPhotoDesk();
  } else if (roomX == 12 && roomY == 9)
  {
    enterCantine();
  }
  FadeIn(5);
  triggerEdges = true;
}

function room_LeaveBottom()
{ 
  player.StopMoving();
  if(triggerEdges)
  {
    if(roomX == 10 && roomY == 10)//reception
    {
      //do nothing
    } else if(roomY >= 10)//back to reception
    {
      triggerEdges = false;
      FadeOut(4);
      enterReception();
      player.x = 160;
      player.y = 160;
      FadeIn(4);
      triggerEdges = true;
      memorize("Back at reception...");
    } else {
      changeLawSocietyRoom("South");
    }
  }
}

function room_LeaveLeft()
{
  player.StopMoving();
  if(triggerEdges)
  {
    if(roomY == 10 && roomX == 11)
    {
      triggerEdges = false;
      FadeOut(4);
      enterReception();
      player.x = 267;
      player.y = 153;
      FadeIn(4);
      triggerEdges = true;
      memorize("Back at reception...");
    } else {
      changeLawSocietyRoom("West");
    }
  }
}

function room_LeaveRight()
{
  player.StopMoving();
  if(triggerEdges)
  {
    if(roomY == 10 && roomX == 9)
    {
      triggerEdges = false;
      FadeOut(4);
      enterReception();
      player.x = 38;
      player.y = 153;
      FadeIn(4);
      triggerEdges = true;
      memorize("Back at reception...");
    } else {
      changeLawSocietyRoom("East");
    }
  }
}

function room_LeaveTop()
{
  player.StopMoving();
  if(triggerEdges)
  {
    changeLawSocietyRoom("North");
  }
}

function region1_WalksOnto()
{
  if(triggerEdges)
  {
    if(roomX == 10 && roomY == 10)//reception
    {
      dTravel.Start();
    }
  }
}
