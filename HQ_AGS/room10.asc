// room script file
bool receptionistGoingLeft = false;
String givenLastName;
String givenEmployer;
bool knowAboutPhoto;
int roomX = 10;//Left = - ; Right = +
int roomY = 10;//South = + ; North = -
int targetTime;

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 1 && (verb == "look" || verb == "read"))//menu
  {
    dMenu.SetOptionState(8, eOptionOn);
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
    case 2:
      givenLastName = "Murray";
      break;
    case 3:
      givenLastName = "Harker";
      break;
    case 4:
      givenLastName = "Parker";
      break;
    case 5:
      givenEmployer = "Parton";
      break;
    case 6:
      givenEmployer = "Mason";
      break;
    case 7:
      givenEmployer = "Hawkins";
      break;
    case 8:
      cReceptionist.Say(String.Format("Mr. %s, from %s, Esq.", givenLastName, givenEmployer));
      if(givenLastName == "Harker" && givenEmployer == "Hawkins")
      {
        cReceptionist.Say("Here you are");
        cReceptionist.Say("Congratulation, Mr. Harker, you passed!");
        cHarker.Say("Did I?");
        cReceptionist.Say("Of course, sir");
        cReceptionist.Say("On behalf of the The Society of Attorneys, Solicitors, Proctors and others not being Barristers, practising in the Courts of Law and Equity of the United Kingdom,");
        cReceptionist.Say("*draws in a deep breath*");
        cReceptionist.Say("I offer you my sincerest congratulations");
        cReceptionist.Say("Here is your official certificate");
        player.AddInventory(iDiploma);
        giveScoreOnce("Official sollicitor", 5);
        cHarker.SetTextProperty("TextDescription", "It is me: Jonathan Harker, Esq.");
        player.Say("Terrific! I cannot wait to tell my dearest Mina!");
        
        updateTelegramMessage("Mina", "Wilhelmina,Murray,bethroted,love,fiancee", "Wilhelmina Murray, in Exeter", 
                              "Succeeded exam STOP Now full sollicitor STOP Cannot wait to see you STOP Love", 
                              "Mr. Hawkins victim to an attack of gout STOP[Will need to go to Transylvania in his guise STOP[Should be back within a month STOP[Also succeeded my exam STOP Now full sollicitor STOP[We can finally get married when I come back STOP[Love");
      } else
      {
        cReceptionist.Say(String.Format("I am deeply sorry, Mr. %s, your name is not on my list", givenLastName));
      }
      break;
    case 9:
      knowAboutPhoto = (dLawSocietyReceptionist.GetOptionState(9) == eOptionOn);
      break;
    case 10:
      if(knowAboutPhoto)
      {
        dLawSocietyReceptionist.SetOptionState(9, eOptionOn);
      }
      break;
    case 11:
      targetTime = translateTimeToMinutes(whatTimeIsIt(false));
      targetTime = targetTime + (120 + Random(60));
      CallRoomScript(12);
      break;
    case 12:
      notableSay(cPhotoPro, "Photos printed",  String.Format("Your pictures will be printed at %s", translateMinutesToHHMMAM(targetTime)), 0);
      cPhotoPro.Say("Come back then");
      dPhotoPro.SetOptionState(13, eOptionOn);
      break;
    case 13:
      if(isThisTimeBeforeThisTime(translateMinutesToHHMMAM(targetTime), whatTimeIsIt(false)))
      {
        cPhotoPro.Say("Yes");
        player.Say("...");
        player.Say(String.Format("It is %s, now", whatTimeIsIt(true)));
        cPhotoPro.Say("It is");
        player.Say(String.Format("You said they would be printed at %s", translateMinutesToHHMMAM(targetTime)));
        cPhotoPro.Say("They are printed");
        player.Say("Can I have them?");
        cPhotoPro.Say("There they are");
        tranfertAllSubitemFromOneParentToAnother(iFilm, iPhotos);
        changeAllSubItemNoteInParent(iPhotos, "This photo is printed and ready to use");
        player.AddInventory(iPhotos);
        cPhotoPro.LoseInventory(iFilm);
        targetTime = -1;
        dPhotoPro.SetOptionState(13, eOptionOff);
        addPlannedTelegram("Hawkins", "Peter,Boss,Pete", "Peter Hawkins, Esq, in Exeter", "Found great property for Count STOP Took all picture");
      } else
      {
        CallRoomScript(12);
      }
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought);
}

function avoidance(int receptionistSpeed)
{
  int avoidX = player.x;
  
  int leftMax = 78;
  int rightMax = 137;
  
  int distLeftSq = (avoidX - leftMax) * (avoidX - leftMax);
  int distRightSq = (avoidX - rightMax) * (avoidX - rightMax);
  
  cReceptionist.SetWalkSpeed(receptionistSpeed, 0);
  
  if(distLeftSq > distRightSq)
  {
    if(!cReceptionist.Moving || !receptionistGoingLeft)
    {
      cReceptionist.Walk(leftMax, cReceptionist.y, eNoBlock, eAnywhere);
      receptionistGoingLeft = true;
    }
  } else
  {
    if(!cReceptionist.Moving || receptionistGoingLeft)
    {
      cReceptionist.Walk(rightMax, cReceptionist.y, eNoBlock, eAnywhere);
      receptionistGoingLeft = false;
    }
  }
}

function room_RepExec()
{
  if(isCharacterNearCharacter(player, 40.0, cReceptionist))
  {
    avoidance(5);
  } else if(isCharacterNearCharacter(player, 80.0, cReceptionist))
  {
    avoidance(3);
  } else if(isCharacterNearCharacter(player, 150.0, cReceptionist))
  {
    avoidance(1);
  } else if (!isCharacterNearCharacter(player, 200.0, cReceptionist))
  {
    cReceptionist.StopMoving();
  } else
  {
    cReceptionist.Walk(108, cReceptionist.y, eNoBlock, eAnywhere);
  }
}

function enterReception()
{
  SetBackgroundFrame(1);
  RemoveWalkableArea(1);
  cReceptionist.x = 108;
  cReceptionist.y = 120;
  cReceptionist.Transparency = 0;
}

function enterPhotoDesk()
{
  SetBackgroundFrame(1);
  RemoveWalkableArea(1);
  cPhotoPro.x = 108;
  cPhotoPro.y = 120;
  cPhotoPro.Transparency = 0;
}

function enterCantine()
{
  SetBackgroundFrame(2);
  RemoveWalkableArea(1);
  oMenu.Visible = true;
  oCantine.Visible = true;
}

function room_Load()
{
  enterReception();
  cPhotoPro.Transparency = 100;
}

function memoryOfTheWay(String mazeDirection)
{
  String memorizedWay;
  if(lblCurrentThought.Transparency < 100)
  {
    memorizedWay = getMemorisedThought();
    memorizedWay = memorizedWay.Append(", ");
    memorizedWay = memorizedWay.Append(mazeDirection);
    memorize(memorizedWay);
  } else
  {
    memorize(mazeDirection);
  }
}

function changeLawSocietyRoom(String mazeDirection)
{
  FadeOut(5);
  SetBackgroundFrame(2);
  RestoreWalkableArea(1);
  memoryOfTheWay(mazeDirection);
  cReceptionist.Transparency = 100;
  cPhotoPro.Transparency = 100;
  oMenu.Visible = false;
  oCantine.Visible = false;
  switch(mazeDirection)
  {
    case "South":
      roomY++;
      player.x = 266;
      player.y = 143;
      break;
    case "West":
      roomX--;
      cHarker.x = 292;
      cHarker.y = 156;
      break;
    case "East":
      roomX++;
      cHarker.x = 25;
      cHarker.y = 156;
      break;
    case "North":
      roomY--;
      cHarker.x = 266;
      cHarker.y = 165;
      break;
  }
  if(roomX == 10 && roomY == 7){
    enterPhotoDesk();
  } else if (roomX == 12 && roomY == 9)
  {
    enterCantine();
  }
  FadeIn(5);
}

function room_LeaveBottom()
{ 
  if(roomX == 10 && roomY == 10)//reception
  {
    dTravel.Start();
  } else if(roomY >= 10)//back to reception
  {
    FadeOut(4);
    enterReception();
    cHarker.x = 160;
    cHarker.y = 167;
    FadeIn(4);
    memorize("Back at reception...");
  } else {
    changeLawSocietyRoom("South");
  }
}

function room_LeaveLeft()
{
  if(roomY == 10 && roomX == 11)
  {
    FadeOut(4);
    enterReception();
    cHarker.x = 292;
    cHarker.y = 156;
    FadeIn(4);
    memorize("Back at reception...");
  } else {
    changeLawSocietyRoom("West");
  }
}

function room_LeaveRight()
{
  if(roomY == 10 && roomX == 9)
  {
    FadeOut(4);
    enterReception();
    cHarker.x = 25;
    cHarker.y = 156;
    FadeIn(4);
    memorize("Back at reception...");
  } else {
    changeLawSocietyRoom("East");
  }
}

function room_LeaveTop()
{
  changeLawSocietyRoom("North");
}
