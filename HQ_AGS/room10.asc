// room script file
bool receptionistGoingLeft = false;
bool receptionistAvoiding = true;
String givenLastName;
String givenEmployer;
bool knowAboutPhoto;
int roomX = 10;//Left = - ; Right = +
int roomY = 10;//South = + ; North = -
bool blockedSouth = false;
int targetTime;
bool triggerEdges = true;
Dictionary* breadCrumbs;
String memorizedTrajectory;
bool gotTelegramMsg = false;

function useDirectory()
{
  if(isCharacterNearObject(oDirectory, 60.0, player))
  {
    player.Walk(175, 142, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionUp);
    player.Say("Oh! A Kelly's Directory");
    player.Say("Let's see here");
    player.Say("What service do I need to find?");
    show_simpleTextBox("Directory");
  } else
  {
    player.Say("I am too far away from the directory");
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if((cmd.StartsWith("Enter ") || cmd.StartsWith("Go ") || cmd.StartsWith("Open ")) &&
     (cmd.IndexOf("cafe") != -1 || cmd.IndexOf("caf√©") != -1 || cmd.IndexOf("cantine") != -1 || cmd.IndexOf("door") != -1) &&
      oCantine.Visible == true)      
  {
      if(isCharacterNearObject(oCantine, 60.0, player))
      {
        player.Walk(oCantine.X + 25, oCantine.Y, eBlock, eWalkableAreas);
        dMenu.Start();
      } else
      {
        player.Say("I need to be closer");
      }      
      sendBackToNormalParsing = false;
  } else if (cmd.StartsWith("Read ") && (cmd.IndexOf("menu") != -1 || cmd.IndexOf("sign") != -1))
  {
    player.FaceObject(oMenu);
    player.Say(oMenu.GetTextProperty("TextDescription"));
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 0 && (verb == "open"))//cafe
  {
    dMenu.Start();
    sendBackToNormalParsing = false;
  } else if(eT == roomHotspots && index == 1)//door
  {
    if(oExitSign.Visible)
    {
      switch(verb)
      {
        case "open":
          dTravel.Start();
          break;
        case "look":
          player.Say("This is an exit");
          break;
        default:
          player.Say("I am not sure what to do with this");
          break;
      }
    } else
    {
      switch(verb)
      {
        case "open":
          player.Say("This must be someone's office");
          player.Say("Someone I do not know and have no business disturbing");
          break;
        case "look":
          player.Say("This must be someone's office");
          break;
        default:
          player.Say("I am not sure what to do with this");
          break;
      }
    }
    sendBackToNormalParsing = false;
  } else if(eT == roomObjects && index == 15 && (verb == "look" || verb == "read" || verb == "consult") && oDirectory.Visible)
  {
    sendBackToNormalParsing = false;
    useDirectory();
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 1 && (verb == "look" || verb == "read"))//menu
  {
    dMenu.SetOptionState(8, eOptionOn);
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
    case 2:
      givenLastName = "Murray";
      break;
    case 3:
      givenLastName = "Harker";
      break;
    case 4:
      givenLastName = "Parker";
      break;
    case 5:
      givenEmployer = "Parton";
      break;
    case 6:
      givenEmployer = "Mason";
      break;
    case 7:
      givenEmployer = "Hawkins";
      break;
    case 8:
      cReceptionist.Say(String.Format("Mr. %s, from %s, Esq.", givenLastName, givenEmployer));
      if(givenLastName == "Harker" && givenEmployer == "Hawkins")
      {
        cReceptionist.Say("Here you are");
        cReceptionist.Say("Congratulation, Mr. Harker, you have achieved all the requirement to take the examination!");
        player.Say("Splendid!");
        cReceptionist.Say("Of course, sir");
        cReceptionist.Say("The exam as two parts:");
        cReceptionist.Say("The first includes questions on local solicitors' procedures");
        if(!player.HasInventory(iProcedures))
        {
          dLawSocietyReceptionist.SetOptionState(3, eOptionOn);
        }
        cReceptionist.Say("The second is to demonstrate your knowledge of European politics and cultures");
        cReceptionist.Say("For this second part, you must choose a European region of your liking");
        player.Say("Oh. . . hum. .");
        Wait(40);
        cReceptionist.Say("Would you rather come back another time, sir?");
        player.Say("No! I'll. . . I'll take Transylvania");
        Wait(40);
        cReceptionist.Say("What an. . . original choice");
        player.Say("I'm sure it is. . .");
        cReceptionist.Say("You are in luck, sir");
        cReceptionist.Say("The British Museum is curating an exhibit on that specific region as we speak");
        player.Say("Is that so?");
        cReceptionist.Say("Indeed, sir");
        addTravelDestination(BritishMuseum);
        if(!player.HasInventory(iBritishMuseumTicket))
        {
          cReceptionist.Say("Of course, you would need access to the exhibit-specific archives to find the exam answers");
          player.Say("Oh. . .");
          cReceptionist.Say("It requires a special ticket");
          player.Say("Oh. . .");
          cReceptionist.Say("They are currently sold out");
          player.Say("Oh. . .");
          cReceptionist.Say("I reckon you do not have one");
          player.Say("That is correct");
          Wait(40);
          cReceptionist.Say("I can give you mine. . . If you do something for me. . .");
          player.Say("What kind of thing?");
          cReceptionist.Say("My b. . . friend is waiting for an important telegram");
          cReceptionist.Say("I would love to get my hand on it before he receives it");
          Wait(10);
          cReceptionist.Say("To give it to him myself, of course");
          player.Say("Of course. . .");
          cReceptionist.Say("His last name is Parton");
          player.Say("As in Robert Parton the President of the Law Society?");
          cReceptionist.Say("So should you find a way to snatch it, the archive ticket is yours");
          player.Say("How am I supposed to. . .");
          cReceptionist.Say("Nevermind then!");
          dLawSocietyReceptionist.SetOptionState(14, eOptionOn);
        }
        cReceptionist.Say("On behalf of the The Society of Attorneys, Solicitors, Proctors and others not being Barristers, practising in the Courts of Law and Equity of the United Kingdom,");
        cReceptionist.Say("*draws in a deep breath*");
        cReceptionist.Say("I offer you this exam book in which to consign your answers");
        player.AddInventory(iExam);
        giveScoreOnce("The exam is on", 1);
        if(player.HasInventory(iBritishMuseumTicket))
        {
          player.Say("Terrific! I cannot wait to go through it!");
        } else
        {
          player.Say("Thank you");
        }
        setTelegramInclusionByIndex("Mina", 3, true);
      } else
      {
        cReceptionist.Say(String.Format("I am deeply sorry, Mr. %s, your name is not on my list", givenLastName));
      }
      break;
    case 9:
      knowAboutPhoto = (dLawSocietyReceptionist.GetOptionState(9) == eOptionOn);
      break;
    case 10:
      if(knowAboutPhoto)
      {
        dLawSocietyReceptionist.SetOptionState(9, eOptionOn);
      }
      break;
    case 11:
      targetTime = translateTimeToMinutes(whatTimeIsIt(false));
      targetTime = targetTime + (120 + Random(60));
      CallRoomScript(12);
      break;
    case 12:
      notableSay(cPhotoPro, "Photos printed",  String.Format("Your pictures will be printed at %s", translateMinutesToHHMMAM(targetTime)), 0);
      cPhotoPro.Say("Come back then");
      dPhotoPro.SetOptionState(13, eOptionOn);
      dPhotoPro.SetOptionState(10, eOptionOff);
      dPhotoPro.SetOptionState(15, eOptionOff);
      break;
    case 13:
      if(isThisTimeBeforeThisTime(translateMinutesToHHMMAM(targetTime), whatTimeIsIt(false)))
      {
        cPhotoPro.Say("Yes");
        player.Say(". . .");
        player.Say(String.Format("It is %s, now", whatTimeIsIt(true)));
        cPhotoPro.Say("It is");
        player.Say(String.Format("You said they would be printed at %s", translateMinutesToHHMMAM(targetTime)));
        cPhotoPro.Say("They are printed");
        player.Say("Can I have them?");
        cPhotoPro.Say("There they are");
        tranfertAllSubitemFromOneParentToAnother(iSubmittedFilm, iPhotos);
        changeAllSubItemNoteInParent(iPhotos, "This photo is printed and ready to use");
        player.LoseInventory(iSubmittedFilm);
        player.AddInventory(iPhotos);
        cPhotoPro.LoseInventory(iSubmittedFilm);
        targetTime = -1;
        if(playerHasAllCarfaxPictures() && !gotTelegramMsg)
        {
          gotTelegramMsg = true;
          dPhotoPro.SetOptionState(13, eOptionOff);
          dLawSocietyReceptionist.SetOptionState(9, eOptionOff);
          player.Say("I got all photos, I need to send a telegram to Mr. Hawkins");
          if(!playerHasTravelDestination(TelegramOffice))
          {
            player.FaceObject(oDirectory);
            player.Say("Maybe I can find one in the Kelly's Directory");
          }
        }
      } else
      {
        CallRoomScript(12);
      }
      break;
    case 14:
      FadeOut(5);
      FadeIn(5);
      cReceptionist.Say("Mr. Harker, your results are in");
      cReceptionist.Say(String.Format("You got a grade of %d/%d", howManyCorrectExamAnswers(), howManyExamAnswers()));
      if(howManyCorrectExamAnswers() == howManyExamAnswers())
      {
        cReceptionist.Say("On behalf of the The Society of Attorneys, Solicitors, Proctors and others not being Barristers, practising in the Courts of Law and Equity of the United Kingdom,");
        cReceptionist.Say("I grant you to your new title of sollicitor");
        cHarker.Say("Thank you so much!");
        setTelegramInclusionByIndex("Mina", 3, false);
        setTelegramInclusionByIndex("Mina", 4, true);
        setTelegramInclusionByIndex("Hawkins", 3, true);
        player.LoseInventory(iExam);
        player.AddInventory(iDiploma);
        dLawSocietyReceptionist.SetOptionState(13, eOptionOff);
        player.SetTextProperty("TextDescription", "It is me: Jonathan Harker, Esq.");
        giveScoreOnce("Sollicitor!!!!", 10);
      } else
      {
        cReceptionist.Say("Sadly, it is unsufficient to obtain your diploma, sir");
        cReceptionist.Say("Here is your exam booklet back, you can try again");
      }
      break;
  }
}

function room_AfterFadeIn()
{
  musicInRoom(ALostInThought, 2);
}

function avoidance(int receptionistSpeed)
{
  int avoidX = player.x;
  
  int leftMax = 78;
  int rightMax = 137;
  
  int distLeftSq = (avoidX - leftMax) * (avoidX - leftMax);
  int distRightSq = (avoidX - rightMax) * (avoidX - rightMax);
  
  if(receptionistSpeed != cReceptionist.WalkSpeedX)
  {
    cReceptionist.StopMoving();
    cReceptionist.SetWalkSpeed(receptionistSpeed, receptionistSpeed);
  }
  
  if(distLeftSq > distRightSq)
  {
    if(!cReceptionist.Moving || !receptionistGoingLeft)
    {
      cReceptionist.Walk(leftMax, cReceptionist.y, eNoBlock, eAnywhere);
      receptionistGoingLeft = true;
    }
  } else
  {
    if(!cReceptionist.Moving || receptionistGoingLeft)
    {
      cReceptionist.Walk(rightMax, cReceptionist.y, eNoBlock, eAnywhere);
      receptionistGoingLeft = false;
    }
  }
}

function room_RepExec()
{
  if(receptionistAvoiding)
  {
    if(dLawSocietyReceptionist.GetOptionState(1) != eOptionOn)
    {
      receptionistAvoiding = false;
      cReceptionist.SetProperty("dialogMaxDistance", 60);
    } else if(isCharacterNearCharacter(player, 40.0, cReceptionist))
    {
      avoidance(5);
    } else if(isCharacterNearCharacter(player, 80.0, cReceptionist))
    {
      avoidance(3);
    } else if(isCharacterNearCharacter(player, 150.0, cReceptionist))
    {
      avoidance(1);
    } else if (!isCharacterNearCharacter(player, 200.0, cReceptionist))
    {
      cReceptionist.StopMoving();
    } else
    {
      cReceptionist.Walk(108, cReceptionist.y, eNoBlock, eAnywhere);
    }
  }
}

function blockSouth()
{
  oCord_cord1.Visible = true;
  oCord_cord2.Visible = true;
  oCord_cord3.Visible = true;
  oCord_cord4.Visible = true;
  oCord_cord5.Visible = true;
  oCord_pole1.Visible = true;
  oCord_pole2.Visible = true;
  oCord_pole3.Visible = true;
  oCord_pole4.Visible = true;
  oCord_pole5.Visible = true;
  oCord_pole6.Visible = true;
  blockedSouth = true;
}

function enterReception(bool eraseThoughts)
{
  SetBackgroundFrame(0);
  RemoveWalkableArea(1);
  cReceptionist.x = 108;
  cReceptionist.y = 120;
  cReceptionist.Transparency = 0;
  oDirectory.Visible = true;
  oExitSign.Visible = true;
  blockSouth();
  roomX = 10;//Left = - ; Right = +
  roomY = 10;//South = + ; North = -
  
  if(eraseThoughts && getMemorisedThought() == memorizedTrajectory)
  {
    loseThought();
    breadCrumbs.Clear();
  }
}

function enterPhotoDesk()
{
  SetBackgroundFrame(0);
  RemoveWalkableArea(1);
  cPhotoPro.x = 108;
  cPhotoPro.y = 120;
  cPhotoPro.Transparency = 0;
  oExitSign.Visible = true;
  oDirectory.Visible = true;
  roomX = 10;//Left = - ; Right = +
  roomY = 7;//South = + ; North = -
}

function enterCantine()
{
  SetBackgroundFrame(1);
  RemoveWalkableArea(1);
  oMenu.Visible = true;
  oCantine.Visible = true;
  oDirectory.Visible = false;
  roomX = 12;//Left = - ; Right = +
  roomY = 9;//South = + ; North = -
}

function room_Load()
{
  enterReception(false);
  cPhotoPro.Transparency = 100;
  if(breadCrumbs == null)
  {
    breadCrumbs = Dictionary.Create(eSorted);
  }
  breadCrumbs.Clear();
  memorizedTrajectory = "";
}

function addLastMazeDirection(String mazeDirection)
{
  String dictIndex;
  String lastItem;
  int isAMultiplier;
  bool differentDirection = true;
  
  if(breadCrumbs.ItemCount > 0)//there is at least one item
  {
    dictIndex = String.Format("%09d", breadCrumbs.ItemCount - 1);
    lastItem = breadCrumbs.Get(dictIndex);
    
    if(lastItem.IndexOf(mazeDirection) != -1)//same direction again,  use multiplier
    {
      differentDirection = false;
      lastItem = lastItem.Replace(mazeDirection, "", eCaseInsensitive);
      lastItem = lastItem.Replace(" ", "", eCaseInsensitive);
      switch(lastItem)
      {
        case "":
          lastItem = "twice";
          break;
        case "twice":
          lastItem = "thrice";
          break;
        case "thrice":
          lastItem = "x4";
          break;
        default:
          lastItem = lastItem.Replace("x", "", eCaseInsensitive);
          isAMultiplier = lastItem.AsInt + 1;
          lastItem = String.Format("x%d", isAMultiplier);
      }
      breadCrumbs.Set(dictIndex, String.Format("%s %s", mazeDirection, lastItem));
    }
  }
  
  if(differentDirection)
  {
    dictIndex = String.Format("%09d", breadCrumbs.ItemCount);
    breadCrumbs.Set(dictIndex, mazeDirection);
  }
}

function setupMemorizedTrajectory(String mazeDirection)
{
  String memorizedWay = "";
  String andMore = ". . .";
  String dictIndex = String.Format("%09d", breadCrumbs.ItemCount);
  int nbOfDirectionsMemorized = 3;
   
  addLastMazeDirection(mazeDirection);
  
  if(nbOfDirectionsMemorized > breadCrumbs.ItemCount)
  {
    nbOfDirectionsMemorized = breadCrumbs.ItemCount;
  } else if(nbOfDirectionsMemorized < breadCrumbs.ItemCount)
  {
    memorizedWay = andMore;
  }
  
  while(nbOfDirectionsMemorized > 0)
  {
    dictIndex = String.Format("%09d", breadCrumbs.ItemCount - nbOfDirectionsMemorized);
    if(memorizedWay != "" && memorizedWay != andMore)
    {
      memorizedWay = memorizedWay.Append(", ");
    }
    memorizedWay = memorizedWay.Append(breadCrumbs.Get(dictIndex));
    nbOfDirectionsMemorized--;
  }
  
  memorizedTrajectory = memorizedWay;
  memorize(memorizedWay);
}

function memoryOfTheWay(String mazeDirection)
{  
  String currentMemory = getMemorisedThought();
  
  if(currentMemory == ". . .I forget") // no current thought
  {
    breadCrumbs.Clear();
    memorizedTrajectory = "";
    setupMemorizedTrajectory(mazeDirection);
  } else if(currentMemory == memorizedTrajectory) // memory is the way
  {
    setupMemorizedTrajectory(mazeDirection);
  }  
  //do nothing if there is a current memory that is NOT the trajectory;
}

function hideEverything()
{
  SetBackgroundFrame(1);
  RestoreWalkableArea(1);
  cReceptionist.Transparency = 100;
  cPhotoPro.Transparency = 100;
  oMenu.Visible = false;
  oCantine.Visible = false;
  oExitSign.Visible = false;
  oReceptionSign.Visible = false;
  oDirectory.Visible = false;
  oCord_cord1.Visible = false;
  oCord_cord2.Visible = false;
  oCord_cord3.Visible = false;
  oCord_cord4.Visible = false;
  oCord_cord5.Visible = false;
  oCord_pole1.Visible = false;
  oCord_pole2.Visible = false;
  oCord_pole3.Visible = false;
  oCord_pole4.Visible = false;
  oCord_pole5.Visible = false;
  oCord_pole6.Visible = false;
  blockedSouth = false;
}

function changeLawSocietyRoom(String mazeDirection)
{
  triggerEdges = false;
  FadeOut(5);
  memoryOfTheWay(mazeDirection);
  hideEverything();
  
  switch(mazeDirection)
  {
    case "South":
      roomY++;
      player.x = 267;
      player.y = 146;
      break;
    case "West":
      roomX--;
      player.x = 267;
      player.y = 153;
      break;
    case "East":
      roomX++;
      player.x = 38;
      player.y = 153;
      break;
    case "North":
      roomY--;
      player.x = 267;
      player.y = 159;
      break;
    case "Warp to reception":
      roomX = 10;
      roomY = 10;
      player.x = 160;
      player.y = 160;
      break;
  }
  
  if(roomX < 5)
  {
    roomX = 15;
  } else if(roomX > 15)
  {
    roomX = 5;
  }
  
  if(roomX == 10 && roomY == 7){
    enterPhotoDesk();
  } else if (roomX == 10 && roomY == 6)//just above photodesk (which has an exit)
  {
    blockSouth();
  } else if (roomX == 12 && roomY == 9)
  {
    enterCantine();
  } else if (roomX == 12 && roomY == 8)//just above cantine (which blocks the corridor)
  {
    blockSouth();
  } else if (roomX == 10 && roomY == 10)
  {
    enterReception(true);
  } else if (roomX == 10 && roomY == 9)//just above reception (which has an exit)
  {
    blockSouth();
  }
  
  if(roomY == 5)
  {
    SetBackgroundFrame(0);
    RemoveWalkableArea(1);
  } else if(roomY == 10 && roomX != 10) // bottom row, but not AT reception
  {
    oReceptionSign.Visible = true;
  } else if(roomY > 10) // crossed the bottom row, somehow
  {
    enterReception(true);
  }  
  
  FadeIn(5);
  triggerEdges = true;
}

function room_LeaveBottom()
{ 
  player.StopMoving();
  if(blockedSouth)
  {
    player.Say("I cannot go South from here");
    player.Walk(player.x, 170, eBlock, eWalkableAreas);
  } else if(triggerEdges)
  {
    if(oReceptionSign.Visible)//back to reception
    {
      changeLawSocietyRoom("Warp to reception");
    } else {
      changeLawSocietyRoom("South");
    }
  }
}

function room_LeaveLeft()
{
  player.StopMoving();
  if(triggerEdges)
  {
    changeLawSocietyRoom("West");
  }
}

function room_LeaveRight()
{
  player.StopMoving();
  if(triggerEdges)
  {
    changeLawSocietyRoom("East");
  }
}

function room_LeaveTop()
{
  player.StopMoving();
  if(triggerEdges)
  {
    changeLawSocietyRoom("North");
  }
}

function region1_WalksOnto()
{
  if(oExitSign.Visible)
  {
    dTravel.Start();
  }
}

function room_FirstLoad()
{
  int i;
  String index;
  String appendText;
}

function oDirectory_Interact()
{
  useDirectory();
}
