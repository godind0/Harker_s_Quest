// new module script
//################## UTILITIES ####################################
bool debugFromHere = false;
bool debugTools;

function debugDisplay(String message) // Display used for debug so we can turn them off safely for the release candidate
{
  if(debugTools){
    Display(message);
  }
}

function setDebugTools(bool targetBool)
{
  debugTools = targetBool;
}

bool getDebugTools()
{
  return debugTools;
}

function setDebugFromHere(bool targetBool)
{
  debugFromHere = targetBool;
}

function debugDisplayFromHere(String message)
{
  if(debugFromHere)
  {
    debugDisplay(message);
  }
}

String keycodeToString(char typeCharacter) // returns the symbol associated with the code (e.g.: 65 => A)
{
  return String.Format("%c",  typeCharacter);
}

String ProperCase(this String*, bool bringOthersToLowerCase)
{
  String returnString;
  if(this != "")
  {
    String firstLetter = this.Truncate(1);
    firstLetter = firstLetter.UpperCase();
    String restOfWord = this.Substring(1, this.Length -1);
    if(bringOthersToLowerCase)
    {      
      restOfWord = restOfWord.LowerCase();
    }
    returnString = String.Format("%s%s", firstLetter, restOfWord);
  }
  return returnString;
}

int[] makeIntArray(int param0, int param1, int param2, int param3, int param4, int param5, int param6, int param7,  int param8, int param9)
{
  int returnArray[];
  if(param9 != -1)
  {
    returnArray = new int[10];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
    returnArray[3] = param3;
    returnArray[4] = param4;
    returnArray[5] = param5;
    returnArray[6] = param6;
    returnArray[7] = param7;
    returnArray[8] = param8;
    returnArray[9] = param9;
  } else if(param8 != -1)
  {
    returnArray = new int[9];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
    returnArray[3] = param3;
    returnArray[4] = param4;
    returnArray[5] = param5;
    returnArray[6] = param6;
    returnArray[7] = param7;
    returnArray[8] = param8;
  } else if(param7 != -1)
  {
    returnArray = new int[8];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
    returnArray[3] = param3;
    returnArray[4] = param4;
    returnArray[5] = param5;
    returnArray[6] = param6;
    returnArray[7] = param7;
  } else if(param6 != -1)
  {
    returnArray = new int[7];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
    returnArray[3] = param3;
    returnArray[4] = param4;
    returnArray[5] = param5;
    returnArray[6] = param6;
  } else if(param5 != -1)
  {
    returnArray = new int[6];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
    returnArray[3] = param3;
    returnArray[4] = param4;
    returnArray[5] = param5;
  } else if(param4 != -1)
  {
    returnArray = new int[5];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
    returnArray[3] = param3;
    returnArray[4] = param4;
  } else if(param3 != -1)
  {
    returnArray = new int[4];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
    returnArray[3] = param3;
  } else if(param2 != -1)
  {
    returnArray = new int[3];
    returnArray[0] = param0;
    returnArray[1] = param1;
    returnArray[2] = param2;
  } else if(param1 != -1)
  {
    returnArray = new int[2];
    returnArray[0] = param0;
    returnArray[1] = param1;
  } else
  {
    returnArray = new int[1];
    returnArray[0] = param0;
  }
  return returnArray;
}