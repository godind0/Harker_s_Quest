// room script file

function breakPlank()
{
  if(oPlank.GetProperty("Open_SpriteNumber") == -2)
  {
    player.Say("Ouch!");
    player.Say("*mumbles* Bl.. h...");
    player.Say("I got a splinter");
    player.Say("The things I do for a sale...");
    oPlank.SetProperty("Close_SpriteNumber", -1);
    oPlank.SetProperty("Open_SpriteNumber", -1);
    oPlank.Visible = false;
    RestoreWalkableArea(2);
    GiveScore(-1);
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("break") != -1 &&(cmd.IndexOf("plank") != -1 || cmd.IndexOf("fence") != -1))
  {
    sendBackToNormalParsing = false;
    breakPlank();
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomHotspots && index == 1 && verb == "photograph")//kitchen
  {
    takeAPicture("Carfax's Kitchen", "This is the estate's kitchen", 2);
    sendBackToNormalParsing = false;
  } else if (eT == roomObjects && index == 0 && verb == "open")
  {
    sendBackToNormalParsing = false;
    breakPlank();
  } else if ((eT == roomObjects || eT == roomHotspots) && index == 1 && verb == "open") //either window
  {
    sendBackToNormalParsing = false;
    if(isCharacterNearObject(oWindowMudroom, 40.0, player) || isCharacterNearHotspot(hKitchenWindow, 40.0, player))
    {
      player.Think("That window is locked from the inside");
    } else
    {
      player.Think("I'm too far away");
    }
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 0 && verb == "open")
  {
    breakPlank();
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
  }
}
function room_AfterFadeIn()
{
  musicInRoom(aDeambulation, 1);
}

function region1_WalksOnto()
{
  player.ChangeRoom(16, 290, 165, eDirectionLeft);
}

function region2_WalksOnto()
{
  player.ChangeRoom(16, 290, 165, eDirectionLeft);
}

function region3_WalksOnto()
{
  player.ChangeRoom(14, 36, 152, eDirectionDown);
}

function region4_WalksOnto()
{
  player.ChangeRoom(14, 18, 171, eDirectionRight);
}

function room_FirstLoad()
{
  RemoveWalkableArea(2);
}
