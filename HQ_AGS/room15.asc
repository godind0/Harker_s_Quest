// room script file
//TO DO
//TO TEST Must be able to climb the trellis to reach the bedroom balcony
//TO TEST Walking to the left leads to the chapel
//TO TEST Walking FROM the chapel leads here (inside or outside depending on where you came from
//TO TEST Must be able to install ladder (and restore walkingarea 3)
//TO TEST Must be able to photograph bedroom


function breakPlank()
{
  if(oPlank.GetProperty("Open_SpriteNumber") == -2)
  {
    player.Walk(52, 187, eBlock, eWalkableAreas);
    player.FaceDirection(eDirectionUp);
    player.Say("Ouch!");
    player.Say("*mumbles* Bl. . h. . .");
    player.Say("I got a splinter");
    player.Say("The things I do for a sale. . .");
    oPlank.SetProperty("Close_SpriteNumber", -1);
    oPlank.SetProperty("Open_SpriteNumber", -1);
    oPlank.Visible = false;
    player.AddInventory(iPlank);
    RestoreWalkableArea(2);
    GiveScore(-1);
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("break") != -1 &&(cmd.IndexOf("plank") != -1 || cmd.IndexOf("fence") != -1))
  {
    sendBackToNormalParsing = false;
    breakPlank();
  } else if ((cmd.StartsWith("look", eCaseInsensitive) || cmd.StartsWith("examine", eCaseInsensitive) || cmd.StartsWith("observe", eCaseInsensitive)) && (cmd.IndexOf("Mansion") != -1 || cmd.IndexOf("House") != -1 || cmd.IndexOf("Carfax") != -1))
  {
    player.Say("This is Carfax, no doubt a corruption of the old Quatre Face, as the house is four-sided, agreeing with the cardinal points of the compass");
    player.Say("The land must be in all some twenty acres, quite surrounded by a solid stone wall I crossed without difficulty");
    player.Say("The house is very large and of all periods back, I should say, to medi√¶val times");
    player.Say("There are many trees on the land, which make it in places gloomy");
    player.Say("One part is of stone immensely thick, with a few windows. It looks like part of a keep");
    player.Say("I also noticed a pond and an old chapel or church, while advancing towards the house");
    player.Say("The pond is deep, and dark-looking, evidently fed by some springs, as the water seems clear and flows away in a fair-sized stream");    
    player.Say("The house has been added to, but in a very straggling way, and I can only guess at the amount of ground it covers, which must be very great");
    player.FaceDirection(eDirectionLeft);
    Wait(20);
    player.FaceDirection(eDirectionRight);
    player.Say("There are but few houses close at hand, one being a very large house only recently added to and formed into a private sanitarium");
    player.Say("It is not, however, visible from the grounds");
    giveScoreOnce("Observe Carfax", 3);
    sendBackToNormalParsing = false;
  } else if ((cmd.IndexOf("put") != -1 || cmd.IndexOf("install") != -1 || cmd.IndexOf("lean") != -1 || cmd.IndexOf("use") != -1) &&
              cmd.IndexOf("ladder") != -1)
  {
    sendBackToNormalParsing = false;
    if(!player.HasInventory(iLadder))
    {
      player.Say("I am not sure what to do");
    } else if (player.y < 285)
    {
      player.Walk(132, 203, eBlock, eWalkableAreas);
      player.LoseInventory(iLadder);
      oLadder.Visible = true;
      RestoreWalkableArea(3);
      giveScoreOnce("Installed a ladder", 1);
      player.Walk(132, 200, eBlock, eWalkableAreas);
    }
  }
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomHotspots && index == 1 && verb == "photograph")//cabinet
  {
    takeAPicture("Carfax's Cabinet", "This is the estate's cabinet", 0);
    sendBackToNormalParsing = false;
  } else if(eT == roomHotspots && index == 2 && verb == "photograph")//library
  {
    takeAPicture("Carfax's Library", "This is the estate's library", 0);
    sendBackToNormalParsing = false;
  } else if(eT == roomHotspots && index == 3 && verb == "photograph")//bedroom
  {
    takeAPicture("Carfax's Bedroom", "This is the estate's bedroom", 3);
    sendBackToNormalParsing = false;
  } else if (eT == roomObjects && index == 0 && verb == "open")
  {
    sendBackToNormalParsing = false;
    breakPlank();
  } else if (eT == roomHotspots && (index == 1 || index == 2 || index == 3) && verb == "open") //either window
  {
    sendBackToNormalParsing = false;
    if(isCharacterNearHotspot(hCabinetWindow, 40.0, player) || isCharacterNearHotspot(hBedroomWindow, 40.0, player) || isCharacterNearHotspot(hLibraryWindow, 40.0, player))
    {
      player.Think("That window is locked from the inside");
    } else
    {
      player.Think("I'm too far away");
    }
  }
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  if(eT == roomObjects && index == 0 && verb == "open")
  {
    breakPlank();
  }
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
      }
      break;
  }
}
function room_AfterFadeIn()
{
  musicInRoom(aDeambulation, 1);
}

function region1_WalksOnto()
{
  player.ChangeRoom(7, 290, 180, eDirectionLeft);//chapel
}

function region2_WalksOnto()
{
  player.ChangeRoom(7, 290, 185, eDirectionLeft);//chapel
}

function region3_WalksOnto()
{
  player.ChangeRoom(14, 36, 152, eDirectionDown);//front from inside gate
}

function region4_WalksOnto()
{
  player.ChangeRoom(14, 18, 171, eDirectionRight);//front from inside gate
}

function room_FirstLoad()
{
  RemoveWalkableArea(2);
  RemoveWalkableArea(3);
}

function region5_WalksOnto()
{
  player.LockView(20);
}

function region5_WalksOff()
{
  player.UnlockView();
}
