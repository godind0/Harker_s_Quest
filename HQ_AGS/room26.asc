
function librarianEnters()
{
  if(cSchoolLib.Room == 26)
  {
    cSchoolLib.x = 152;
    cSchoolLib.y = 172;
  } else
  {
    cSchoolLib.ChangeRoom(26, 153, 172, eDirectionUp);
  }
  cSchoolLib.Transparency = 0;
  cSchoolLib.FaceCharacter(player);
  cSchoolLib.SayBackground("What are you doin in here!");
  cSchoolLib.gotoCharacter(player);
  player.FaceCharacter(cSchoolLib);
  if(!cSchoolLib.getPreviouslyTalkedTo())
  {
    cSchoolLib.Say("First and last warning, partna'");
    cSchoolLib.Say("Now, get out of here!");
    cSchoolLib.setPreviouslyTalkedTo(true);
    player.Say("Yes, m'am");
    player.Walk(152, 172, eBlock, eWalkableAreas);
    player.ChangeRoom(25, 411, 145, eDirectionDown);
  } else
  {
    cSchoolLib.Say("You are in big trouble, mister!");
    cSchoolLib.Say("Follow me to the Headmistress's office");
    gameIsOver("Jonathan got banned from the school and got Mina fired");
  }
}

bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}


function highjackAfterInteract(int index, elementType eT, String verb)
{
  
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      hide_parser_gui();
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm. . . I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
    case 2:
      librarianEnters();
      break;
  }
}
